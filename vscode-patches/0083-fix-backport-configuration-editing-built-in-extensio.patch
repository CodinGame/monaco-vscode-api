From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Lo=C3=AFc=20Mangeonjean?= <loic@coderpad.io>
Date: Wed, 22 Oct 2025 18:02:13 +0200
Subject: [PATCH] fix: backport configuration-editing built-in extension
 detection fix

https://github.com/microsoft/vscode/pull/272730
---
 extensions/configuration-editing/src/extensionsProposals.ts | 2 +-
 src/vs/workbench/api/common/extHostExtensionService.ts      | 2 ++
 src/vscode-dts/vscode.d.ts                                  | 5 +++++
 3 files changed, 8 insertions(+), 1 deletion(-)

diff --git a/extensions/configuration-editing/src/extensionsProposals.ts b/extensions/configuration-editing/src/extensionsProposals.ts
index ba1c33e7845..bafc4ef36a0 100644
--- a/extensions/configuration-editing/src/extensionsProposals.ts
+++ b/extensions/configuration-editing/src/extensionsProposals.ts
@@ -8,7 +8,7 @@ import * as vscode from 'vscode';
 
 export async function provideInstalledExtensionProposals(existing: string[], additionalText: string, range: vscode.Range, includeBuiltinExtensions: boolean): Promise<vscode.CompletionItem[] | vscode.CompletionList> {
 	if (Array.isArray(existing)) {
-		const extensions = includeBuiltinExtensions ? vscode.extensions.all : vscode.extensions.all.filter(e => !(e.id.startsWith('vscode.') || e.id === 'Microsoft.vscode-markdown'));
+		const extensions = includeBuiltinExtensions ? vscode.extensions.all : vscode.extensions.all.filter(e => !(e.isBuiltin || e.id === 'Microsoft.vscode-markdown'));
 		const knownExtensionProposals = extensions.filter(e => existing.indexOf(e.id) === -1);
 		if (knownExtensionProposals.length) {
 			return knownExtensionProposals.map(e => {
diff --git a/src/vs/workbench/api/common/extHostExtensionService.ts b/src/vs/workbench/api/common/extHostExtensionService.ts
index 61b03cc7ae9..5025f5b37de 100644
--- a/src/vs/workbench/api/common/extHostExtensionService.ts
+++ b/src/vs/workbench/api/common/extHostExtensionService.ts
@@ -1177,12 +1177,14 @@ export class Extension<T extends object | null | undefined> implements vscode.Ex
 	readonly packageJSON: IExtensionDescription;
 	readonly extensionKind: vscode.ExtensionKind;
 	readonly isFromDifferentExtensionHost: boolean;
+	readonly isBuiltin: boolean;
 
 	constructor(extensionService: IExtHostExtensionService, originExtensionId: ExtensionIdentifier, description: IExtensionDescription, kind: ExtensionKind, isFromDifferentExtensionHost: boolean) {
 		this.#extensionService = extensionService;
 		this.#originExtensionId = originExtensionId;
 		this.#identifier = description.identifier;
 		this.id = description.identifier.value;
+		this.isBuiltin = description.isBuiltin || description.isUserBuiltin;
 		this.extensionUri = description.extensionLocation;
 		this.extensionPath = path.normalize(originalFSPath(description.extensionLocation));
 		this.packageJSON = description;
diff --git a/src/vscode-dts/vscode.d.ts b/src/vscode-dts/vscode.d.ts
index 7bb1c69f7f9..d457207627d 100644
--- a/src/vscode-dts/vscode.d.ts
+++ b/src/vscode-dts/vscode.d.ts
@@ -8311,6 +8311,11 @@ declare module 'vscode' {
 		 */
 		extensionKind: ExtensionKind;
 
+		/**
+		 * `true` if the extension is a built-in extension.
+		 */
+		isBuiltin: boolean;
+
 		/**
 		 * The public API exported by this extension (return value of `activate`).
 		 * It is an invalid action to access this field before this extension has been activated.
