From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Lo=C3=AFc=20Mangeonjean?= <loic@coderpad.io>
Date: Mon, 6 Jan 2025 11:43:30 +0100
Subject: [PATCH] feat: add transformConstEnums script

---
 build/lib/transformConstEnums.js | 87 ++++++++++++++++++++++++++++
 build/lib/transformConstEnums.ts | 97 ++++++++++++++++++++++++++++++++
 2 files changed, 184 insertions(+)
 create mode 100644 build/lib/transformConstEnums.js
 create mode 100644 build/lib/transformConstEnums.ts

diff --git a/build/lib/transformConstEnums.js b/build/lib/transformConstEnums.js
new file mode 100644
index 00000000000..a0da20e6725
--- /dev/null
+++ b/build/lib/transformConstEnums.js
@@ -0,0 +1,87 @@
+"use strict";
+Object.defineProperty(exports, "__esModule", { value: true });
+/*---------------------------------------------------------------------------------------------
+ *  Copyright (c) Microsoft Corporation. All rights reserved.
+ *  Licensed under the MIT License. See License.txt in the project root for license information.
+ *--------------------------------------------------------------------------------------------*/
+const ts = require("typescript");
+const fs = require("fs");
+const path = require("path");
+const REPO_ROOT = path.join(__dirname, '../../');
+const SRC_DIR = path.join(REPO_ROOT, 'src');
+function applyFixes(sourceFile) {
+    const edits = [];
+    function visit(node) {
+        if (ts.isEnumDeclaration(node) && node.modifiers?.some(mod => mod.kind === ts.SyntaxKind.ConstKeyword)) {
+            const constModifier = node.modifiers.find(mod => mod.kind === ts.SyntaxKind.ConstKeyword);
+            if (constModifier) {
+                edits.push({
+                    start: constModifier.getStart(),
+                    end: constModifier.getEnd() + 1,
+                    replacement: '',
+                });
+            }
+        }
+        ts.forEachChild(node, visit);
+    }
+    visit(sourceFile);
+    let transformedCode = sourceFile.text;
+    for (let i = edits.length - 1; i >= 0; i--) {
+        const { start, end, replacement } = edits[i];
+        transformedCode = transformedCode.slice(0, start) + replacement + transformedCode.slice(end);
+    }
+    fs.writeFileSync(sourceFile.fileName, transformedCode);
+    incrementScriptVersion(sourceFile.fileName);
+}
+const sourceFileVersion = new Map();
+function incrementScriptVersion(script) {
+    const newVersion = (sourceFileVersion.get(script) ?? 1) + 1;
+    sourceFileVersion.set(script, newVersion);
+    return newVersion.toString();
+}
+function run() {
+    const configPath = ts.findConfigFile(SRC_DIR, ts.sys.fileExists, 'tsconfig.json');
+    const configFile = ts.readConfigFile(configPath, ts.sys.readFile);
+    const parsedConfig = ts.parseJsonConfigFileContent(configFile.config, ts.sys, path.dirname(configPath));
+    const servicesHost = {
+        getScriptFileNames: () => parsedConfig.fileNames.filter(f => !f.endsWith('.test.ts')),
+        getScriptVersion: fileName => sourceFileVersion.get(fileName)?.toString() ?? '1',
+        getScriptSnapshot: fileName => {
+            if (!fs.existsSync(fileName)) {
+                return undefined;
+            }
+            return ts.ScriptSnapshot.fromString(fs.readFileSync(fileName).toString());
+        },
+        getCurrentDirectory: () => SRC_DIR,
+        getCompilationSettings: () => ({
+            ...parsedConfig.options,
+            verbatimModuleSyntax: true,
+            'paths': {
+                'vs/*': [
+                    './vs/*'
+                ]
+            },
+            forceConsistentCasingInFileNames: true
+        }),
+        getDefaultLibFileName: options => ts.getDefaultLibFilePath(options),
+        fileExists: ts.sys.fileExists,
+        readFile: ts.sys.readFile,
+        readDirectory: ts.sys.readDirectory,
+        directoryExists: ts.sys.directoryExists,
+        getDirectories: ts.sys.getDirectories,
+        writeFile: ts.sys.writeFile,
+        useCaseSensitiveFileNames() {
+            return true;
+        }
+    };
+    const service = ts.createLanguageService(servicesHost, ts.createDocumentRegistry(true));
+    const sourceFiles = service.getProgram().getSourceFiles().filter(sourceFile => sourceFile.fileName.startsWith(SRC_DIR));
+    let index = 0;
+    for (const sourceFile of sourceFiles) {
+        index++;
+        console.log(Math.round(index * 100 / sourceFiles.length) + '%', sourceFile.fileName);
+        applyFixes(sourceFile);
+    }
+}
+run();
+//# sourceMappingURL=transformConstEnums.js.map
\ No newline at end of file
diff --git a/build/lib/transformConstEnums.ts b/build/lib/transformConstEnums.ts
new file mode 100644
index 00000000000..c2f2ab551a6
--- /dev/null
+++ b/build/lib/transformConstEnums.ts
@@ -0,0 +1,97 @@
+/*---------------------------------------------------------------------------------------------
+ *  Copyright (c) Microsoft Corporation. All rights reserved.
+ *  Licensed under the MIT License. See License.txt in the project root for license information.
+ *--------------------------------------------------------------------------------------------*/
+import * as ts from 'typescript';
+import * as fs from 'fs';
+import * as path from 'path';
+
+const REPO_ROOT = path.join(__dirname, '../../');
+const SRC_DIR = path.join(REPO_ROOT, 'src');
+
+function applyFixes(sourceFile: ts.SourceFile) {
+	const edits: { start: number; end: number; replacement: string }[] = [];
+
+	function visit(node: ts.Node): void {
+		if (ts.isEnumDeclaration(node) && node.modifiers?.some(mod => mod.kind === ts.SyntaxKind.ConstKeyword)) {
+			const constModifier = node.modifiers.find(mod => mod.kind === ts.SyntaxKind.ConstKeyword);
+			if (constModifier) {
+				edits.push({
+					start: constModifier.getStart(),
+					end: constModifier.getEnd() + 1,
+					replacement: '',
+				});
+			}
+		}
+		ts.forEachChild(node, visit);
+	}
+
+	visit(sourceFile);
+
+	let transformedCode = sourceFile.text;
+	for (let i = edits.length - 1; i >= 0; i--) {
+		const { start, end, replacement } = edits[i];
+		transformedCode = transformedCode.slice(0, start) + replacement + transformedCode.slice(end);
+	}
+
+	fs.writeFileSync(sourceFile.fileName, transformedCode);
+	incrementScriptVersion(sourceFile.fileName);
+}
+
+const sourceFileVersion = new Map<string, number>();
+function incrementScriptVersion(script: string) {
+	const newVersion = (sourceFileVersion.get(script) ?? 1) + 1;
+	sourceFileVersion.set(script, newVersion);
+	return newVersion.toString();
+}
+
+function run() {
+	const configPath = ts.findConfigFile(SRC_DIR, ts.sys.fileExists, 'tsconfig.json')!;
+	const configFile = ts.readConfigFile(configPath, ts.sys.readFile);
+	const parsedConfig = ts.parseJsonConfigFileContent(configFile.config, ts.sys, path.dirname(configPath));
+	const servicesHost: ts.LanguageServiceHost = {
+		getScriptFileNames: () => parsedConfig.fileNames.filter(f => !f.endsWith('.test.ts')),
+		getScriptVersion: fileName => sourceFileVersion.get(fileName)?.toString() ?? '1',
+		getScriptSnapshot: fileName => {
+			if (!fs.existsSync(fileName)) {
+				return undefined;
+			}
+
+			return ts.ScriptSnapshot.fromString(fs.readFileSync(fileName).toString());
+		},
+		getCurrentDirectory: () => SRC_DIR,
+		getCompilationSettings: () => ({
+			...parsedConfig.options,
+			verbatimModuleSyntax: true,
+			'paths': {
+				'vs/*': [
+					'./vs/*'
+				]
+			},
+			forceConsistentCasingInFileNames: true
+		}),
+		getDefaultLibFileName: options => ts.getDefaultLibFilePath(options),
+		fileExists: ts.sys.fileExists,
+		readFile: ts.sys.readFile,
+		readDirectory: ts.sys.readDirectory,
+		directoryExists: ts.sys.directoryExists,
+		getDirectories: ts.sys.getDirectories,
+		writeFile: ts.sys.writeFile,
+		useCaseSensitiveFileNames() {
+			return true;
+		}
+	};
+	const service = ts.createLanguageService(servicesHost, ts.createDocumentRegistry(true));
+
+	const sourceFiles = service.getProgram()!.getSourceFiles().filter(sourceFile => sourceFile.fileName.startsWith(SRC_DIR));
+	let index = 0;
+	for (const sourceFile of sourceFiles) {
+		index++;
+		console.log(Math.round(index * 100 / sourceFiles.length) + '%', sourceFile.fileName);
+
+		applyFixes(sourceFile);
+	}
+}
+
+
+run();
