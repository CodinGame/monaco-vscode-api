From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Lo=C3=AFc=20Mangeonjean?= <loic@coderpad.io>
Date: Mon, 11 Mar 2024 18:16:29 +0100
Subject: [PATCH] cleanup: remove some checks and warnings

---
 .../contrib/webview/browser/pre/service-worker.js     |  3 +--
 .../contrib/webview/browser/webviewElement.ts         | 10 ----------
 .../auxiliaryWindow/browser/auxiliaryWindowService.ts |  7 -------
 .../extensions/browser/webWorkerExtensionHost.ts      |  2 --
 .../services/textMate/common/TMScopeRegistry.ts       | 11 -----------
 5 files changed, 1 insertion(+), 32 deletions(-)

diff --git a/src/vs/workbench/contrib/webview/browser/pre/service-worker.js b/src/vs/workbench/contrib/webview/browser/pre/service-worker.js
index e5fa674ea82..c3e8d26f3da 100644
--- a/src/vs/workbench/contrib/webview/browser/pre/service-worker.js
+++ b/src/vs/workbench/contrib/webview/browser/pre/service-worker.js
@@ -451,7 +451,6 @@ async function getOuterIframeClient(webviewId) {
 	const allClients = await sw.clients.matchAll({ includeUncontrolled: true });
 	return allClients.filter(client => {
 		const clientUrl = new URL(client.url);
-		const hasExpectedPathName = (clientUrl.pathname === `${rootPath}/` || clientUrl.pathname === `${rootPath}/index.html` || clientUrl.pathname === `${rootPath}/index-no-csp.html`);
-		return hasExpectedPathName && clientUrl.searchParams.get('id') === webviewId;
+		return clientUrl.searchParams.get('id') === webviewId;
 	});
 }
diff --git a/src/vs/workbench/contrib/webview/browser/webviewElement.ts b/src/vs/workbench/contrib/webview/browser/webviewElement.ts
index 1273b8c7a9a..6a86d329f6f 100644
--- a/src/vs/workbench/contrib/webview/browser/webviewElement.ts
+++ b/src/vs/workbench/contrib/webview/browser/webviewElement.ts
@@ -490,11 +490,6 @@ export class WebviewElement extends Disposable implements IWebview, WebviewFindD
 				return;
 			}
 
-			if (e.origin !== this._webviewContentOrigin(this._encodedWebviewOrigin)) {
-				console.log(`Skipped renderer receiving message due to mismatched origins: ${e.origin} ${this._webviewContentOrigin}`);
-				return;
-			}
-
 			if (e.data.channel === 'webview-ready') {
 				if (this._messagePort) {
 					return;
@@ -549,11 +544,6 @@ export class WebviewElement extends Disposable implements IWebview, WebviewFindD
 		return endpoint;
 	}
 
-	private _webviewContentOrigin(encodedWebviewOrigin: string): string {
-		const uri = URI.parse(this.webviewContentEndpoint(encodedWebviewOrigin));
-		return uri.scheme + '://' + uri.authority.toLowerCase();
-	}
-
 	private doPostMessage(channel: string, data?: any, transferable: Transferable[] = []): boolean {
 		if (this.element && this._messagePort) {
 			this._messagePort.postMessage({ channel, args: data }, transferable);
diff --git a/src/vs/workbench/services/auxiliaryWindow/browser/auxiliaryWindowService.ts b/src/vs/workbench/services/auxiliaryWindow/browser/auxiliaryWindowService.ts
index aab43037968..f03d7d69921 100644
--- a/src/vs/workbench/services/auxiliaryWindow/browser/auxiliaryWindowService.ts
+++ b/src/vs/workbench/services/auxiliaryWindow/browser/auxiliaryWindowService.ts
@@ -367,13 +367,6 @@ export class BrowserAuxiliaryWindowService extends Disposable implements IAuxili
 	}
 
 	protected createContainer(auxiliaryWindow: CodeWindow, disposables: DisposableStore, options?: IAuxiliaryWindowOpenOptions): { stylesLoaded: Barrier; container: HTMLElement } {
-		auxiliaryWindow.document.createElement = function () {
-			// Disallow `createElement` because it would create
-			// HTML Elements in the "wrong" context and break
-			// code that does "instanceof HTMLElement" etc.
-			throw new Error('Not allowed to create elements in child window JavaScript context. Always use the main window so that "xyz instanceof HTMLElement" continues to work.');
-		};
-
 		this.applyMeta(auxiliaryWindow);
 		const { stylesLoaded } = this.applyCSS(auxiliaryWindow, disposables);
 		const container = this.applyHTML(auxiliaryWindow, disposables);
diff --git a/src/vs/workbench/services/extensions/browser/webWorkerExtensionHost.ts b/src/vs/workbench/services/extensions/browser/webWorkerExtensionHost.ts
index 2c6fbf876ac..9fcd381cc72 100644
--- a/src/vs/workbench/services/extensions/browser/webWorkerExtensionHost.ts
+++ b/src/vs/workbench/services/extensions/browser/webWorkerExtensionHost.ts
@@ -112,8 +112,6 @@ export class WebWorkerExtensionHost extends Disposable implements IExtensionHost
 				res.searchParams.set('salt', stableOriginUUID);
 				return res.toString();
 			}
-
-			console.warn(`The web worker extension host is started in a same-origin iframe!`);
 		}
 
 		const relativeExtensionHostIframeSrc = FileAccess.asBrowserUri(iframeModulePath);
diff --git a/src/vs/workbench/services/textMate/common/TMScopeRegistry.ts b/src/vs/workbench/services/textMate/common/TMScopeRegistry.ts
index ace5da0d59a..580cae23bdd 100644
--- a/src/vs/workbench/services/textMate/common/TMScopeRegistry.ts
+++ b/src/vs/workbench/services/textMate/common/TMScopeRegistry.ts
@@ -3,7 +3,6 @@
  *  Licensed under the MIT License. See License.txt in the project root for license information.
  *--------------------------------------------------------------------------------------------*/
 
-import * as resources from '../../../../base/common/resources.js';
 import { URI } from '../../../../base/common/uri.js';
 import { LanguageId, StandardTokenType } from '../../../../editor/common/encodedTokenAttributes.js';
 
@@ -40,16 +39,6 @@ export class TMScopeRegistry {
 	}
 
 	public register(def: IValidGrammarDefinition): void {
-		if (this._scopeNameToLanguageRegistration[def.scopeName]) {
-			const existingRegistration = this._scopeNameToLanguageRegistration[def.scopeName];
-			if (!resources.isEqual(existingRegistration.location, def.location)) {
-				console.warn(
-					`Overwriting grammar scope name to file mapping for scope ${def.scopeName}.\n` +
-					`Old grammar file: ${existingRegistration.location.toString()}.\n` +
-					`New grammar file: ${def.location.toString()}`
-				);
-			}
-		}
 		this._scopeNameToLanguageRegistration[def.scopeName] = def;
 	}
 
