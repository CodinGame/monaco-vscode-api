From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Lo=C3=AFc=20Mangeonjean?= <loic@coderpad.io>
Date: Mon, 11 Mar 2024 17:48:09 +0100
Subject: [PATCH] cleanup: remove non-ESM compatible code

---
 src/vs/base/common/worker/simpleWorker.ts      | 10 +---------
 .../common/services/editorSimpleWorker.ts      | 12 +-----------
 .../workbench/api/node/extensionHostProcess.ts | 18 ------------------
 3 files changed, 2 insertions(+), 38 deletions(-)

diff --git a/src/vs/base/common/worker/simpleWorker.ts b/src/vs/base/common/worker/simpleWorker.ts
index b04319bc9a3..db248563e3a 100644
--- a/src/vs/base/common/worker/simpleWorker.ts
+++ b/src/vs/base/common/worker/simpleWorker.ts
@@ -7,7 +7,6 @@ import { CharCode } from '../charCode.js';
 import { onUnexpectedError, transformErrorForSerialization } from '../errors.js';
 import { Emitter, Event } from '../event.js';
 import { Disposable, IDisposable } from '../lifecycle.js';
-import { AppResourcePath, FileAccess } from '../network.js';
 import { isWeb } from '../platform.js';
 import * as strings from '../strings.js';
 import { URI } from '../uri.js';
@@ -569,14 +568,7 @@ export class SimpleWorkerServer implements IWorkerServer {
 			(globalThis as any).require.config(loaderConfig);
 		}
 
-		const url = FileAccess.asBrowserUri(`${moduleId}.js` as AppResourcePath).toString(true);
-		return import(`${url}`).then((module: { create: IRequestHandlerFactory }) => {
-			this._requestHandler = module.create(this);
-
-			if (!this._requestHandler) {
-				throw new Error(`No RequestHandler!`);
-			}
-		});
+		return Promise.reject(new Error(`Unexpected usage`));
 	}
 }
 
diff --git a/src/vs/editor/common/services/editorSimpleWorker.ts b/src/vs/editor/common/services/editorSimpleWorker.ts
index 2432a8f657a..b0163997f9b 100644
--- a/src/vs/editor/common/services/editorSimpleWorker.ts
+++ b/src/vs/editor/common/services/editorSimpleWorker.ts
@@ -25,7 +25,6 @@ import { DetailedLineRangeMapping } from '../diff/rangeMapping.js';
 import { linesDiffComputers } from '../diff/linesDiffComputers.js';
 import { createProxyObject, getAllMethodNames } from '../../../base/common/objects.js';
 import { IDocumentDiffProviderOptions } from '../diff/documentDiffProvider.js';
-import { AppResourcePath, FileAccess } from '../../../base/common/network.js';
 import { BugIndicatingError } from '../../../base/common/errors.js';
 import { computeDefaultDocumentColors } from '../languages/defaultDocumentColorsComputer.js';
 import { FindSectionHeaderOptions, SectionHeader, findSectionHeaders } from './findSectionHeaders.js';
@@ -551,16 +550,7 @@ export class EditorSimpleWorker extends BaseEditorSimpleWorker {
 			return Promise.resolve(getAllMethodNames(this._foreignModule));
 		}
 
-		return new Promise<any>((resolve, reject) => {
-
-			const onModuleCallback = (foreignModule: { create: IForeignModuleFactory }) => {
-				this._foreignModule = foreignModule.create(ctx, createData);
-				resolve(getAllMethodNames(this._foreignModule));
-			};
-
-			const url = FileAccess.asBrowserUri(`${moduleId}.js` as AppResourcePath).toString(true);
-			import(`${url}`).then(onModuleCallback).catch(reject);
-		});
+		return Promise.reject(new Error(`Unexpected usage`));
 	}
 
 	// foreign method request
diff --git a/src/vs/workbench/api/node/extensionHostProcess.ts b/src/vs/workbench/api/node/extensionHostProcess.ts
index feaece95534..43e1cb46975 100644
--- a/src/vs/workbench/api/node/extensionHostProcess.ts
+++ b/src/vs/workbench/api/node/extensionHostProcess.ts
@@ -58,24 +58,6 @@ const args = minimist(process.argv.slice(2), {
 	]
 }) as ParsedExtHostArgs;
 
-// With Electron 2.x and node.js 8.x the "natives" module
-// can cause a native crash (see https://github.com/nodejs/node/issues/19891 and
-// https://github.com/electron/electron/issues/10905). To prevent this from
-// happening we essentially blocklist this module from getting loaded in any
-// extension by patching the node require() function.
-(function () {
-	const Module = require('module');
-	const originalLoad = Module._load;
-
-	Module._load = function (request: string) {
-		if (request === 'natives') {
-			throw new Error('Either the extension or an NPM dependency is using the [unsupported "natives" node module](https://go.microsoft.com/fwlink/?linkid=871887).');
-		}
-
-		return originalLoad.apply(this, arguments);
-	};
-})();
-
 // custom process.exit logic...
 const nativeExit: IExitFn = process.exit.bind(process);
 const nativeOn = process.on.bind(process);
