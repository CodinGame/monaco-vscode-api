From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Lo=C3=AFc=20Mangeonjean?= <loic@coderpad.io>
Date: Thu, 31 Oct 2024 12:20:04 +0100
Subject: [PATCH] fix: store activeChatController in another module

---
 .../terminal/terminalContribChatExports.ts      |  2 ++
 .../chat/browser/terminalChatAccessibleView.ts  |  3 ++-
 .../chat/browser/terminalChatActions.ts         | 17 +++++++++--------
 .../chat/browser/terminalChatController.ts      | 10 +++-------
 .../browser/terminalChatControllerHolder.ts     | 15 +++++++++++++++
 5 files changed, 31 insertions(+), 16 deletions(-)
 create mode 100644 src/vs/workbench/contrib/terminalContrib/chat/browser/terminalChatControllerHolder.ts

diff --git a/src/vs/workbench/contrib/terminal/terminalContribChatExports.ts b/src/vs/workbench/contrib/terminal/terminalContribChatExports.ts
index edd22bbfdc5..10e68ca6b62 100644
--- a/src/vs/workbench/contrib/terminal/terminalContribChatExports.ts
+++ b/src/vs/workbench/contrib/terminal/terminalContribChatExports.ts
@@ -3,8 +3,10 @@
  *  Licensed under the MIT License. See License.txt in the project root for license information.
  *--------------------------------------------------------------------------------------------*/
 
+
 // HACK: Export chat parts as it's only partially encapsulated within the contrib. This file only
 // exists because including it into terminalContribExports would cause a circular dependency on
 // startup
 export { TerminalChatContextKeys } from '../terminalContrib/chat/browser/terminalChat.js';
 export { TerminalChatController } from '../terminalContrib/chat/browser/terminalChatController.js';
+export { activeChatController } from '../terminalContrib/chat/browser/terminalChatControllerHolder.js';
diff --git a/src/vs/workbench/contrib/terminalContrib/chat/browser/terminalChatAccessibleView.ts b/src/vs/workbench/contrib/terminalContrib/chat/browser/terminalChatAccessibleView.ts
index 734ac7e62a6..8dc5b8133db 100644
--- a/src/vs/workbench/contrib/terminalContrib/chat/browser/terminalChatAccessibleView.ts
+++ b/src/vs/workbench/contrib/terminalContrib/chat/browser/terminalChatAccessibleView.ts
@@ -12,6 +12,7 @@ import { ServicesAccessor } from '../../../../../platform/instantiation/common/i
 import { IMenuService, MenuItemAction } from '../../../../../platform/actions/common/actions.js';
 import { MENU_TERMINAL_CHAT_WIDGET_STATUS, TerminalChatContextKeys } from './terminalChat.js';
 import { IAction } from '../../../../../base/common/actions.js';
+import { activeChatController } from './terminalChatControllerHolder.js';
 
 export class TerminalInlineChatAccessibleView implements IAccessibleViewImplementation {
 	readonly priority = 105;
@@ -23,7 +24,7 @@ export class TerminalInlineChatAccessibleView implements IAccessibleViewImplemen
 		const terminalService = accessor.get(ITerminalService);
 		const menuService = accessor.get(IMenuService);
 		const actions: IAction[] = [];
-		const contextKeyService = TerminalChatController.activeChatController?.scopedContextKeyService;
+		const contextKeyService = activeChatController?.scopedContextKeyService;
 		if (contextKeyService) {
 			const menuActions = menuService.getMenuActions(MENU_TERMINAL_CHAT_WIDGET_STATUS, contextKeyService);
 			for (const action of menuActions) {
diff --git a/src/vs/workbench/contrib/terminalContrib/chat/browser/terminalChatActions.ts b/src/vs/workbench/contrib/terminalContrib/chat/browser/terminalChatActions.ts
index 0d6fdd35361..4061f75526a 100644
--- a/src/vs/workbench/contrib/terminalContrib/chat/browser/terminalChatActions.ts
+++ b/src/vs/workbench/contrib/terminalContrib/chat/browser/terminalChatActions.ts
@@ -17,6 +17,7 @@ import { registerActiveXtermAction } from '../../../terminal/browser/terminalAct
 import { TerminalContextKeys } from '../../../terminal/common/terminalContextKey.js';
 import { MENU_TERMINAL_CHAT_WIDGET_STATUS, TerminalChatCommandId, TerminalChatContextKeys } from './terminalChat.js';
 import { TerminalChatController } from './terminalChatController.js';
+import { activeChatController } from './terminalChatControllerHolder.js';
 
 registerActiveXtermAction({
 	id: TerminalChatCommandId.Start,
@@ -38,7 +39,7 @@ registerActiveXtermAction({
 			return;
 		}
 
-		const contr = TerminalChatController.activeChatController || TerminalChatController.get(activeInstance);
+		const contr = activeChatController || TerminalChatController.get(activeInstance);
 
 		if (opts) {
 			opts = typeof opts === 'string' ? { query: opts } : opts;
@@ -80,7 +81,7 @@ registerActiveXtermAction({
 		if (isDetachedTerminalInstance(activeInstance)) {
 			return;
 		}
-		const contr = TerminalChatController.activeChatController || TerminalChatController.get(activeInstance);
+		const contr = activeChatController || TerminalChatController.get(activeInstance);
 		contr?.terminalChatWidget?.clear();
 	}
 });
@@ -112,7 +113,7 @@ registerActiveXtermAction({
 		if (isDetachedTerminalInstance(activeInstance)) {
 			return;
 		}
-		const contr = TerminalChatController.activeChatController || TerminalChatController.get(activeInstance);
+		const contr = activeChatController || TerminalChatController.get(activeInstance);
 		contr?.terminalChatWidget?.acceptCommand(true);
 	}
 });
@@ -143,7 +144,7 @@ registerActiveXtermAction({
 		if (isDetachedTerminalInstance(activeInstance)) {
 			return;
 		}
-		const contr = TerminalChatController.activeChatController || TerminalChatController.get(activeInstance);
+		const contr = activeChatController || TerminalChatController.get(activeInstance);
 		contr?.terminalChatWidget?.acceptCommand(true);
 	}
 });
@@ -176,7 +177,7 @@ registerActiveXtermAction({
 		if (isDetachedTerminalInstance(activeInstance)) {
 			return;
 		}
-		const contr = TerminalChatController.activeChatController || TerminalChatController.get(activeInstance);
+		const contr = activeChatController || TerminalChatController.get(activeInstance);
 		contr?.terminalChatWidget?.acceptCommand(false);
 	}
 });
@@ -207,7 +208,7 @@ registerActiveXtermAction({
 		if (isDetachedTerminalInstance(activeInstance)) {
 			return;
 		}
-		const contr = TerminalChatController.activeChatController || TerminalChatController.get(activeInstance);
+		const contr = activeChatController || TerminalChatController.get(activeInstance);
 		contr?.terminalChatWidget?.acceptCommand(false);
 	}
 });
@@ -236,7 +237,7 @@ registerActiveXtermAction({
 	run: async (_xterm, _accessor, activeInstance) => {
 		const chatService = _accessor.get(IChatService);
 		const chatWidgetService = _accessor.get(IChatWidgetService);
-		const contr = TerminalChatController.activeChatController;
+		const contr = activeChatController;
 		const model = contr?.terminalChatWidget?.inlineChatWidget.chatWidget.viewModel?.model;
 		if (!model) {
 			return;
@@ -275,7 +276,7 @@ registerActiveXtermAction({
 		if (isDetachedTerminalInstance(activeInstance)) {
 			return;
 		}
-		const contr = TerminalChatController.activeChatController || TerminalChatController.get(activeInstance);
+		const contr = activeChatController || TerminalChatController.get(activeInstance);
 		contr?.viewInChat();
 	}
 });
diff --git a/src/vs/workbench/contrib/terminalContrib/chat/browser/terminalChatController.ts b/src/vs/workbench/contrib/terminalContrib/chat/browser/terminalChatController.ts
index 7e67399b2d6..278bf8152cf 100644
--- a/src/vs/workbench/contrib/terminalContrib/chat/browser/terminalChatController.ts
+++ b/src/vs/workbench/contrib/terminalContrib/chat/browser/terminalChatController.ts
@@ -16,6 +16,7 @@ import { TerminalChatWidget } from './terminalChatWidget.js';
 import { IViewsService } from '../../../../services/views/common/viewsService.js';
 import type { ITerminalContributionContext } from '../../../terminal/browser/terminalExtensions.js';
 import type { IChatModel } from '../../../chat/common/chatModel.js';
+import { setActiveChatController } from './terminalChatControllerHolder.js';
 
 export class TerminalChatController extends Disposable implements ITerminalContribution {
 	static readonly ID = 'terminal.chat';
@@ -23,11 +24,6 @@ export class TerminalChatController extends Disposable implements ITerminalContr
 	static get(instance: ITerminalInstance): TerminalChatController | null {
 		return instance.getContribution<TerminalChatController>(TerminalChatController.ID);
 	}
-	/**
-	 * The controller for the currently focused chat widget. This is used to track action context since 'active terminals'
-	 * are only tracked for non-detached terminal instanecs.
-	 */
-	static activeChatController?: TerminalChatController;
 
 	/**
 	 * The chat widget for the controller, this is lazy as we don't want to instantiate it until
@@ -78,13 +74,13 @@ export class TerminalChatController extends Disposable implements ITerminalContr
 		this._terminalChatWidget = new Lazy(() => {
 			const chatWidget = this._register(this._instantiationService.createInstance(TerminalChatWidget, this._ctx.instance.domElement!, this._ctx.instance, xterm));
 			this._register(chatWidget.focusTracker.onDidFocus(() => {
-				TerminalChatController.activeChatController = this;
+				setActiveChatController(this);
 				if (!isDetachedTerminalInstance(this._ctx.instance)) {
 					this._terminalService.setActiveInstance(this._ctx.instance);
 				}
 			}));
 			this._register(chatWidget.focusTracker.onDidBlur(() => {
-				TerminalChatController.activeChatController = undefined;
+				setActiveChatController(undefined);
 				this._ctx.instance.resetScrollbarVisibility();
 			}));
 			if (!this._ctx.instance.domElement) {
diff --git a/src/vs/workbench/contrib/terminalContrib/chat/browser/terminalChatControllerHolder.ts b/src/vs/workbench/contrib/terminalContrib/chat/browser/terminalChatControllerHolder.ts
new file mode 100644
index 00000000000..bb67971614b
--- /dev/null
+++ b/src/vs/workbench/contrib/terminalContrib/chat/browser/terminalChatControllerHolder.ts
@@ -0,0 +1,15 @@
+/*---------------------------------------------------------------------------------------------
+ *  Copyright (c) Microsoft Corporation. All rights reserved.
+ *  Licensed under the MIT License. See License.txt in the project root for license information.
+ *--------------------------------------------------------------------------------------------*/
+import { TerminalChatController } from './terminalChatController.js';
+
+/**
+ * The controller for the currently focused chat widget. This is used to track action context since 'active terminals'
+ * are only tracked for non-detached terminal instanecs.
+ */
+export let activeChatController: TerminalChatController | undefined;
+
+export function setActiveChatController(_activeChatController: TerminalChatController | undefined) {
+	activeChatController = _activeChatController;
+}
