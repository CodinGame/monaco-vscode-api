From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Lo=C3=AFc=20Mangeonjean?= <loic@coderpad.io>
Date: Mon, 29 Apr 2024 17:16:21 +0200
Subject: [PATCH] refactor: split code to be able to import only required part

---
 .../common/extensionsScannerService.ts        | 294 +++++++++---------
 src/vs/platform/files/common/fileService.ts   | 111 ++++---
 .../localization/browser/localeService.ts     |  38 ++-
 3 files changed, 236 insertions(+), 207 deletions(-)

diff --git a/src/vs/platform/extensionManagement/common/extensionsScannerService.ts b/src/vs/platform/extensionManagement/common/extensionsScannerService.ts
index 8697dcb34d4..5d7426ab0db 100644
--- a/src/vs/platform/extensionManagement/common/extensionsScannerService.ts
+++ b/src/vs/platform/extensionManagement/common/extensionsScannerService.ts
@@ -553,26 +553,172 @@ export class ExtensionScannerInput {
 	}
 }
 
-type NlsConfiguration = {
+export type NlsConfiguration = {
 	language: string | undefined;
 	pseudo: boolean;
 	devMode: boolean;
 	translations: Translations;
 };
 
-class ExtensionsScanner extends Disposable {
+export class ExtensionManifestTranslator extends Disposable {
+	constructor(
+		@IFileService protected readonly fileService: IFileService,
+		@ILogService protected readonly logService: ILogService
+	) {
+		super();
+	}
+
+	private async getLocalizedMessages(extensionLocation: URI, extensionManifest: IExtensionManifest, nlsConfiguration: NlsConfiguration): Promise<LocalizedMessages | undefined> {
+		const defaultPackageNLS = joinPath(extensionLocation, 'package.nls.json');
+		const reportErrors = (localized: URI | null, errors: ParseError[]): void => {
+			errors.forEach((error) => {
+				this.logService.error(this.formatMessage(extensionLocation, localize('jsonsParseReportErrors', "Failed to parse {0}: {1}.", localized?.path, getParseErrorMessage(error.error))));
+			});
+		};
+		const reportInvalidFormat = (localized: URI | null): void => {
+			this.logService.error(this.formatMessage(extensionLocation, localize('jsonInvalidFormat', "Invalid format {0}: JSON object expected.", localized?.path)));
+		};
+
+		const translationId = `${extensionManifest.publisher}.${extensionManifest.name}`;
+		const translationPath = nlsConfiguration.translations[translationId];
+
+		if (translationPath) {
+			try {
+				const translationResource = URI.parse(translationPath);
+				const content = (await this.fileService.readFile(translationResource)).value.toString();
+				const errors: ParseError[] = [];
+				const translationBundle: TranslationBundle = parse(content, errors);
+				if (errors.length > 0) {
+					reportErrors(translationResource, errors);
+					return { values: undefined, default: defaultPackageNLS };
+				} else if (getNodeType(translationBundle) !== 'object') {
+					reportInvalidFormat(translationResource);
+					return { values: undefined, default: defaultPackageNLS };
+				} else {
+					const values = translationBundle.contents ? translationBundle.contents.package : undefined;
+					return { values: values, default: defaultPackageNLS };
+				}
+			} catch (error) {
+				return { values: undefined, default: defaultPackageNLS };
+			}
+		} else {
+			const exists = await this.fileService.exists(defaultPackageNLS);
+			if (!exists) {
+				return undefined;
+			}
+			let messageBundle;
+			try {
+				messageBundle = await this.findMessageBundles(extensionLocation, nlsConfiguration);
+			} catch (error) {
+				return undefined;
+			}
+			if (!messageBundle.localized) {
+				return { values: undefined, default: messageBundle.original };
+			}
+			try {
+				const messageBundleContent = (await this.fileService.readFile(messageBundle.localized)).value.toString();
+				const errors: ParseError[] = [];
+				const messages: MessageBag = parse(messageBundleContent, errors);
+				if (errors.length > 0) {
+					reportErrors(messageBundle.localized, errors);
+					return { values: undefined, default: messageBundle.original };
+				} else if (getNodeType(messages) !== 'object') {
+					reportInvalidFormat(messageBundle.localized);
+					return { values: undefined, default: messageBundle.original };
+				}
+				return { values: messages, default: messageBundle.original };
+			} catch (error) {
+				return { values: undefined, default: messageBundle.original };
+			}
+		}
+	}
+
+	public async translateManifest(extensionLocation: URI, extensionManifest: IExtensionManifest, nlsConfiguration: NlsConfiguration): Promise<IExtensionManifest> {
+		const localizedMessages = await this.getLocalizedMessages(extensionLocation, extensionManifest, nlsConfiguration);
+		if (localizedMessages) {
+			try {
+				const errors: ParseError[] = [];
+				// resolveOriginalMessageBundle returns null if localizedMessages.default === undefined;
+				const defaults = await this.resolveOriginalMessageBundle(localizedMessages.default, errors);
+				if (errors.length > 0) {
+					errors.forEach((error) => {
+						this.logService.error(this.formatMessage(extensionLocation, localize('jsonsParseReportErrors', "Failed to parse {0}: {1}.", localizedMessages.default?.path, getParseErrorMessage(error.error))));
+					});
+					return extensionManifest;
+				} else if (getNodeType(localizedMessages) !== 'object') {
+					this.logService.error(this.formatMessage(extensionLocation, localize('jsonInvalidFormat', "Invalid format {0}: JSON object expected.", localizedMessages.default?.path)));
+					return extensionManifest;
+				}
+				const localized = localizedMessages.values || Object.create(null);
+				return localizeManifest(this.logService, extensionManifest, localized, defaults);
+			} catch (error) {
+				/*Ignore Error*/
+			}
+		}
+		return extensionManifest;
+	}
+
+	/**
+	 * Parses original message bundle, returns null if the original message bundle is null.
+	 */
+	private async resolveOriginalMessageBundle(originalMessageBundle: URI | null, errors: ParseError[]): Promise<{ [key: string]: string } | undefined> {
+		if (originalMessageBundle) {
+			try {
+				const originalBundleContent = (await this.fileService.readFile(originalMessageBundle)).value.toString();
+				return parse(originalBundleContent, errors);
+			} catch (error) {
+				/* Ignore Error */
+			}
+		}
+		return;
+	}
+
+	/**
+	 * Finds localized message bundle and the original (unlocalized) one.
+	 * If the localized file is not present, returns null for the original and marks original as localized.
+	 */
+	private findMessageBundles(extensionLocation: URI, nlsConfiguration: NlsConfiguration): Promise<{ localized: URI; original: URI | null }> {
+		return new Promise<{ localized: URI; original: URI | null }>((c, e) => {
+			const loop = (locale: string): void => {
+				const toCheck = joinPath(extensionLocation, `package.nls.${locale}.json`);
+				this.fileService.exists(toCheck).then(exists => {
+					if (exists) {
+						c({ localized: toCheck, original: joinPath(extensionLocation, 'package.nls.json') });
+					}
+					const index = locale.lastIndexOf('-');
+					if (index === -1) {
+						c({ localized: joinPath(extensionLocation, 'package.nls.json'), original: null });
+					} else {
+						locale = locale.substring(0, index);
+						loop(locale);
+					}
+				});
+			};
+			if (nlsConfiguration.devMode || nlsConfiguration.pseudo || !nlsConfiguration.language) {
+				return c({ localized: joinPath(extensionLocation, 'package.nls.json'), original: null });
+			}
+			loop(nlsConfiguration.language);
+		});
+	}
+
+	protected formatMessage(extensionLocation: URI, message: string): string {
+		return `[${extensionLocation.path}]: ${message}`;
+	}
+}
+
+class ExtensionsScanner extends ExtensionManifestTranslator {
 
 	private readonly extensionsEnabledWithApiProposalVersion: string[];
 
 	constructor(
 		@IExtensionsProfileScannerService protected readonly extensionsProfileScannerService: IExtensionsProfileScannerService,
 		@IUriIdentityService protected readonly uriIdentityService: IUriIdentityService,
-		@IFileService protected readonly fileService: IFileService,
+		@IFileService fileService: IFileService,
 		@IProductService productService: IProductService,
 		@IEnvironmentService private readonly environmentService: IEnvironmentService,
-		@ILogService protected readonly logService: ILogService
+		@ILogService logService: ILogService
 	) {
-		super();
+		super(fileService, logService);
 		this.extensionsEnabledWithApiProposalVersion = productService.extensionsEnabledWithApiProposalVersion?.map(id => id.toLowerCase()) ?? [];
 	}
 
@@ -768,144 +914,6 @@ class ExtensionsScanner extends Disposable {
 		}
 		return manifest;
 	}
-
-	private async translateManifest(extensionLocation: URI, extensionManifest: IExtensionManifest, nlsConfiguration: NlsConfiguration): Promise<IExtensionManifest> {
-		const localizedMessages = await this.getLocalizedMessages(extensionLocation, extensionManifest, nlsConfiguration);
-		if (localizedMessages) {
-			try {
-				const errors: ParseError[] = [];
-				// resolveOriginalMessageBundle returns null if localizedMessages.default === undefined;
-				const defaults = await this.resolveOriginalMessageBundle(localizedMessages.default, errors);
-				if (errors.length > 0) {
-					errors.forEach((error) => {
-						this.logService.error(this.formatMessage(extensionLocation, localize('jsonsParseReportErrors', "Failed to parse {0}: {1}.", localizedMessages.default?.path, getParseErrorMessage(error.error))));
-					});
-					return extensionManifest;
-				} else if (getNodeType(localizedMessages) !== 'object') {
-					this.logService.error(this.formatMessage(extensionLocation, localize('jsonInvalidFormat', "Invalid format {0}: JSON object expected.", localizedMessages.default?.path)));
-					return extensionManifest;
-				}
-				const localized = localizedMessages.values || Object.create(null);
-				return localizeManifest(this.logService, extensionManifest, localized, defaults);
-			} catch (error) {
-				/*Ignore Error*/
-			}
-		}
-		return extensionManifest;
-	}
-
-	private async getLocalizedMessages(extensionLocation: URI, extensionManifest: IExtensionManifest, nlsConfiguration: NlsConfiguration): Promise<LocalizedMessages | undefined> {
-		const defaultPackageNLS = joinPath(extensionLocation, 'package.nls.json');
-		const reportErrors = (localized: URI | null, errors: ParseError[]): void => {
-			errors.forEach((error) => {
-				this.logService.error(this.formatMessage(extensionLocation, localize('jsonsParseReportErrors', "Failed to parse {0}: {1}.", localized?.path, getParseErrorMessage(error.error))));
-			});
-		};
-		const reportInvalidFormat = (localized: URI | null): void => {
-			this.logService.error(this.formatMessage(extensionLocation, localize('jsonInvalidFormat', "Invalid format {0}: JSON object expected.", localized?.path)));
-		};
-
-		const translationId = `${extensionManifest.publisher}.${extensionManifest.name}`;
-		const translationPath = nlsConfiguration.translations[translationId];
-
-		if (translationPath) {
-			try {
-				const translationResource = URI.file(translationPath);
-				const content = (await this.fileService.readFile(translationResource)).value.toString();
-				const errors: ParseError[] = [];
-				const translationBundle: TranslationBundle = parse(content, errors);
-				if (errors.length > 0) {
-					reportErrors(translationResource, errors);
-					return { values: undefined, default: defaultPackageNLS };
-				} else if (getNodeType(translationBundle) !== 'object') {
-					reportInvalidFormat(translationResource);
-					return { values: undefined, default: defaultPackageNLS };
-				} else {
-					const values = translationBundle.contents ? translationBundle.contents.package : undefined;
-					return { values: values, default: defaultPackageNLS };
-				}
-			} catch (error) {
-				return { values: undefined, default: defaultPackageNLS };
-			}
-		} else {
-			const exists = await this.fileService.exists(defaultPackageNLS);
-			if (!exists) {
-				return undefined;
-			}
-			let messageBundle;
-			try {
-				messageBundle = await this.findMessageBundles(extensionLocation, nlsConfiguration);
-			} catch (error) {
-				return undefined;
-			}
-			if (!messageBundle.localized) {
-				return { values: undefined, default: messageBundle.original };
-			}
-			try {
-				const messageBundleContent = (await this.fileService.readFile(messageBundle.localized)).value.toString();
-				const errors: ParseError[] = [];
-				const messages: MessageBag = parse(messageBundleContent, errors);
-				if (errors.length > 0) {
-					reportErrors(messageBundle.localized, errors);
-					return { values: undefined, default: messageBundle.original };
-				} else if (getNodeType(messages) !== 'object') {
-					reportInvalidFormat(messageBundle.localized);
-					return { values: undefined, default: messageBundle.original };
-				}
-				return { values: messages, default: messageBundle.original };
-			} catch (error) {
-				return { values: undefined, default: messageBundle.original };
-			}
-		}
-	}
-
-	/**
-	 * Parses original message bundle, returns null if the original message bundle is null.
-	 */
-	private async resolveOriginalMessageBundle(originalMessageBundle: URI | null, errors: ParseError[]): Promise<{ [key: string]: string } | undefined> {
-		if (originalMessageBundle) {
-			try {
-				const originalBundleContent = (await this.fileService.readFile(originalMessageBundle)).value.toString();
-				return parse(originalBundleContent, errors);
-			} catch (error) {
-				/* Ignore Error */
-			}
-		}
-		return;
-	}
-
-	/**
-	 * Finds localized message bundle and the original (unlocalized) one.
-	 * If the localized file is not present, returns null for the original and marks original as localized.
-	 */
-	private findMessageBundles(extensionLocation: URI, nlsConfiguration: NlsConfiguration): Promise<{ localized: URI; original: URI | null }> {
-		return new Promise<{ localized: URI; original: URI | null }>((c, e) => {
-			const loop = (locale: string): void => {
-				const toCheck = joinPath(extensionLocation, `package.nls.${locale}.json`);
-				this.fileService.exists(toCheck).then(exists => {
-					if (exists) {
-						c({ localized: toCheck, original: joinPath(extensionLocation, 'package.nls.json') });
-					}
-					const index = locale.lastIndexOf('-');
-					if (index === -1) {
-						c({ localized: joinPath(extensionLocation, 'package.nls.json'), original: null });
-					} else {
-						locale = locale.substring(0, index);
-						loop(locale);
-					}
-				});
-			};
-			if (nlsConfiguration.devMode || nlsConfiguration.pseudo || !nlsConfiguration.language) {
-				return c({ localized: joinPath(extensionLocation, 'package.nls.json'), original: null });
-			}
-			loop(nlsConfiguration.language);
-		});
-	}
-
-	private formatMessage(extensionLocation: URI, message: string): string {
-		return `[${extensionLocation.path}]: ${message}`;
-	}
-
 }
 
 interface IExtensionCacheData {
diff --git a/src/vs/platform/files/common/fileService.ts b/src/vs/platform/files/common/fileService.ts
index a5f6dc5023a..313c0ef2b26 100644
--- a/src/vs/platform/files/common/fileService.ts
+++ b/src/vs/platform/files/common/fileService.ts
@@ -23,6 +23,64 @@ import { readFileIntoStream } from './io.js';
 import { ILogService } from '../../log/common/log.js';
 import { ErrorNoTelemetry } from '../../../base/common/errors.js';
 
+
+function resourceForError(resource: URI): string {
+	if (resource.scheme === Schemas.file) {
+		return resource.fsPath;
+	}
+
+	return resource.toString(true);
+}
+
+export async function mkdirp(providerExtUri: IExtUri, provider: IFileSystemProvider, directory: URI): Promise<void> {
+	const directoriesToCreate: string[] = [];
+
+	// mkdir until we reach root
+	while (!providerExtUri.isEqual(directory, providerExtUri.dirname(directory))) {
+		try {
+			const stat = await provider.stat(directory);
+			if ((stat.type & FileType.Directory) === 0) {
+				throw new Error(localize('mkdirExistsError', "Unable to create folder '{0}' that already exists but is not a directory", resourceForError(directory)));
+			}
+
+			break; // we have hit a directory that exists -> good
+		} catch (error) {
+
+			// Bubble up any other error that is not file not found
+			if (toFileSystemProviderErrorCode(error) !== FileSystemProviderErrorCode.FileNotFound) {
+				throw error;
+			}
+
+			// Upon error, remember directories that need to be created
+			directoriesToCreate.push(providerExtUri.basename(directory));
+
+			// Continue up
+			directory = providerExtUri.dirname(directory);
+		}
+	}
+
+	// Create directories as needed
+	for (let i = directoriesToCreate.length - 1; i >= 0; i--) {
+		directory = providerExtUri.joinPath(directory, directoriesToCreate[i]);
+
+		try {
+			await provider.mkdir(directory);
+		} catch (error) {
+			if (toFileSystemProviderErrorCode(error) !== FileSystemProviderErrorCode.FileExists) {
+				// For mkdirp() we tolerate that the mkdir() call fails
+				// in case the folder already exists. This follows node.js
+				// own implementation of fs.mkdir({ recursive: true }) and
+				// reduces the chances of race conditions leading to errors
+				// if multiple calls try to create the same folders
+				// As such, we only throw an error here if it is other than
+				// the fact that the file already exists.
+				// (see also https://github.com/microsoft/vscode/issues/89834)
+				throw error;
+			}
+		}
+	}
+}
+
 export class FileService extends Disposable implements IFileService {
 
 	declare readonly _serviceBrand: undefined;
@@ -975,53 +1033,8 @@ export class FileService extends Disposable implements IFileService {
 	}
 
 	private async mkdirp(provider: IFileSystemProvider, directory: URI): Promise<void> {
-		const directoriesToCreate: string[] = [];
-
-		// mkdir until we reach root
 		const { providerExtUri } = this.getExtUri(provider);
-		while (!providerExtUri.isEqual(directory, providerExtUri.dirname(directory))) {
-			try {
-				const stat = await provider.stat(directory);
-				if ((stat.type & FileType.Directory) === 0) {
-					throw new Error(localize('mkdirExistsError', "Unable to create folder '{0}' that already exists but is not a directory", this.resourceForError(directory)));
-				}
-
-				break; // we have hit a directory that exists -> good
-			} catch (error) {
-
-				// Bubble up any other error that is not file not found
-				if (toFileSystemProviderErrorCode(error) !== FileSystemProviderErrorCode.FileNotFound) {
-					throw error;
-				}
-
-				// Upon error, remember directories that need to be created
-				directoriesToCreate.push(providerExtUri.basename(directory));
-
-				// Continue up
-				directory = providerExtUri.dirname(directory);
-			}
-		}
-
-		// Create directories as needed
-		for (let i = directoriesToCreate.length - 1; i >= 0; i--) {
-			directory = providerExtUri.joinPath(directory, directoriesToCreate[i]);
-
-			try {
-				await provider.mkdir(directory);
-			} catch (error) {
-				if (toFileSystemProviderErrorCode(error) !== FileSystemProviderErrorCode.FileExists) {
-					// For mkdirp() we tolerate that the mkdir() call fails
-					// in case the folder already exists. This follows node.js
-					// own implementation of fs.mkdir({ recursive: true }) and
-					// reduces the chances of race conditions leading to errors
-					// if multiple calls try to create the same folders
-					// As such, we only throw an error here if it is other than
-					// the fact that the file already exists.
-					// (see also https://github.com/microsoft/vscode/issues/89834)
-					throw error;
-				}
-			}
-		}
+		return mkdirp(providerExtUri, provider, directory);
 	}
 
 	async canDelete(resource: URI, options?: Partial<IFileDeleteOptions>): Promise<Error | true> {
@@ -1474,11 +1487,7 @@ export class FileService extends Disposable implements IFileService {
 	}
 
 	private resourceForError(resource: URI): string {
-		if (resource.scheme === Schemas.file) {
-			return resource.fsPath;
-		}
-
-		return resource.toString(true);
+		return resourceForError(resource);
 	}
 
 	//#endregion
diff --git a/src/vs/workbench/services/localization/browser/localeService.ts b/src/vs/workbench/services/localization/browser/localeService.ts
index 63082ed6952..a107a2f8695 100644
--- a/src/vs/workbench/services/localization/browser/localeService.ts
+++ b/src/vs/workbench/services/localization/browser/localeService.ts
@@ -51,8 +51,7 @@ const localeStorage = new class LocaleStorage {
 	}
 };
 
-export class WebLocaleService implements ILocaleService {
-
+export abstract class AbstractLocaleService implements ILocaleService {
 	declare readonly _serviceBrand: undefined;
 
 	constructor(
@@ -61,20 +60,15 @@ export class WebLocaleService implements ILocaleService {
 		@IProductService private readonly productService: IProductService
 	) { }
 
+	abstract storeLocale(locale: string | undefined, extensionId: string | undefined): Promise<void>;
+	abstract clearLocale(): Promise<void>;
+
 	async setLocale(languagePackItem: ILanguagePackItem, _skipDialog = false): Promise<void> {
 		const locale = languagePackItem.id;
 		if (locale === Language.value() || (!locale && Language.value() === navigator.language.toLowerCase())) {
 			return;
 		}
-		if (locale) {
-			localeStorage.setLocale(locale);
-			if (languagePackItem.extensionId) {
-				localeStorage.setExtensionId(languagePackItem.extensionId);
-			}
-		} else {
-			localeStorage.clearLocale();
-			localeStorage.clearExtensionId();
-		}
+		this.storeLocale(locale, languagePackItem.extensionId);
 
 		const restartDialog = await this.dialogService.confirm({
 			type: 'info',
@@ -89,8 +83,7 @@ export class WebLocaleService implements ILocaleService {
 	}
 
 	async clearLocalePreference(): Promise<void> {
-		localeStorage.clearLocale();
-		localeStorage.clearExtensionId();
+		this.clearLocale();
 
 		if (Language.value() === navigator.language.toLowerCase()) {
 			return;
@@ -109,6 +102,25 @@ export class WebLocaleService implements ILocaleService {
 	}
 }
 
+export class WebLocaleService extends AbstractLocaleService {
+	override async storeLocale(locale: string | undefined, extensionId: string | undefined): Promise<void> {
+		if (locale) {
+			localeStorage.setLocale(locale);
+			if (extensionId) {
+				localeStorage.setExtensionId(extensionId);
+			}
+		} else {
+			localeStorage.clearLocale();
+			localeStorage.clearExtensionId();
+		}
+	}
+
+	override async clearLocale(): Promise<void> {
+		localeStorage.clearLocale();
+		localeStorage.clearExtensionId();
+	}
+}
+
 export class WebActiveLanguagePackService implements IActiveLanguagePackService {
 	_serviceBrand: undefined;
 
