From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Lo=C3=AFc=20Mangeonjean?= <loic@coderpad.io>
Date: Tue, 16 Apr 2024 15:13:41 +0200
Subject: [PATCH] refactor: split service and extension point

---
 .../api/browser/mainThreadStatusBar.ts        |   2 +-
 .../api/browser/statusBarExtensionPoint.ts    | 160 +-----------------
 .../workbench/api/browser/statusBarService.ts | 159 +++++++++++++++++
 3 files changed, 164 insertions(+), 157 deletions(-)
 create mode 100644 src/vs/workbench/api/browser/statusBarService.ts

diff --git a/src/vs/workbench/api/browser/mainThreadStatusBar.ts b/src/vs/workbench/api/browser/mainThreadStatusBar.ts
index 4988e519f39..d57f2ada2ba 100644
--- a/src/vs/workbench/api/browser/mainThreadStatusBar.ts
+++ b/src/vs/workbench/api/browser/mainThreadStatusBar.ts
@@ -10,8 +10,8 @@ import { DisposableStore, toDisposable } from '../../../base/common/lifecycle.js
 import { Command } from '../../../editor/common/languages.js';
 import { IAccessibilityInformation } from '../../../platform/accessibility/common/accessibility.js';
 import { IMarkdownString } from '../../../base/common/htmlContent.js';
-import { IExtensionStatusBarItemService, StatusBarUpdateKind } from './statusBarExtensionPoint.js';
 import { IStatusbarEntry, StatusbarAlignment } from '../../services/statusbar/browser/statusbar.js';
+import { IExtensionStatusBarItemService, StatusBarUpdateKind } from './statusBarService.js';
 
 @extHostNamedCustomer(MainContext.MainThreadStatusBar)
 export class MainThreadStatusBar implements MainThreadStatusBarShape {
diff --git a/src/vs/workbench/api/browser/statusBarExtensionPoint.ts b/src/vs/workbench/api/browser/statusBarExtensionPoint.ts
index 9e5c057b1fe..695a7c69617 100644
--- a/src/vs/workbench/api/browser/statusBarExtensionPoint.ts
+++ b/src/vs/workbench/api/browser/statusBarExtensionPoint.ts
@@ -4,171 +4,19 @@
  *--------------------------------------------------------------------------------------------*/
 
 import { IJSONSchema } from '../../../base/common/jsonSchema.js';
-import { DisposableStore, IDisposable, toDisposable } from '../../../base/common/lifecycle.js';
+import { DisposableStore, toDisposable } from '../../../base/common/lifecycle.js';
 import { localize } from '../../../nls.js';
-import { createDecorator, IInstantiationService } from '../../../platform/instantiation/common/instantiation.js';
+import { IInstantiationService } from '../../../platform/instantiation/common/instantiation.js';
 import { isProposedApiEnabled } from '../../services/extensions/common/extensions.js';
 import { ExtensionsRegistry } from '../../services/extensions/common/extensionsRegistry.js';
-import { IStatusbarService, StatusbarAlignment as MainThreadStatusBarAlignment, IStatusbarEntryAccessor, IStatusbarEntry, StatusbarAlignment, IStatusbarEntryPriority, StatusbarEntryKind } from '../../services/statusbar/browser/statusbar.js';
-import { ThemeColor } from '../../../base/common/themables.js';
-import { Command } from '../../../editor/common/languages.js';
 import { IAccessibilityInformation, isAccessibilityInformation } from '../../../platform/accessibility/common/accessibility.js';
-import { IMarkdownString } from '../../../base/common/htmlContent.js';
-import { getCodiconAriaLabel } from '../../../base/common/iconLabels.js';
-import { hash } from '../../../base/common/hash.js';
-import { Event, Emitter } from '../../../base/common/event.js';
-import { InstantiationType, registerSingleton } from '../../../platform/instantiation/common/extensions.js';
 import { Iterable } from '../../../base/common/iterator.js';
 import { ExtensionIdentifier } from '../../../platform/extensions/common/extensions.js';
 import { asStatusBarItemIdentifier } from '../common/extHostTypes.js';
-import { STATUS_BAR_ERROR_ITEM_BACKGROUND, STATUS_BAR_WARNING_ITEM_BACKGROUND } from '../../common/theme.js';
-import { IWorkbenchContribution, registerWorkbenchContribution2 } from '../../common/contributions.js';
+import { IWorkbenchContribution, registerWorkbenchContribution2, WorkbenchPhase } from '../../common/contributions.js';
+import { IExtensionStatusBarItemService, StatusBarUpdateKind } from './statusBarService.js';
 
 
-// --- service
-
-export const IExtensionStatusBarItemService = createDecorator<IExtensionStatusBarItemService>('IExtensionStatusBarItemService');
-
-export interface IExtensionStatusBarItemChangeEvent {
-	readonly added?: ExtensionStatusBarEntry;
-	readonly removed?: string;
-}
-
-export type ExtensionStatusBarEntry = [string, {
-	entry: IStatusbarEntry;
-	alignment: MainThreadStatusBarAlignment;
-	priority: number;
-}];
-
-export const enum StatusBarUpdateKind {
-	DidDefine,
-	DidUpdate
-}
-
-export interface IExtensionStatusBarItemService {
-	readonly _serviceBrand: undefined;
-
-	onDidChange: Event<IExtensionStatusBarItemChangeEvent>;
-
-	setOrUpdateEntry(id: string, statusId: string, extensionId: string | undefined, name: string, text: string, tooltip: IMarkdownString | string | undefined, command: Command | undefined, color: string | ThemeColor | undefined, backgroundColor: ThemeColor | undefined, alignLeft: boolean, priority: number | undefined, accessibilityInformation: IAccessibilityInformation | undefined): StatusBarUpdateKind;
-
-	unsetEntry(id: string): void;
-
-	getEntries(): Iterable<ExtensionStatusBarEntry>;
-}
-
-
-export class ExtensionStatusBarItemService implements IExtensionStatusBarItemService {
-
-	declare readonly _serviceBrand: undefined;
-
-	private readonly _entries: Map<string, { accessor: IStatusbarEntryAccessor; entry: IStatusbarEntry; alignment: MainThreadStatusBarAlignment; priority: number; disposable: IDisposable }> = new Map();
-
-	private readonly _onDidChange = new Emitter<IExtensionStatusBarItemChangeEvent>();
-	readonly onDidChange: Event<IExtensionStatusBarItemChangeEvent> = this._onDidChange.event;
-
-	constructor(@IStatusbarService private readonly _statusbarService: IStatusbarService) { }
-
-	dispose(): void {
-		this._entries.forEach(entry => entry.accessor.dispose());
-		this._entries.clear();
-		this._onDidChange.dispose();
-	}
-
-	setOrUpdateEntry(entryId: string,
-		id: string, extensionId: string | undefined, name: string, text: string, tooltip: IMarkdownString | string | undefined,
-		command: Command | undefined, color: string | ThemeColor | undefined, backgroundColor: ThemeColor | undefined,
-		alignLeft: boolean, priority: number | undefined, accessibilityInformation: IAccessibilityInformation | undefined
-	): StatusBarUpdateKind {
-		// if there are icons in the text use the tooltip for the aria label
-		let ariaLabel: string;
-		let role: string | undefined = undefined;
-		if (accessibilityInformation) {
-			ariaLabel = accessibilityInformation.label;
-			role = accessibilityInformation.role;
-		} else {
-			ariaLabel = getCodiconAriaLabel(text);
-			if (tooltip) {
-				const tooltipString = typeof tooltip === 'string' ? tooltip : tooltip.value;
-				ariaLabel += `, ${tooltipString}`;
-			}
-		}
-		let kind: StatusbarEntryKind | undefined = undefined;
-		switch (backgroundColor?.id) {
-			case STATUS_BAR_ERROR_ITEM_BACKGROUND:
-			case STATUS_BAR_WARNING_ITEM_BACKGROUND:
-				// override well known colors that map to status entry kinds to support associated themable hover colors
-				kind = backgroundColor.id === STATUS_BAR_ERROR_ITEM_BACKGROUND ? 'error' : 'warning';
-				color = undefined;
-				backgroundColor = undefined;
-		}
-		const entry: IStatusbarEntry = { name, text, tooltip, command, color, backgroundColor, ariaLabel, role, kind };
-
-		if (typeof priority === 'undefined') {
-			priority = 0;
-		}
-
-		let alignment = alignLeft ? StatusbarAlignment.LEFT : StatusbarAlignment.RIGHT;
-
-		// alignment and priority can only be set once (at creation time)
-		const existingEntry = this._entries.get(entryId);
-		if (existingEntry) {
-			alignment = existingEntry.alignment;
-			priority = existingEntry.priority;
-		}
-
-		// Create new entry if not existing
-		if (!existingEntry) {
-			let entryPriority: number | IStatusbarEntryPriority;
-			if (typeof extensionId === 'string') {
-				// We cannot enforce unique priorities across all extensions, so we
-				// use the extension identifier as a secondary sort key to reduce
-				// the likelyhood of collisions.
-				// See https://github.com/microsoft/vscode/issues/177835
-				// See https://github.com/microsoft/vscode/issues/123827
-				entryPriority = { primary: priority, secondary: hash(extensionId) };
-			} else {
-				entryPriority = priority;
-			}
-
-			const accessor = this._statusbarService.addEntry(entry, id, alignment, entryPriority);
-			this._entries.set(entryId, {
-				accessor,
-				entry,
-				alignment,
-				priority,
-				disposable: toDisposable(() => {
-					accessor.dispose();
-					this._entries.delete(entryId);
-					this._onDidChange.fire({ removed: entryId });
-				})
-			});
-
-			this._onDidChange.fire({ added: [entryId, { entry, alignment, priority }] });
-			return StatusBarUpdateKind.DidDefine;
-
-		} else {
-			// Otherwise update
-			existingEntry.accessor.update(entry);
-			existingEntry.entry = entry;
-			return StatusBarUpdateKind.DidUpdate;
-		}
-	}
-
-	unsetEntry(entryId: string): void {
-		this._entries.get(entryId)?.disposable.dispose();
-		this._entries.delete(entryId);
-	}
-
-	getEntries(): Iterable<[string, { entry: IStatusbarEntry; alignment: MainThreadStatusBarAlignment; priority: number }]> {
-		return this._entries.entries();
-	}
-}
-
-registerSingleton(IExtensionStatusBarItemService, ExtensionStatusBarItemService, InstantiationType.Delayed);
-
-// --- extension point and reading of it
-
 interface IUserFriendlyStatusItemEntry {
 	id: string;
 	name: string;
diff --git a/src/vs/workbench/api/browser/statusBarService.ts b/src/vs/workbench/api/browser/statusBarService.ts
new file mode 100644
index 00000000000..2dcf5005a86
--- /dev/null
+++ b/src/vs/workbench/api/browser/statusBarService.ts
@@ -0,0 +1,159 @@
+/*---------------------------------------------------------------------------------------------
+ *  Copyright (c) Microsoft Corporation. All rights reserved.
+ *  Licensed under the MIT License. See License.txt in the project root for license information.
+ *--------------------------------------------------------------------------------------------*/
+
+import { IDisposable, toDisposable } from '../../../base/common/lifecycle.js';
+import { createDecorator } from '../../../platform/instantiation/common/instantiation.js';
+import { IStatusbarService, StatusbarAlignment as MainThreadStatusBarAlignment, IStatusbarEntryAccessor, IStatusbarEntry, StatusbarAlignment, IStatusbarEntryPriority, StatusbarEntryKind } from '../../services/statusbar/browser/statusbar.js';
+import { ThemeColor } from '../../../base/common/themables.js';
+import { Command } from '../../../editor/common/languages.js';
+import { IAccessibilityInformation } from '../../../platform/accessibility/common/accessibility.js';
+import { IMarkdownString } from '../../../base/common/htmlContent.js';
+import { getCodiconAriaLabel } from '../../../base/common/iconLabels.js';
+import { hash } from '../../../base/common/hash.js';
+import { Event, Emitter } from '../../../base/common/event.js';
+import { InstantiationType, registerSingleton } from '../../../platform/instantiation/common/extensions.js';
+import { STATUS_BAR_ERROR_ITEM_BACKGROUND, STATUS_BAR_WARNING_ITEM_BACKGROUND } from '../../common/theme.js';
+
+// --- service
+
+export const IExtensionStatusBarItemService = createDecorator<IExtensionStatusBarItemService>('IExtensionStatusBarItemService');
+
+export interface IExtensionStatusBarItemChangeEvent {
+	readonly added?: ExtensionStatusBarEntry;
+	readonly removed?: string;
+}
+
+export type ExtensionStatusBarEntry = [string, {
+	entry: IStatusbarEntry;
+	alignment: MainThreadStatusBarAlignment;
+	priority: number;
+}];
+
+export const enum StatusBarUpdateKind {
+	DidDefine,
+	DidUpdate
+}
+
+export interface IExtensionStatusBarItemService {
+	readonly _serviceBrand: undefined;
+
+	onDidChange: Event<IExtensionStatusBarItemChangeEvent>;
+
+	setOrUpdateEntry(id: string, statusId: string, extensionId: string | undefined, name: string, text: string, tooltip: IMarkdownString | string | undefined, command: Command | undefined, color: string | ThemeColor | undefined, backgroundColor: ThemeColor | undefined, alignLeft: boolean, priority: number | undefined, accessibilityInformation: IAccessibilityInformation | undefined): StatusBarUpdateKind;
+
+	unsetEntry(id: string): void;
+
+	getEntries(): Iterable<ExtensionStatusBarEntry>;
+}
+
+
+export class ExtensionStatusBarItemService implements IExtensionStatusBarItemService {
+
+	declare readonly _serviceBrand: undefined;
+
+	private readonly _entries: Map<string, { accessor: IStatusbarEntryAccessor; entry: IStatusbarEntry; alignment: MainThreadStatusBarAlignment; priority: number; disposable: IDisposable }> = new Map();
+
+	private readonly _onDidChange = new Emitter<IExtensionStatusBarItemChangeEvent>();
+	readonly onDidChange: Event<IExtensionStatusBarItemChangeEvent> = this._onDidChange.event;
+
+	constructor(@IStatusbarService private readonly _statusbarService: IStatusbarService) { }
+
+	dispose(): void {
+		this._entries.forEach(entry => entry.accessor.dispose());
+		this._entries.clear();
+		this._onDidChange.dispose();
+	}
+
+	setOrUpdateEntry(entryId: string,
+		id: string, extensionId: string | undefined, name: string, text: string, tooltip: IMarkdownString | string | undefined,
+		command: Command | undefined, color: string | ThemeColor | undefined, backgroundColor: ThemeColor | undefined,
+		alignLeft: boolean, priority: number | undefined, accessibilityInformation: IAccessibilityInformation | undefined
+	): StatusBarUpdateKind {
+		// if there are icons in the text use the tooltip for the aria label
+		let ariaLabel: string;
+		let role: string | undefined = undefined;
+		if (accessibilityInformation) {
+			ariaLabel = accessibilityInformation.label;
+			role = accessibilityInformation.role;
+		} else {
+			ariaLabel = getCodiconAriaLabel(text);
+			if (tooltip) {
+				const tooltipString = typeof tooltip === 'string' ? tooltip : tooltip.value;
+				ariaLabel += `, ${tooltipString}`;
+			}
+		}
+		let kind: StatusbarEntryKind | undefined = undefined;
+		switch (backgroundColor?.id) {
+			case STATUS_BAR_ERROR_ITEM_BACKGROUND:
+			case STATUS_BAR_WARNING_ITEM_BACKGROUND:
+				// override well known colors that map to status entry kinds to support associated themable hover colors
+				kind = backgroundColor.id === STATUS_BAR_ERROR_ITEM_BACKGROUND ? 'error' : 'warning';
+				color = undefined;
+				backgroundColor = undefined;
+		}
+		const entry: IStatusbarEntry = { name, text, tooltip, command, color, backgroundColor, ariaLabel, role, kind };
+
+		if (typeof priority === 'undefined') {
+			priority = 0;
+		}
+
+		let alignment = alignLeft ? StatusbarAlignment.LEFT : StatusbarAlignment.RIGHT;
+
+		// alignment and priority can only be set once (at creation time)
+		const existingEntry = this._entries.get(entryId);
+		if (existingEntry) {
+			alignment = existingEntry.alignment;
+			priority = existingEntry.priority;
+		}
+
+		// Create new entry if not existing
+		if (!existingEntry) {
+			let entryPriority: number | IStatusbarEntryPriority;
+			if (typeof extensionId === 'string') {
+				// We cannot enforce unique priorities across all extensions, so we
+				// use the extension identifier as a secondary sort key to reduce
+				// the likelyhood of collisions.
+				// See https://github.com/microsoft/vscode/issues/177835
+				// See https://github.com/microsoft/vscode/issues/123827
+				entryPriority = { primary: priority, secondary: hash(extensionId) };
+			} else {
+				entryPriority = priority;
+			}
+
+			const accessor = this._statusbarService.addEntry(entry, id, alignment, entryPriority);
+			this._entries.set(entryId, {
+				accessor,
+				entry,
+				alignment,
+				priority,
+				disposable: toDisposable(() => {
+					accessor.dispose();
+					this._entries.delete(entryId);
+					this._onDidChange.fire({ removed: entryId });
+				})
+			});
+
+			this._onDidChange.fire({ added: [entryId, { entry, alignment, priority }] });
+			return StatusBarUpdateKind.DidDefine;
+
+		} else {
+			// Otherwise update
+			existingEntry.accessor.update(entry);
+			existingEntry.entry = entry;
+			return StatusBarUpdateKind.DidUpdate;
+		}
+	}
+
+	unsetEntry(entryId: string): void {
+		this._entries.get(entryId)?.disposable.dispose();
+		this._entries.delete(entryId);
+	}
+
+	getEntries(): Iterable<[string, { entry: IStatusbarEntry; alignment: MainThreadStatusBarAlignment; priority: number }]> {
+		return this._entries.entries();
+	}
+}
+
+registerSingleton(IExtensionStatusBarItemService, ExtensionStatusBarItemService, InstantiationType.Delayed);
