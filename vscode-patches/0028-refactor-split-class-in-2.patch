From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Lo=C3=AFc=20Mangeonjean?= <loic@coderpad.io>
Date: Mon, 11 Mar 2024 18:17:31 +0100
Subject: [PATCH] refactor: split class in 2

---
 .../extensions/browser/extensionService.ts    | 94 +++++++++++++++----
 1 file changed, 76 insertions(+), 18 deletions(-)

diff --git a/src/vs/workbench/services/extensions/browser/extensionService.ts b/src/vs/workbench/services/extensions/browser/extensionService.ts
index b232937c792..e48e1d79a07 100644
--- a/src/vs/workbench/services/extensions/browser/extensionService.ts
+++ b/src/vs/workbench/services/extensions/browser/extensionService.ts
@@ -43,8 +43,10 @@ import { IUserDataInitializationService } from '../../userData/browser/userDataI
 import { IUserDataProfileService } from '../../userDataProfile/common/userDataProfile.js';
 
 export class ExtensionService extends AbstractExtensionService implements IExtensionService {
-
 	constructor(
+		extensionsProposedApi: ExtensionsProposedApi,
+		extensionHostFactory: IExtensionHostFactory,
+		extensionHostKindPicker: IExtensionHostKindPicker,
 		@IInstantiationService instantiationService: IInstantiationService,
 		@INotificationService notificationService: INotificationService,
 		@IBrowserWorkbenchEnvironmentService private readonly _browserEnvironmentService: IBrowserWorkbenchEnvironmentService,
@@ -68,21 +70,10 @@ export class ExtensionService extends AbstractExtensionService implements IExten
 		@IRemoteExplorerService private readonly _remoteExplorerService: IRemoteExplorerService,
 		@IDialogService dialogService: IDialogService,
 	) {
-		const extensionsProposedApi = instantiationService.createInstance(ExtensionsProposedApi);
-		const extensionHostFactory = new BrowserExtensionHostFactory(
-			extensionsProposedApi,
-			() => this._scanWebExtensions(),
-			() => this._getExtensionRegistrySnapshotWhenReady(),
-			instantiationService,
-			remoteAgentService,
-			remoteAuthorityResolverService,
-			extensionEnablementService,
-			logService
-		);
 		super(
 			extensionsProposedApi,
 			extensionHostFactory,
-			new BrowserExtensionHostKindPicker(logService),
+			extensionHostKindPicker,
 			instantiationService,
 			notificationService,
 			_browserEnvironmentService,
@@ -206,10 +197,10 @@ export class BrowserExtensionHostFactory implements IExtensionHostFactory {
 		private readonly _extensionsProposedApi: ExtensionsProposedApi,
 		private readonly _scanWebExtensions: () => Promise<IExtensionDescription[]>,
 		private readonly _getExtensionRegistrySnapshotWhenReady: () => Promise<ExtensionDescriptionRegistrySnapshot>,
-		@IInstantiationService private readonly _instantiationService: IInstantiationService,
-		@IRemoteAgentService private readonly _remoteAgentService: IRemoteAgentService,
-		@IRemoteAuthorityResolverService private readonly _remoteAuthorityResolverService: IRemoteAuthorityResolverService,
-		@IWorkbenchExtensionEnablementService private readonly _extensionEnablementService: IWorkbenchExtensionEnablementService,
+		@IInstantiationService protected readonly _instantiationService: IInstantiationService,
+		@IRemoteAgentService protected readonly _remoteAgentService: IRemoteAgentService,
+		@IRemoteAuthorityResolverService protected readonly _remoteAuthorityResolverService: IRemoteAuthorityResolverService,
+		@IWorkbenchExtensionEnablementService protected readonly _extensionEnablementService: IWorkbenchExtensionEnablementService,
 		@ILogService private readonly _logService: ILogService,
 	) { }
 
@@ -333,4 +324,71 @@ export class BrowserExtensionHostKindPicker implements IExtensionHostKindPicker
 	}
 }
 
-registerSingleton(IExtensionService, ExtensionService, InstantiationType.Eager);
+export class BrowserExtensionService extends ExtensionService {
+	constructor(
+		@IInstantiationService instantiationService: IInstantiationService,
+		@INotificationService notificationService: INotificationService,
+		@IBrowserWorkbenchEnvironmentService browserEnvironmentService: IBrowserWorkbenchEnvironmentService,
+		@ITelemetryService telemetryService: ITelemetryService,
+		@IWorkbenchExtensionEnablementService extensionEnablementService: IWorkbenchExtensionEnablementService,
+		@IFileService fileService: IFileService,
+		@IProductService productService: IProductService,
+		@IWorkbenchExtensionManagementService extensionManagementService: IWorkbenchExtensionManagementService,
+		@IWorkspaceContextService contextService: IWorkspaceContextService,
+		@IConfigurationService configurationService: IConfigurationService,
+		@IExtensionManifestPropertiesService extensionManifestPropertiesService: IExtensionManifestPropertiesService,
+		@IWebExtensionsScannerService webExtensionsScannerService: IWebExtensionsScannerService,
+		@ILogService logService: ILogService,
+		@IRemoteAgentService remoteAgentService: IRemoteAgentService,
+		@IRemoteExtensionsScannerService remoteExtensionsScannerService: IRemoteExtensionsScannerService,
+		@ILifecycleService lifecycleService: ILifecycleService,
+		@IRemoteAuthorityResolverService remoteAuthorityResolverService: IRemoteAuthorityResolverService,
+		@IUserDataInitializationService userDataInitializationService: IUserDataInitializationService,
+		@IUserDataProfileService userDataProfileService: IUserDataProfileService,
+		@IWorkspaceTrustManagementService workspaceTrustManagementService: IWorkspaceTrustManagementService,
+		@IRemoteExplorerService remoteExplorerService: IRemoteExplorerService,
+		@IDialogService dialogService: IDialogService,
+	) {
+		const extensionsProposedApi = instantiationService.createInstance(ExtensionsProposedApi);
+		const extensionHostFactory = new BrowserExtensionHostFactory(
+			extensionsProposedApi,
+			() => this._scanWebExtensions(),
+			() => this._getExtensionRegistrySnapshotWhenReady(),
+			instantiationService,
+			remoteAgentService,
+			remoteAuthorityResolverService,
+			extensionEnablementService,
+			logService
+		);
+		super(
+			extensionsProposedApi,
+			extensionHostFactory,
+			new BrowserExtensionHostKindPicker(logService),
+			instantiationService,
+			notificationService,
+			browserEnvironmentService,
+			telemetryService,
+			extensionEnablementService,
+			fileService,
+			productService,
+			extensionManagementService,
+			contextService,
+			configurationService,
+			extensionManifestPropertiesService,
+			webExtensionsScannerService,
+			logService,
+			remoteAgentService,
+			remoteExtensionsScannerService,
+			lifecycleService,
+			remoteAuthorityResolverService,
+			userDataInitializationService,
+			userDataProfileService,
+			workspaceTrustManagementService,
+			remoteExplorerService,
+			dialogService
+		);
+	}
+}
+
+
+registerSingleton(IExtensionService, BrowserExtensionService, InstantiationType.Eager);
