From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Lo=C3=AFc=20Mangeonjean?= <loic@coderpad.io>
Date: Wed, 8 Oct 2025 11:43:06 +0200
Subject: [PATCH] refactor: extract shouldReattach flag

---
 .../contrib/tasks/browser/abstractTaskService.ts       |  4 +++-
 src/vs/workbench/contrib/tasks/common/taskService.ts   |  1 +
 .../contrib/terminal/browser/terminalService.ts        | 10 ++++++----
 3 files changed, 10 insertions(+), 5 deletions(-)

diff --git a/src/vs/workbench/contrib/tasks/browser/abstractTaskService.ts b/src/vs/workbench/contrib/tasks/browser/abstractTaskService.ts
index 782478964be..e119365617b 100644
--- a/src/vs/workbench/contrib/tasks/browser/abstractTaskService.ts
+++ b/src/vs/workbench/contrib/tasks/browser/abstractTaskService.ts
@@ -437,8 +437,10 @@ export abstract class AbstractTaskService extends Disposable implements ITaskSer
 		}
 	}
 
+	get shouldReattach(): boolean { return this._lifecycleService.startupKind === StartupKind.ReloadedWindow; }
+
 	private _attemptTaskReconnection(): void {
-		if (this._lifecycleService.startupKind !== StartupKind.ReloadedWindow) {
+		if (!this.shouldReattach) {
 			this._log(nls.localize('TaskService.skippingReconnection', 'Startup kind not window reload, setting connected and removing persistent tasks'), true);
 			this._tasksReconnected = true;
 			this._storageService.remove(AbstractTaskService.PersistentTasks_Key, StorageScope.WORKSPACE);
diff --git a/src/vs/workbench/contrib/tasks/common/taskService.ts b/src/vs/workbench/contrib/tasks/common/taskService.ts
index 5cabde32dee..9891e93bf3b 100644
--- a/src/vs/workbench/contrib/tasks/common/taskService.ts
+++ b/src/vs/workbench/contrib/tasks/common/taskService.ts
@@ -70,6 +70,7 @@ export interface ITaskService {
 	/** Fired when task providers are registered or unregistered */
 	onDidChangeTaskProviders: Event<void>;
 	isReconnected: boolean;
+	shouldReattach: boolean;
 	onDidReconnectToTasks: Event<void>;
 	supportsMultipleTaskExecutions: boolean;
 
diff --git a/src/vs/workbench/contrib/terminal/browser/terminalService.ts b/src/vs/workbench/contrib/terminal/browser/terminalService.ts
index f927f4a6830..1ab41d04beb 100644
--- a/src/vs/workbench/contrib/terminal/browser/terminalService.ts
+++ b/src/vs/workbench/contrib/terminal/browser/terminalService.ts
@@ -45,7 +45,7 @@ import { IEditorGroupsService } from '../../../services/editor/common/editorGrou
 import { ACTIVE_GROUP, ACTIVE_GROUP_TYPE, AUX_WINDOW_GROUP, AUX_WINDOW_GROUP_TYPE, IEditorService, SIDE_GROUP, SIDE_GROUP_TYPE } from '../../../services/editor/common/editorService.js';
 import { IWorkbenchEnvironmentService } from '../../../services/environment/common/environmentService.js';
 import { IExtensionService } from '../../../services/extensions/common/extensions.js';
-import { ILifecycleService, ShutdownReason, StartupKind, WillShutdownEvent } from '../../../services/lifecycle/common/lifecycle.js';
+import { ILifecycleService, ShutdownReason, WillShutdownEvent } from '../../../services/lifecycle/common/lifecycle.js';
 import { IRemoteAgentService } from '../../../services/remote/common/remoteAgentService.js';
 import { XtermTerminal } from './xterm/xtermTerminal.js';
 import { TerminalInstance } from './terminalInstance.js';
@@ -60,6 +60,7 @@ import { isAuxiliaryWindow, mainWindow } from '../../../../base/browser/window.j
 import { GroupIdentifier } from '../../../common/editor.js';
 import { getActiveWindow } from '../../../../base/browser/dom.js';
 import { Registry } from '../../../../platform/registry/common/platform.js';
+import { ITaskService } from '../../tasks/common/taskService.js';
 
 export class TerminalService extends Disposable implements ITerminalService {
 	declare _serviceBrand: undefined;
@@ -171,7 +172,7 @@ export class TerminalService extends Disposable implements ITerminalService {
 	@memoize get onAnyInstanceAddedCapabilityType() { return this._register(this.createOnInstanceEvent(e => e.capabilities.onDidAddCapabilityType)).event; }
 	constructor(
 		@IContextKeyService private _contextKeyService: IContextKeyService,
-		@ILifecycleService private readonly _lifecycleService: ILifecycleService,
+		@ILifecycleService _lifecycleService: ILifecycleService,
 		@ITerminalLogService private readonly _logService: ITerminalLogService,
 		@IDialogService private _dialogService: IDialogService,
 		@IInstantiationService private _instantiationService: IInstantiationService,
@@ -191,7 +192,8 @@ export class TerminalService extends Disposable implements ITerminalService {
 		@IWorkspaceContextService private readonly _workspaceContextService: IWorkspaceContextService,
 		@ICommandService private readonly _commandService: ICommandService,
 		@IKeybindingService private readonly _keybindingService: IKeybindingService,
-		@ITimerService private readonly _timerService: ITimerService
+		@ITimerService private readonly _timerService: ITimerService,
+		@ITaskService private readonly _taskService: ITaskService,
 	) {
 		super();
 
@@ -525,7 +527,7 @@ export class TerminalService extends Disposable implements ITerminalService {
 		let lastInstance: Promise<ITerminalInstance> | undefined;
 		for (const terminalLayout of terminalLayouts) {
 			const attachPersistentProcess = terminalLayout.terminal!;
-			if (this._lifecycleService.startupKind !== StartupKind.ReloadedWindow && attachPersistentProcess.type === 'Task') {
+			if (!this._taskService.shouldReattach && attachPersistentProcess.type === 'Task') {
 				continue;
 			}
 			mark(`code/terminal/willRecreateTerminal/${attachPersistentProcess.id}-${attachPersistentProcess.pid}`);
