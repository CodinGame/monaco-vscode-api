From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Lo=C3=AFc=20Mangeonjean?= <loic@coderpad.io>
Date: Mon, 11 Mar 2024 18:18:39 +0100
Subject: [PATCH] fix: mark process supported as soon as there is a registered
 backend

---
 src/vs/platform/terminal/common/terminal.ts   | 30 ++++++++++++++-----
 .../terminal/browser/terminalService.ts       | 14 +++++++--
 2 files changed, 33 insertions(+), 11 deletions(-)

diff --git a/src/vs/platform/terminal/common/terminal.ts b/src/vs/platform/terminal/common/terminal.ts
index 2b985ab369e..53920103e1e 100644
--- a/src/vs/platform/terminal/common/terminal.ts
+++ b/src/vs/platform/terminal/common/terminal.ts
@@ -3,7 +3,7 @@
  *  Licensed under the MIT License. See License.txt in the project root for license information.
  *--------------------------------------------------------------------------------------------*/
 
-import { Event } from '../../../base/common/event.js';
+import { Emitter, Event } from '../../../base/common/event.js';
 import { IProcessEnvironment, OperatingSystem } from '../../../base/common/platform.js';
 import { URI, UriComponents } from '../../../base/common/uri.js';
 import { createDecorator } from '../../instantiation/common/instantiation.js';
@@ -1101,12 +1101,27 @@ export const TerminalExtensions = {
 	Backend: 'workbench.contributions.terminal.processBackend'
 };
 
+function sanitizeRemoteAuthority(remoteAuthority: string | undefined) {
+	// Normalize the key to lowercase as the authority is case-insensitive
+	return remoteAuthority?.toLowerCase() ?? '';
+}
+
+export class TerminalBackendChangeEvent {
+	constructor(public readonly remoteAuthority: string | undefined) { }
+
+	public affects(remoteAuthority?: string): boolean {
+		return sanitizeRemoteAuthority(remoteAuthority) === this.remoteAuthority;
+	}
+}
+
 export interface ITerminalBackendRegistry {
 	/**
 	 * Gets all backends in the registry.
 	 */
 	backends: ReadonlyMap<string, ITerminalBackend>;
 
+	onDidChangeBackends: Event<TerminalBackendChangeEvent>;
+
 	/**
 	 * Registers a terminal backend for a remote authority.
 	 */
@@ -1123,21 +1138,20 @@ class TerminalBackendRegistry implements ITerminalBackendRegistry {
 
 	get backends(): ReadonlyMap<string, ITerminalBackend> { return this._backends; }
 
+	private _onDidChangeBackends = new Emitter<TerminalBackendChangeEvent>();
+	readonly onDidChangeBackends: Event<TerminalBackendChangeEvent> = this._onDidChangeBackends.event;
+
 	registerTerminalBackend(backend: ITerminalBackend): void {
-		const key = this._sanitizeRemoteAuthority(backend.remoteAuthority);
+		const key = sanitizeRemoteAuthority(backend.remoteAuthority);
 		if (this._backends.has(key)) {
 			throw new Error(`A terminal backend with remote authority '${key}' was already registered.`);
 		}
 		this._backends.set(key, backend);
+		this._onDidChangeBackends.fire(new TerminalBackendChangeEvent(key));
 	}
 
 	getTerminalBackend(remoteAuthority: string | undefined): ITerminalBackend | undefined {
-		return this._backends.get(this._sanitizeRemoteAuthority(remoteAuthority));
-	}
-
-	private _sanitizeRemoteAuthority(remoteAuthority: string | undefined) {
-		// Normalize the key to lowercase as the authority is case-insensitive
-		return remoteAuthority?.toLowerCase() ?? '';
+		return this._backends.get(sanitizeRemoteAuthority(remoteAuthority));
 	}
 }
 Registry.add(TerminalExtensions.Backend, new TerminalBackendRegistry());
diff --git a/src/vs/workbench/contrib/terminal/browser/terminalService.ts b/src/vs/workbench/contrib/terminal/browser/terminalService.ts
index 42b3f065762..a5ac950a438 100644
--- a/src/vs/workbench/contrib/terminal/browser/terminalService.ts
+++ b/src/vs/workbench/contrib/terminal/browser/terminalService.ts
@@ -20,7 +20,7 @@ import { IContextKey, IContextKeyService } from '../../../../platform/contextkey
 import { IDialogService } from '../../../../platform/dialogs/common/dialogs.js';
 import { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';
 import { INotificationService } from '../../../../platform/notification/common/notification.js';
-import { ICreateContributedTerminalProfileOptions, IExtensionTerminalProfile, IPtyHostAttachTarget, IRawTerminalInstanceLayoutInfo, IRawTerminalTabLayoutInfo, IShellLaunchConfig, ITerminalBackend, ITerminalLaunchError, ITerminalLogService, ITerminalsLayoutInfo, ITerminalsLayoutInfoById, TerminalExitReason, TerminalLocation, TerminalLocationString, TitleEventSource } from '../../../../platform/terminal/common/terminal.js';
+import { ICreateContributedTerminalProfileOptions, IExtensionTerminalProfile, IPtyHostAttachTarget, IRawTerminalInstanceLayoutInfo, IRawTerminalTabLayoutInfo, IShellLaunchConfig, ITerminalBackend, ITerminalBackendRegistry, ITerminalLaunchError, ITerminalLogService, ITerminalsLayoutInfo, ITerminalsLayoutInfoById, TerminalExitReason, TerminalExtensions, TerminalLocation, TerminalLocationString, TitleEventSource } from '../../../../platform/terminal/common/terminal.js';
 import { formatMessageForTerminal } from '../../../../platform/terminal/common/terminalStrings.js';
 import { iconForeground } from '../../../../platform/theme/common/colorRegistry.js';
 import { getIconRegistry } from '../../../../platform/theme/common/iconRegistry.js';
@@ -58,6 +58,7 @@ import { ITerminalCapabilityImplMap, TerminalCapability } from '../../../../plat
 import { createInstanceCapabilityEventMultiplexer } from './terminalEvents.js';
 import { mainWindow } from '../../../../base/browser/window.js';
 import { GroupIdentifier } from '../../../common/editor.js';
+import { Registry } from '../../../../platform/registry/common/platform.js';
 
 export class TerminalService extends Disposable implements ITerminalService {
 	declare _serviceBrand: undefined;
@@ -222,7 +223,14 @@ export class TerminalService extends Disposable implements ITerminalService {
 		this._handleInstanceContextKeys();
 		this._terminalShellTypeContextKey = TerminalContextKeys.shellType.bindTo(this._contextKeyService);
 		this._processSupportContextKey = TerminalContextKeys.processSupported.bindTo(this._contextKeyService);
-		this._processSupportContextKey.set(!isWeb || this._remoteAgentService.getConnection() !== null);
+
+		const backendRegistry = Registry.as<ITerminalBackendRegistry>(TerminalExtensions.Backend);
+		this._processSupportContextKey.set(backendRegistry.getTerminalBackend(_remoteAgentService.getConnection()?.remoteAuthority) !== undefined);
+		this._register(backendRegistry.onDidChangeBackends((e) => {
+			if (e.affects(_remoteAgentService.getConnection()?.remoteAuthority)) {
+				this.registerProcessSupport(backendRegistry.getTerminalBackend(_remoteAgentService.getConnection()?.remoteAuthority) !== undefined);
+			}
+		}));
 		this._terminalHasBeenCreated = TerminalContextKeys.terminalHasBeenCreated.bindTo(this._contextKeyService);
 		this._terminalCountContextKey = TerminalContextKeys.count.bindTo(this._contextKeyService);
 		this._terminalEditorActive = TerminalContextKeys.terminalEditorActive.bindTo(this._contextKeyService);
@@ -887,7 +895,7 @@ export class TerminalService extends Disposable implements ITerminalService {
 	}
 
 	registerProcessSupport(isSupported: boolean): void {
-		if (!isSupported) {
+		if (!isSupported || this._processSupportContextKey.get()) {
 			return;
 		}
 		this._processSupportContextKey.set(isSupported);
