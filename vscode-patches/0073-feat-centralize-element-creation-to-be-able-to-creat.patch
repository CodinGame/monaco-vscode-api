From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Lo=C3=AFc=20Mangeonjean?= <loic@coderpad.io>
Date: Tue, 5 Aug 2025 12:07:48 +0200
Subject: [PATCH] feat: centralize element creation, to be able to create them
 on the proper document

---
 src/vs/base/browser/dom.ts                    | 40 ++++++++++++++-----
 src/vs/base/browser/domStylesheets.ts         |  4 +-
 src/vs/base/browser/formattedTextRenderer.ts  | 12 +++---
 src/vs/base/browser/pixelRatio.ts             |  4 +-
 .../browser/ui/actionbar/actionViewItems.ts   |  6 +--
 src/vs/base/browser/ui/actionbar/actionbar.ts |  7 ++--
 src/vs/base/browser/ui/aria/aria.ts           |  6 +--
 .../ui/breadcrumbs/breadcrumbsWidget.ts       |  4 +-
 src/vs/base/browser/ui/button/button.ts       | 20 +++++-----
 .../browser/ui/contextview/contextview.ts     |  2 +-
 src/vs/base/browser/ui/findinput/findInput.ts |  4 +-
 .../base/browser/ui/findinput/replaceInput.ts |  4 +-
 src/vs/base/browser/ui/hover/hoverWidget.ts   |  4 +-
 src/vs/base/browser/ui/list/listView.ts       |  6 +--
 src/vs/base/browser/ui/menu/menu.ts           |  4 +-
 .../browser/ui/progressbar/progressbar.ts     |  6 +--
 src/vs/base/browser/ui/resizable/resizable.ts |  4 +-
 .../browser/ui/scrollbar/abstractScrollbar.ts |  6 +--
 .../browser/ui/scrollbar/scrollableElement.ts |  8 ++--
 .../browser/ui/scrollbar/scrollbarArrow.ts    |  6 +--
 .../browser/ui/selectBox/selectBoxCustom.ts   |  6 +--
 .../browser/ui/selectBox/selectBoxNative.ts   |  4 +-
 src/vs/base/browser/ui/splitview/splitview.ts |  4 +-
 src/vs/base/browser/ui/toggle/toggle.ts       |  4 +-
 src/vs/base/browser/ui/toolbar/toolbar.ts     |  3 +-
 src/vs/base/browser/ui/tree/abstractTree.ts   |  4 +-
 src/vs/base/test/browser/ui/grid/util.ts      |  3 +-
 .../editor/browser/config/charWidthReader.ts  | 13 +++---
 .../editContext/native/debugEditContext.ts    |  7 ++--
 .../editContext/native/nativeEditContext.ts   |  6 +--
 .../textArea/textAreaEditContext.ts           |  5 ++-
 .../editor/browser/controller/mouseTarget.ts  |  2 +-
 src/vs/editor/browser/gpu/viewGpuContext.ts   |  4 +-
 src/vs/editor/browser/observableCodeEditor.ts |  3 +-
 src/vs/editor/browser/view.ts                 |  6 +--
 .../browser/view/domLineBreaksComputer.ts     |  3 +-
 src/vs/editor/browser/view/viewLayer.ts       |  5 ++-
 .../blockDecorations/blockDecorations.ts      |  5 ++-
 .../contentWidgets/contentWidgets.ts          |  4 +-
 .../viewParts/glyphMargin/glyphMargin.ts      |  5 ++-
 .../editor/browser/viewParts/margin/margin.ts |  5 ++-
 .../browser/viewParts/minimap/minimap.ts      | 14 +++----
 .../minimap/minimapCharRendererFactory.ts     |  3 +-
 .../overlayWidgets/overlayWidgets.ts          |  4 +-
 .../overviewRuler/decorationsOverviewRuler.ts |  3 +-
 .../viewParts/overviewRuler/overviewRuler.ts  |  3 +-
 .../editor/browser/viewParts/rulers/rulers.ts |  5 ++-
 .../scrollDecoration/scrollDecoration.ts      |  3 +-
 .../viewParts/viewCursors/viewCursor.ts       |  2 +-
 .../viewParts/viewCursors/viewCursors.ts      |  4 +-
 .../browser/viewParts/viewLines/viewLines.ts  |  3 +-
 .../browser/viewParts/viewZones/viewZones.ts  |  5 ++-
 .../components/accessibleDiffViewer.ts        | 24 +++++------
 .../diffEditorViewZones.ts                    | 18 ++++-----
 .../inlineDiffDeletedCodeMargin.ts            |  4 +-
 .../features/movedBlocksLinesFeature.ts       | 12 +++---
 .../features/overviewRulerFeature.ts          |  4 +-
 .../editor/browser/widget/diffEditor/utils.ts |  4 +-
 .../widget/diffEditor/utils/editorGutter.ts   |  4 +-
 .../browser/markdownRenderer.ts               |  5 ++-
 .../codelens/browser/codelensWidget.ts        |  4 +-
 .../colorPickerCloseButton.ts                 |  4 +-
 .../colorPickerParts/colorPickerHeader.ts     |  2 +-
 .../colorPickerInsertButton.ts                |  2 +-
 .../colorPickerSaturationBox.ts               |  4 +-
 .../colorPickerParts/colorPickerStrip.ts      |  2 +-
 .../standaloneColorPickerWidget.ts            |  2 +-
 .../contrib/find/browser/findOptionsWidget.ts |  2 +-
 .../editor/contrib/find/browser/findWidget.ts | 16 ++++----
 .../gotoError/browser/gotoErrorWidget.ts      | 24 +++++------
 .../gotoSymbol/browser/peek/referencesTree.ts |  2 +-
 .../browser/hintsWidget/hoverParticipant.ts   |  2 +-
 .../browser/view/ghostText/ghostTextView.ts   |  4 +-
 .../inlineEditsViews/debugVisualization.ts    |  5 ++-
 .../inlineEditsViews/inlineEditsCustomView.ts |  4 +-
 .../inlineEditsLineReplacementView.ts         |  4 +-
 .../inlineEditsWordReplacementView.ts         |  4 +-
 .../message/browser/messageController.ts      |  8 ++--
 .../browser/parameterHintsWidget.ts           |  6 +--
 .../contrib/rename/browser/renameWidget.ts    | 18 ++++-----
 .../browser/stickyScrollWidget.ts             | 16 ++++----
 .../contrib/zoneWidget/browser/zoneWidget.ts  |  6 +--
 .../iPadShowKeyboard/iPadShowKeyboard.ts      |  2 +-
 .../browser/inspectTokens/inspectTokens.ts    |  4 +-
 .../quickInput/standaloneQuickInputService.ts |  3 +-
 .../test/browser/controller/imeRecorder.ts    |  3 +-
 .../test/browser/controller/imeTester.ts      | 18 ++++-----
 .../actionWidget/browser/actionList.ts        | 10 ++---
 .../actionWidget/browser/actionWidget.ts      |  6 +--
 .../api/browser/mainThreadCodeInsets.ts       |  4 +-
 .../browser/actions/developerActions.ts       |  4 +-
 src/vs/workbench/browser/layout.ts            |  4 +-
 .../parts/editor/breadcrumbsControl.ts        |  2 +-
 .../browser/parts/editor/breadcrumbsPicker.ts |  7 ++--
 .../parts/titlebar/commandCenterControl.ts    |  8 ++--
 .../workbench/browser/parts/views/treeView.ts |  4 +-
 src/vs/workbench/browser/workbench.ts         |  4 +-
 .../accessibility/browser/accessibleView.ts   | 10 ++---
 .../bulkEdit/browser/preview/bulkEditPane.ts  |  9 +++--
 .../bulkEdit/browser/preview/bulkEditTree.ts  | 10 ++---
 .../browser/callHierarchyPeek.ts              | 10 ++---
 .../browser/callHierarchyTree.ts              |  3 +-
 .../chatAgentCommandContentPart.ts            |  5 ++-
 .../chatConfirmationWidget.ts                 |  2 +-
 .../chatToolInputOutputContentPart.ts         |  2 +-
 .../chatToolConfirmationSubPart.ts            |  2 +-
 .../chatToolProgressPart.ts                   |  2 +-
 .../contrib/chat/browser/chatDragAndDrop.ts   |  4 +-
 .../chatEditingCodeEditorIntegration.ts       |  8 ++--
 .../chatEditing/chatEditingEditorOverlay.ts   | 10 ++---
 .../notebook/overlayToolbarDecorator.ts       |  5 ++-
 .../chatEditing/simpleBrowserEditorOverlay.ts | 12 +++---
 .../contrib/chat/browser/chatInputPart.ts     |  4 +-
 .../contrib/chat/browser/chatWidget.ts        |  2 +-
 .../contrib/chat/browser/imageUtils.ts        |  3 +-
 .../browser/dictation/editorDictation.ts      |  4 +-
 .../browser/find/simpleFindWidget.ts          |  6 +--
 .../inspectEditorTokens.ts                    |  2 +-
 .../contrib/comments/browser/commentNode.ts   |  2 +-
 .../debug/browser/debugANSIHandling.ts        |  3 +-
 .../contrib/debug/browser/linkDetector.ts     | 10 ++---
 .../browser/inlayHintsAccessibilty.ts         |  4 +-
 .../browser/inlineChatStrategies.ts           |  4 +-
 .../issue/browser/baseIssueReporterService.ts |  8 ++--
 .../contrib/issue/browser/issueFormService.ts |  4 +-
 .../languageStatus/browser/languageStatus.ts  | 12 +++---
 .../mergeEditor/browser/view/editorGutter.ts  |  4 +-
 .../browser/view/fixedZoneWidget.ts           |  4 +-
 .../contrib/find/notebookFindReplaceWidget.ts |  8 ++--
 .../contrib/outline/notebookOutline.ts        |  6 +--
 .../browser/contrib/troubleshoot/layout.ts    |  8 ++--
 .../controller/chat/notebookChatController.ts |  8 ++--
 .../browser/diff/diffElementOutputs.ts        |  2 +-
 .../inlineDiff/notebookCellDiffDecorator.ts   |  3 +-
 .../notebookDeletedCellDecorator.ts           |  6 +--
 .../browser/diff/notebookDiffEditor.ts        |  4 +-
 .../browser/diff/notebookDiffOverviewRuler.ts |  4 +-
 .../notebook/browser/notebookEditorWidget.ts  | 12 +++---
 .../browser/view/cellParts/cellActionView.ts  |  4 +-
 .../view/cellParts/cellDragRenderer.ts        |  2 +-
 .../view/cellParts/codeCellRunToolbar.ts      |  3 +-
 .../view/renderers/backLayerWebView.ts        |  4 +-
 .../browser/view/renderers/webviewPreloads.ts | 34 ++++++++--------
 .../browser/viewParts/notebookCellOverlays.ts |  3 +-
 .../viewParts/notebookEditorStickyScroll.ts   |  6 +--
 .../viewParts/notebookEditorToolbar.ts        |  4 +-
 .../browser/viewParts/notebookKernelView.ts   |  3 +-
 .../viewParts/notebookOverviewRuler.ts        |  4 +-
 .../browser/viewParts/notebookViewZones.ts    |  5 ++-
 .../preferences/browser/keybindingWidgets.ts  |  2 +-
 .../contrib/remote/browser/remote.ts          |  2 +-
 .../contrib/scm/browser/scmHistory.ts         |  8 ++--
 .../search/browser/patternInputWidget.ts      |  4 +-
 .../browser/terminalConfigurationService.ts   |  3 +-
 .../contrib/terminal/browser/terminalGroup.ts |  6 +--
 .../terminal/browser/terminalInstance.ts      |  6 +--
 .../terminal/browser/terminalTabbedView.ts    |  2 +-
 .../terminal/browser/widgets/widgetManager.ts |  3 +-
 .../chat/browser/terminalChatWidget.ts        |  4 +-
 .../terminal.developer.contribution.ts        |  3 +-
 .../browser/codeCoverageDecorations.ts        |  2 +-
 .../testResultsView/testResultsViewContent.ts |  2 +-
 .../testing/browser/testingDecorations.ts     |  6 +--
 .../testing/test/browser/testObjectTree.ts    |  3 +-
 .../contrib/timeline/browser/timelinePane.ts  |  2 +-
 .../browser/typeHierarchyPeek.ts              | 10 ++---
 .../browser/typeHierarchyTree.ts              |  3 +-
 .../contrib/webview/browser/overlayWebview.ts |  4 +-
 .../contrib/webview/browser/webviewElement.ts |  4 +-
 .../webviewPanel/browser/webviewEditor.ts     |  2 +-
 .../browser/walkThroughPart.ts                |  6 +--
 .../browser/webWorkerExtensionHost.ts         |  2 +-
 .../host/browser/browserHostService.ts        |  6 +--
 173 files changed, 533 insertions(+), 471 deletions(-)

diff --git a/src/vs/base/browser/dom.ts b/src/vs/base/browser/dom.ts
index 51f6b14c9a9..4a96b65e227 100644
--- a/src/vs/base/browser/dom.ts
+++ b/src/vs/base/browser/dom.ts
@@ -1010,12 +1010,34 @@ export function createLinkElement(container: HTMLElement = mainWindow.document.h
 }
 
 function createHeadElement(tagName: string, container: HTMLElement = mainWindow.document.head): HTMLElement {
-	const element = document.createElement(tagName);
+	const element = createElement(tagName);
 	element.setAttribute('data-vscode', 'true');
 	container.appendChild(element);
 	return element;
 }
 
+
+export function createElement<K extends keyof HTMLElementTagNameMap>(tagName: K, options?: ElementCreationOptions): HTMLElementTagNameMap[K];
+export function createElement(tagName: string, options?: ElementCreationOptions): HTMLElement;
+export function createElement<K extends keyof HTMLElementTagNameMap>(tagName: K, options?: ElementCreationOptions): HTMLElementTagNameMap[K] {
+	return mainWindow.document.createElement(tagName, options);
+}
+
+export function createElementNS(namespaceURI: 'http://www.w3.org/1999/xhtml', qualifiedName: string): HTMLElement;
+export function createElementNS<K extends keyof SVGElementTagNameMap>(namespaceURI: 'http://www.w3.org/2000/svg', qualifiedName: K): SVGElementTagNameMap[K];
+export function createElementNS(namespaceURI: 'http://www.w3.org/2000/svg', qualifiedName: string): SVGElement;
+export function createElementNS<K extends keyof MathMLElementTagNameMap>(namespaceURI: 'http://www.w3.org/1998/Math/MathML', qualifiedName: K): MathMLElementTagNameMap[K];
+export function createElementNS(namespaceURI: 'http://www.w3.org/1998/Math/MathML', qualifiedName: string): MathMLElement;
+export function createElementNS(namespaceURI: string | null, qualifiedName: string, options?: ElementCreationOptions): Element;
+export function createElementNS(namespace: string | null, qualifiedName: string, options?: string | ElementCreationOptions): Element;
+export function createElementNS(namespace: string | null, qualifiedName: string, options?: string | ElementCreationOptions): Element {
+	return mainWindow.document.createElementNS(namespace, qualifiedName, options);
+}
+
+export function isElement(e: unknown): e is Element {
+	return e instanceof mainWindow.Element || e instanceof getWindow(e as Node).Element;
+}
+
 export function isHTMLElement(e: unknown): e is HTMLElement {
 	return e instanceof mainWindow.HTMLElement || e instanceof getWindow(e as Node).HTMLElement;
 }
@@ -1302,9 +1324,9 @@ function _$<T extends Element>(namespace: Namespace, description: string, attrs?
 	let result: T;
 
 	if (namespace !== Namespace.HTML) {
-		result = document.createElementNS(namespace as string, tagName) as T;
+		result = createElementNS(namespace as string, tagName) as T;
 	} else {
-		result = document.createElement(tagName) as unknown as T;
+		result = createElement(tagName) as unknown as T;
 	}
 
 	if (match[3]) {
@@ -1555,7 +1577,7 @@ export function triggerDownload(dataOrUri: Uint8Array | URI, name: string): void
 	// points to the file to download.
 	// See also https://developers.google.com/web/updates/2011/08/Downloading-resources-in-HTML5-a-download
 	const activeWindow = getActiveWindow();
-	const anchor = document.createElement('a');
+	const anchor = createElement('a');
 	activeWindow.document.body.appendChild(anchor);
 	anchor.download = name;
 	anchor.href = url;
@@ -1572,7 +1594,7 @@ export function triggerUpload(): Promise<FileList | undefined> {
 		// input element of type `file` and click it
 		// to gather the selected files
 		const activeWindow = getActiveWindow();
-		const input = document.createElement('input');
+		const input = createElement('input');
 		activeWindow.document.body.appendChild(input);
 		input.type = 'file';
 		input.multiple = true;
@@ -1666,7 +1688,7 @@ export function hookDomPurifyHrefAndSrcSanitizer(allowedProtocols: readonly stri
 	// https://github.com/cure53/DOMPurify/blob/main/demos/hooks-scheme-allowlist.html
 
 	// build an anchor to map URLs to
-	const anchor = document.createElement('a');
+	const anchor = createElement('a');
 
 	dompurify.addHook('afterSanitizeAttributes', (node) => {
 		// check all href/src attributes for validity
@@ -2153,7 +2175,7 @@ export function h(tag: string, ...args: [] | [attributes: { $: string } & Partia
 	}
 
 	const tagName = match.groups['tag'] || 'div';
-	const el = document.createElement(tagName);
+	const el = createElement(tagName);
 
 	if (match.groups['id']) {
 		el.id = match.groups['id'];
@@ -2255,7 +2277,7 @@ export function svgElem(tag: string, ...args: [] | [attributes: { $: string } &
 	}
 
 	const tagName = match.groups['tag'] || 'div';
-	const el = document.createElementNS('http://www.w3.org/2000/svg', tagName) as any as HTMLElement;
+	const el = createElementNS('http://www.w3.org/2000/svg', tagName) as any as HTMLElement;
 
 	if (match.groups['id']) {
 		el.id = match.groups['id'];
@@ -2518,7 +2540,7 @@ export abstract class ObserverNode<T extends HTMLOrSVGElement = HTMLOrSVGElement
 		attributes: ElementAttributeKeys<T>,
 		children: ChildNode
 	) {
-		this._element = (ns ? document.createElementNS(ns, tag) : document.createElement(tag)) as unknown as T;
+		this._element = (ns ? createElementNS(ns, tag) : createElement(tag)) as unknown as T;
 		if (ref) {
 			ref(this._element);
 		}
diff --git a/src/vs/base/browser/domStylesheets.ts b/src/vs/base/browser/domStylesheets.ts
index ff98c148dfa..3a50b50630e 100644
--- a/src/vs/base/browser/domStylesheets.ts
+++ b/src/vs/base/browser/domStylesheets.ts
@@ -5,7 +5,7 @@
 
 import { DisposableStore, toDisposable, IDisposable } from '../common/lifecycle.js';
 import { autorun, IObservable } from '../common/observable.js';
-import { getWindows, isShadowRoot, sharedMutationObserver } from './dom.js';
+import { createElement, getWindows, isShadowRoot, sharedMutationObserver } from './dom.js';
 import { mainWindow } from './window.js';
 
 const globalStylesheets = new Map<HTMLStyleElement /* main stylesheet */, Set<HTMLStyleElement /* aux window clones that track the main stylesheet */>>();
@@ -55,7 +55,7 @@ export function setContainerElement(container: HTMLElement) {
 }
 
 export function createStyleSheet(container: HTMLElement = mainWindow.document.head, beforeAppend?: (style: HTMLStyleElement) => void, disposableStore?: DisposableStore): HTMLStyleElement {
-	const style = document.createElement('style');
+	const style = createElement('style');
 	style.type = 'text/css';
 	style.media = 'screen';
 	style.setAttribute('data-vscode', 'true');
diff --git a/src/vs/base/browser/formattedTextRenderer.ts b/src/vs/base/browser/formattedTextRenderer.ts
index ed15b1316ab..f19fecd75f6 100644
--- a/src/vs/base/browser/formattedTextRenderer.ts
+++ b/src/vs/base/browser/formattedTextRenderer.ts
@@ -34,7 +34,7 @@ export function renderFormattedText(formattedText: string, options: FormattedTex
 
 export function createElement(options: FormattedTextRenderOptions): HTMLElement {
 	const tagName = options.inline ? 'span' : 'div';
-	const element = document.createElement(tagName);
+	const element = DOM.createElement(tagName);
 	if (options.className) {
 		element.className = options.className;
 	}
@@ -94,20 +94,20 @@ function _renderFormattedText(element: Node, treeNode: IFormatParseTree, actionH
 	if (treeNode.type === FormatType.Text) {
 		child = document.createTextNode(treeNode.content || '');
 	} else if (treeNode.type === FormatType.Bold) {
-		child = document.createElement('b');
+		child = DOM.createElement('b');
 	} else if (treeNode.type === FormatType.Italics) {
-		child = document.createElement('i');
+		child = DOM.createElement('i');
 	} else if (treeNode.type === FormatType.Code && renderCodeSegments) {
-		child = document.createElement('code');
+		child = DOM.createElement('code');
 	} else if (treeNode.type === FormatType.Action && actionHandler) {
-		const a = document.createElement('a');
+		const a = DOM.createElement('a');
 		actionHandler.disposables.add(DOM.addStandardDisposableListener(a, 'click', (event) => {
 			actionHandler.callback(String(treeNode.index), event);
 		}));
 
 		child = a;
 	} else if (treeNode.type === FormatType.NewLine) {
-		child = document.createElement('br');
+		child = DOM.createElement('br');
 	} else if (treeNode.type === FormatType.Root) {
 		child = element;
 	}
diff --git a/src/vs/base/browser/pixelRatio.ts b/src/vs/base/browser/pixelRatio.ts
index 7ff456e5aa3..6e57336210b 100644
--- a/src/vs/base/browser/pixelRatio.ts
+++ b/src/vs/base/browser/pixelRatio.ts
@@ -3,7 +3,7 @@
  *  Licensed under the MIT License. See License.txt in the project root for license information.
  *--------------------------------------------------------------------------------------------*/
 
-import { getWindowId, onDidUnregisterWindow } from './dom.js';
+import { createElement, getWindowId, onDidUnregisterWindow } from './dom.js';
 import { Emitter, Event } from '../common/event.js';
 import { Disposable, markAsSingleton } from '../common/lifecycle.js';
 
@@ -67,7 +67,7 @@ class PixelRatioMonitorImpl extends Disposable implements IPixelRatioMonitor {
 	}
 
 	private _getPixelRatio(targetWindow: Window): number {
-		const ctx: any = document.createElement('canvas').getContext('2d');
+		const ctx: any = createElement('canvas').getContext('2d');
 		const dpr = targetWindow.devicePixelRatio || 1;
 		const bsr = ctx.webkitBackingStorePixelRatio ||
 			ctx.mozBackingStorePixelRatio ||
diff --git a/src/vs/base/browser/ui/actionbar/actionViewItems.ts b/src/vs/base/browser/ui/actionbar/actionViewItems.ts
index 84987a24288..4eb61a6e531 100644
--- a/src/vs/base/browser/ui/actionbar/actionViewItems.ts
+++ b/src/vs/base/browser/ui/actionbar/actionViewItems.ts
@@ -5,7 +5,7 @@
 
 import { isFirefox } from '../../browser.js';
 import { DataTransfers } from '../../dnd.js';
-import { addDisposableListener, EventHelper, EventLike, EventType } from '../../dom.js';
+import { addDisposableListener, createElement, EventHelper, EventLike, EventType } from '../../dom.js';
 import { EventType as TouchEventType, Gesture } from '../../touch.js';
 import { IActionViewItem } from './actionbar.js';
 import { IContextViewProvider } from '../contextview/contextview.js';
@@ -294,7 +294,7 @@ export class ActionViewItem extends BaseActionViewItem {
 		super.render(container);
 		types.assertType(this.element);
 
-		const label = document.createElement('a');
+		const label = createElement('a');
 		label.classList.add('action-label');
 		label.setAttribute('role', this.getDefaultAriaRole());
 
@@ -302,7 +302,7 @@ export class ActionViewItem extends BaseActionViewItem {
 		this.element.appendChild(label);
 
 		if (this.options.label && this.options.keybinding && !this.options.keybindingNotRenderedWithLabel) {
-			const kbLabel = document.createElement('span');
+			const kbLabel = createElement('span');
 			kbLabel.classList.add('keybinding');
 			kbLabel.textContent = this.options.keybinding;
 			this.element.appendChild(kbLabel);
diff --git a/src/vs/base/browser/ui/actionbar/actionbar.ts b/src/vs/base/browser/ui/actionbar/actionbar.ts
index 6fd18bebd31..3a6baef50f5 100644
--- a/src/vs/base/browser/ui/actionbar/actionbar.ts
+++ b/src/vs/base/browser/ui/actionbar/actionbar.ts
@@ -14,6 +14,7 @@ import { KeyCode, KeyMod } from '../../../common/keyCodes.js';
 import { Disposable, DisposableMap, DisposableStore, dispose, IDisposable } from '../../../common/lifecycle.js';
 import * as types from '../../../common/types.js';
 import './actionbar.css';
+import { createElement } from '../../dom.js';
 
 export interface IActionViewItem extends IDisposable {
 	action: IAction;
@@ -133,7 +134,7 @@ export class ActionBar extends Disposable implements IActionRunner {
 		this.viewItems = [];
 		this.focusedItem = undefined;
 
-		this.domNode = document.createElement('div');
+		this.domNode = createElement('div');
 		this.domNode.className = 'monaco-action-bar';
 
 		let previousKeys: KeyCode[];
@@ -218,7 +219,7 @@ export class ActionBar extends Disposable implements IActionRunner {
 
 		this._register(this.focusTracker.onDidFocus(() => this.updateFocusedItem()));
 
-		this.actionsList = document.createElement('ul');
+		this.actionsList = createElement('ul');
 		this.actionsList.className = 'actions-container';
 		if (this.options.highlightToggledItems) {
 			this.actionsList.classList.add('highlight-toggled');
@@ -352,7 +353,7 @@ export class ActionBar extends Disposable implements IActionRunner {
 		let index = types.isNumber(options.index) ? options.index : null;
 
 		actions.forEach((action: IAction) => {
-			const actionViewItemElement = document.createElement('li');
+			const actionViewItemElement = createElement('li');
 			actionViewItemElement.className = 'action-item';
 			actionViewItemElement.setAttribute('role', 'presentation');
 
diff --git a/src/vs/base/browser/ui/aria/aria.ts b/src/vs/base/browser/ui/aria/aria.ts
index f4f9ef9688a..cb5649622b9 100644
--- a/src/vs/base/browser/ui/aria/aria.ts
+++ b/src/vs/base/browser/ui/aria/aria.ts
@@ -14,11 +14,11 @@ let alertContainer2: HTMLElement;
 let statusContainer: HTMLElement;
 let statusContainer2: HTMLElement;
 export function setARIAContainer(parent: HTMLElement) {
-	ariaContainer = document.createElement('div');
+	ariaContainer = dom.createElement('div');
 	ariaContainer.className = 'monaco-aria-container';
 
 	const createAlertContainer = () => {
-		const element = document.createElement('div');
+		const element = dom.createElement('div');
 		element.className = 'monaco-alert';
 		element.setAttribute('role', 'alert');
 		element.setAttribute('aria-atomic', 'true');
@@ -29,7 +29,7 @@ export function setARIAContainer(parent: HTMLElement) {
 	alertContainer2 = createAlertContainer();
 
 	const createStatusContainer = () => {
-		const element = document.createElement('div');
+		const element = dom.createElement('div');
 		element.className = 'monaco-status';
 		element.setAttribute('aria-live', 'polite');
 		element.setAttribute('aria-atomic', 'true');
diff --git a/src/vs/base/browser/ui/breadcrumbs/breadcrumbsWidget.ts b/src/vs/base/browser/ui/breadcrumbs/breadcrumbsWidget.ts
index 01e522130a9..f6e5d610226 100644
--- a/src/vs/base/browser/ui/breadcrumbs/breadcrumbsWidget.ts
+++ b/src/vs/base/browser/ui/breadcrumbs/breadcrumbsWidget.ts
@@ -68,7 +68,7 @@ export class BreadcrumbsWidget {
 		separatorIcon: ThemeIcon,
 		styles: IBreadcrumbsWidgetStyles
 	) {
-		this._domNode = document.createElement('div');
+		this._domNode = dom.createElement('div');
 		this._domNode.className = 'monaco-breadcrumbs';
 		this._domNode.tabIndex = 0;
 		this._domNode.setAttribute('role', 'list');
@@ -313,7 +313,7 @@ export class BreadcrumbsWidget {
 		// case b: more items -> render them
 		for (; start < this._items.length; start++) {
 			const item = this._items[start];
-			const node = this._freeNodes.length > 0 ? this._freeNodes.pop() : document.createElement('div');
+			const node = this._freeNodes.length > 0 ? this._freeNodes.pop() : dom.createElement('div');
 			if (node) {
 				this._renderItem(item, node);
 				this._domNode.appendChild(node);
diff --git a/src/vs/base/browser/ui/button/button.ts b/src/vs/base/browser/ui/button/button.ts
index f8add4a6aab..28f22e0448f 100644
--- a/src/vs/base/browser/ui/button/button.ts
+++ b/src/vs/base/browser/ui/button/button.ts
@@ -4,7 +4,7 @@
  *--------------------------------------------------------------------------------------------*/
 
 import { IContextMenuProvider } from '../../contextmenu.js';
-import { addDisposableListener, EventHelper, EventType, IFocusTracker, isActiveElement, reset, trackFocus, $ } from '../../dom.js';
+import { addDisposableListener, EventHelper, EventType, IFocusTracker, isActiveElement, reset, trackFocus, $, createElement } from '../../dom.js';
 import dompurify from '../../dompurify/dompurify.js';
 import { StandardKeyboardEvent } from '../../keyboardEvent.js';
 import { renderMarkdown, renderStringAsPlaintext } from '../../markdownRenderer.js';
@@ -100,7 +100,7 @@ export class Button extends Disposable implements IButton {
 
 		this.options = options;
 
-		this._element = document.createElement('a');
+		this._element = createElement('a');
 		this._element.classList.add('monaco-button');
 		this._element.tabIndex = 0;
 		this._element.setAttribute('role', 'button');
@@ -113,11 +113,11 @@ export class Button extends Disposable implements IButton {
 		this._element.style.backgroundColor = background || '';
 
 		if (options.supportShortLabel) {
-			this._labelShortElement = document.createElement('div');
+			this._labelShortElement = createElement('div');
 			this._labelShortElement.classList.add('monaco-button-label-short');
 			this._element.appendChild(this._labelShortElement);
 
-			this._labelElement = document.createElement('div');
+			this._labelElement = createElement('div');
 			this._labelElement.classList.add('monaco-button-label');
 			this._element.appendChild(this._labelElement);
 
@@ -197,7 +197,7 @@ export class Button extends Disposable implements IButton {
 				}
 
 				// Convert string segments to <span> nodes
-				const node = document.createElement('span');
+				const node = createElement('span');
 				node.textContent = segment;
 				elements.push(node);
 			} else {
@@ -377,7 +377,7 @@ export class ButtonWithDropdown extends Disposable implements IButton {
 	constructor(container: HTMLElement, options: IButtonWithDropdownOptions) {
 		super();
 
-		this.element = document.createElement('div');
+		this.element = createElement('div');
 		this.element.classList.add('monaco-button-dropdown');
 		container.appendChild(this.element);
 
@@ -389,10 +389,10 @@ export class ButtonWithDropdown extends Disposable implements IButton {
 		this._register(this.primaryButton.onDidClick(e => this._onDidClick.fire(e)));
 		this.action = this._register(new Action('primaryAction', renderStringAsPlaintext(this.primaryButton.label), undefined, true, async () => this._onDidClick.fire(undefined)));
 
-		this.separatorContainer = document.createElement('div');
+		this.separatorContainer = createElement('div');
 		this.separatorContainer.classList.add('monaco-button-dropdown-separator');
 
-		this.separator = document.createElement('div');
+		this.separator = createElement('div');
 		this.separatorContainer.appendChild(this.separator);
 		this.element.appendChild(this.separatorContainer);
 
@@ -474,11 +474,11 @@ export class ButtonWithDescription implements IButtonWithDescription {
 	private _descriptionElement: HTMLElement;
 
 	constructor(container: HTMLElement, private readonly options: IButtonOptions) {
-		this._element = document.createElement('div');
+		this._element = createElement('div');
 		this._element.classList.add('monaco-description-button');
 		this._button = new Button(this._element, options);
 
-		this._descriptionElement = document.createElement('div');
+		this._descriptionElement = createElement('div');
 		this._descriptionElement.classList.add('monaco-button-description');
 		this._element.appendChild(this._descriptionElement);
 
diff --git a/src/vs/base/browser/ui/contextview/contextview.ts b/src/vs/base/browser/ui/contextview/contextview.ts
index 356d813e34b..2bd2238a879 100644
--- a/src/vs/base/browser/ui/contextview/contextview.ts
+++ b/src/vs/base/browser/ui/contextview/contextview.ts
@@ -188,7 +188,7 @@ export class ContextView extends Disposable {
 				this.shadowRootHostElement = DOM.$('.shadow-root-host');
 				this.container.appendChild(this.shadowRootHostElement);
 				this.shadowRoot = this.shadowRootHostElement.attachShadow({ mode: 'open' });
-				const style = document.createElement('style');
+				const style = DOM.createElement('style');
 				style.textContent = SHADOW_ROOT_CSS;
 				this.shadowRoot.appendChild(style);
 				this.shadowRoot.appendChild(this.view);
diff --git a/src/vs/base/browser/ui/findinput/findInput.ts b/src/vs/base/browser/ui/findinput/findInput.ts
index 5c05c7cb755..4a2c63a69a3 100644
--- a/src/vs/base/browser/ui/findinput/findInput.ts
+++ b/src/vs/base/browser/ui/findinput/findInput.ts
@@ -98,7 +98,7 @@ export class FindInput extends Widget {
 		const flexibleWidth = !!options.flexibleWidth;
 		const flexibleMaxHeight = options.flexibleMaxHeight;
 
-		this.domNode = document.createElement('div');
+		this.domNode = dom.createElement('div');
 		this.domNode.classList.add('monaco-findInput');
 
 		this.inputBox = this._register(new HistoryInputBox(this.domNode, contextViewProvider, {
@@ -196,7 +196,7 @@ export class FindInput extends Widget {
 			});
 		}
 
-		this.controls = document.createElement('div');
+		this.controls = dom.createElement('div');
 		this.controls.className = 'controls';
 		this.controls.style.display = this.showCommonFindToggles ? '' : 'none';
 		if (this.caseSensitive) {
diff --git a/src/vs/base/browser/ui/findinput/replaceInput.ts b/src/vs/base/browser/ui/findinput/replaceInput.ts
index 73cc5e71a50..c0103461dff 100644
--- a/src/vs/base/browser/ui/findinput/replaceInput.ts
+++ b/src/vs/base/browser/ui/findinput/replaceInput.ts
@@ -101,7 +101,7 @@ export class ReplaceInput extends Widget {
 		const flexibleWidth = !!options.flexibleWidth;
 		const flexibleMaxHeight = options.flexibleMaxHeight;
 
-		this.domNode = document.createElement('div');
+		this.domNode = dom.createElement('div');
 		this.domNode.classList.add('monaco-findInput');
 
 		this.inputBox = this._register(new HistoryInputBox(this.domNode, this.contextViewProvider, {
@@ -170,7 +170,7 @@ export class ReplaceInput extends Widget {
 		});
 
 
-		const controls = document.createElement('div');
+		const controls = dom.createElement('div');
 		controls.className = 'controls';
 		controls.style.display = this._showOptionButtons ? 'block' : 'none';
 		controls.appendChild(this.preserveCase.domNode);
diff --git a/src/vs/base/browser/ui/hover/hoverWidget.ts b/src/vs/base/browser/ui/hover/hoverWidget.ts
index c2f976a8ce8..8cfe0ac9585 100644
--- a/src/vs/base/browser/ui/hover/hoverWidget.ts
+++ b/src/vs/base/browser/ui/hover/hoverWidget.ts
@@ -29,13 +29,13 @@ export class HoverWidget extends Disposable {
 	constructor(fadeIn: boolean) {
 		super();
 
-		this.containerDomNode = document.createElement('div');
+		this.containerDomNode = dom.createElement('div');
 		this.containerDomNode.className = 'monaco-hover';
 		this.containerDomNode.classList.toggle('fade-in', !!fadeIn);
 		this.containerDomNode.tabIndex = 0;
 		this.containerDomNode.setAttribute('role', 'tooltip');
 
-		this.contentsDomNode = document.createElement('div');
+		this.contentsDomNode = dom.createElement('div');
 		this.contentsDomNode.className = 'monaco-hover-content';
 
 		this.scrollbar = this._register(new DomScrollableElement(this.contentsDomNode, {
diff --git a/src/vs/base/browser/ui/list/listView.ts b/src/vs/base/browser/ui/list/listView.ts
index 7fc6ea246b6..89cb4dadddf 100644
--- a/src/vs/base/browser/ui/list/listView.ts
+++ b/src/vs/base/browser/ui/list/listView.ts
@@ -4,7 +4,7 @@
  *--------------------------------------------------------------------------------------------*/
 
 import { DataTransfers, IDragAndDropData } from '../../dnd.js';
-import { addDisposableListener, animate, Dimension, getActiveElement, getContentHeight, getContentWidth, getDocument, getTopLeftOffset, getWindow, isAncestor, isHTMLElement, isSVGElement, scheduleAtNextAnimationFrame } from '../../dom.js';
+import { addDisposableListener, animate, createElement, Dimension, getActiveElement, getContentHeight, getContentWidth, getDocument, getTopLeftOffset, getWindow, isAncestor, isHTMLElement, isSVGElement, scheduleAtNextAnimationFrame } from '../../dom.js';
 import { DomEmitter } from '../../event.js';
 import { IMouseWheelEvent } from '../../mouseEvent.js';
 import { EventType as TouchEventType, Gesture, GestureEvent } from '../../touch.js';
@@ -394,7 +394,7 @@ export class ListView<T> implements IListView<T> {
 		this.lastRenderTop = 0;
 		this.lastRenderHeight = 0;
 
-		this.domNode = document.createElement('div');
+		this.domNode = createElement('div');
 		this.domNode.className = 'monaco-list';
 
 		this.domNode.classList.add(this.domId);
@@ -409,7 +409,7 @@ export class ListView<T> implements IListView<T> {
 
 		this.accessibilityProvider = new ListViewAccessibilityProvider(options.accessibilityProvider);
 
-		this.rowsContainer = document.createElement('div');
+		this.rowsContainer = createElement('div');
 		this.rowsContainer.className = 'monaco-list-rows';
 
 		const transformOptimization = options.transformOptimization ?? DefaultOptions.transformOptimization;
diff --git a/src/vs/base/browser/ui/menu/menu.ts b/src/vs/base/browser/ui/menu/menu.ts
index eb6814c42f4..e174d04e3fa 100644
--- a/src/vs/base/browser/ui/menu/menu.ts
+++ b/src/vs/base/browser/ui/menu/menu.ts
@@ -5,7 +5,7 @@
 
 import { isFirefox } from '../../browser.js';
 import { EventType as TouchEventType, Gesture } from '../../touch.js';
-import { $, addDisposableListener, append, clearNode, Dimension, EventHelper, EventLike, EventType, getActiveElement, getWindow, IDomNodePagePosition, isAncestor, isInShadowDOM } from '../../dom.js';
+import { $, addDisposableListener, append, clearNode, createElement, Dimension, EventHelper, EventLike, EventType, getActiveElement, getWindow, IDomNodePagePosition, isAncestor, isInShadowDOM } from '../../dom.js';
 import { createStyleSheet } from '../../domStylesheets.js';
 import { StandardKeyboardEvent } from '../../keyboardEvent.js';
 import { StandardMouseEvent } from '../../mouseEvent.js';
@@ -105,7 +105,7 @@ export class Menu extends ActionBar {
 	constructor(container: HTMLElement, actions: ReadonlyArray<IAction>, options: IMenuOptions, private readonly menuStyles: IMenuStyles) {
 		container.classList.add('monaco-menu-container');
 		container.setAttribute('role', 'presentation');
-		const menuElement = document.createElement('div');
+		const menuElement = createElement('div');
 		menuElement.classList.add('monaco-menu');
 		menuElement.setAttribute('role', 'presentation');
 
diff --git a/src/vs/base/browser/ui/progressbar/progressbar.ts b/src/vs/base/browser/ui/progressbar/progressbar.ts
index 9b5b2c7c2ba..597c9d93161 100644
--- a/src/vs/base/browser/ui/progressbar/progressbar.ts
+++ b/src/vs/base/browser/ui/progressbar/progressbar.ts
@@ -3,7 +3,7 @@
  *  Licensed under the MIT License. See License.txt in the project root for license information.
  *--------------------------------------------------------------------------------------------*/
 
-import { hide, show } from '../../dom.js';
+import { createElement, hide, show } from '../../dom.js';
 import { getProgressAcccessibilitySignalScheduler } from './progressAccessibilitySignal.js';
 import { RunOnceScheduler } from '../../../common/async.js';
 import { Disposable, IDisposable, MutableDisposable } from '../../../common/lifecycle.js';
@@ -64,13 +64,13 @@ export class ProgressBar extends Disposable {
 	}
 
 	private create(container: HTMLElement, options?: IProgressBarOptions): void {
-		this.element = document.createElement('div');
+		this.element = createElement('div');
 		this.element.classList.add('monaco-progress-container');
 		this.element.setAttribute('role', 'progressbar');
 		this.element.setAttribute('aria-valuemin', '0');
 		container.appendChild(this.element);
 
-		this.bit = document.createElement('div');
+		this.bit = createElement('div');
 		this.bit.classList.add('progress-bit');
 		this.bit.style.backgroundColor = options?.progressBarBackground || '#0E70C0';
 		this.element.appendChild(this.bit);
diff --git a/src/vs/base/browser/ui/resizable/resizable.ts b/src/vs/base/browser/ui/resizable/resizable.ts
index 15c3d4425d1..6d1c85c3067 100644
--- a/src/vs/base/browser/ui/resizable/resizable.ts
+++ b/src/vs/base/browser/ui/resizable/resizable.ts
@@ -3,7 +3,7 @@
  *  Licensed under the MIT License. See License.txt in the project root for license information.
  *--------------------------------------------------------------------------------------------*/
 
-import { Dimension } from '../../dom.js';
+import { createElement, Dimension } from '../../dom.js';
 import { Orientation, OrthogonalEdge, Sash, SashState } from '../sash/sash.js';
 import { Emitter, Event } from '../../../common/event.js';
 import { DisposableStore } from '../../../common/lifecycle.js';
@@ -40,7 +40,7 @@ export class ResizableHTMLElement {
 	private _preferredSize?: Dimension;
 
 	constructor() {
-		this.domNode = document.createElement('div');
+		this.domNode = createElement('div');
 		this._eastSash = new Sash(this.domNode, { getVerticalSashLeft: () => this._size.width }, { orientation: Orientation.VERTICAL });
 		this._westSash = new Sash(this.domNode, { getVerticalSashLeft: () => 0 }, { orientation: Orientation.VERTICAL });
 		this._northSash = new Sash(this.domNode, { getHorizontalSashTop: () => 0 }, { orientation: Orientation.HORIZONTAL, orthogonalEdge: OrthogonalEdge.North });
diff --git a/src/vs/base/browser/ui/scrollbar/abstractScrollbar.ts b/src/vs/base/browser/ui/scrollbar/abstractScrollbar.ts
index 0f667f6270d..d33a4fcdb43 100644
--- a/src/vs/base/browser/ui/scrollbar/abstractScrollbar.ts
+++ b/src/vs/base/browser/ui/scrollbar/abstractScrollbar.ts
@@ -67,7 +67,7 @@ export abstract class AbstractScrollbar extends Widget {
 		this._visibilityController.setIsNeeded(this._scrollbarState.isNeeded());
 		this._pointerMoveMonitor = this._register(new GlobalPointerMoveMonitor());
 		this._shouldRender = true;
-		this.domNode = createFastDomNode(document.createElement('div'));
+		this.domNode = createFastDomNode(dom.createElement('div'));
 		this.domNode.setAttribute('role', 'presentation');
 		this.domNode.setAttribute('aria-hidden', 'true');
 
@@ -92,7 +92,7 @@ export abstract class AbstractScrollbar extends Widget {
 	 * Creates the slider dom node, adds it to the container & hooks up the events
 	 */
 	protected _createSlider(top: number, left: number, width: number | undefined, height: number | undefined): void {
-		this.slider = createFastDomNode(document.createElement('div'));
+		this.slider = createFastDomNode(dom.createElement('div'));
 		this.slider.setClassName('slider');
 		this.slider.setPosition('absolute');
 		this.slider.setTop(top);
@@ -233,7 +233,7 @@ export abstract class AbstractScrollbar extends Widget {
 	}
 
 	private _sliderPointerDown(e: PointerEvent): void {
-		if (!e.target || !(e.target instanceof Element)) {
+		if (!e.target || !dom.isElement(e.target)) {
 			return;
 		}
 		const initialPointerPosition = this._sliderPointerPosition(e);
diff --git a/src/vs/base/browser/ui/scrollbar/scrollableElement.ts b/src/vs/base/browser/ui/scrollbar/scrollableElement.ts
index 3e32a3c313f..71f95484a8d 100644
--- a/src/vs/base/browser/ui/scrollbar/scrollableElement.ts
+++ b/src/vs/base/browser/ui/scrollbar/scrollableElement.ts
@@ -224,7 +224,7 @@ export abstract class AbstractScrollableElement extends Widget {
 		this._verticalScrollbar = this._register(new VerticalScrollbar(this._scrollable, this._options, scrollbarHost));
 		this._horizontalScrollbar = this._register(new HorizontalScrollbar(this._scrollable, this._options, scrollbarHost));
 
-		this._domNode = document.createElement('div');
+		this._domNode = dom.createElement('div');
 		this._domNode.className = 'monaco-scrollable-element ' + this._options.className;
 		this._domNode.setAttribute('role', 'presentation');
 		this._domNode.style.position = 'relative';
@@ -234,15 +234,15 @@ export abstract class AbstractScrollableElement extends Widget {
 		this._domNode.appendChild(this._verticalScrollbar.domNode.domNode);
 
 		if (this._options.useShadows) {
-			this._leftShadowDomNode = createFastDomNode(document.createElement('div'));
+			this._leftShadowDomNode = createFastDomNode(dom.createElement('div'));
 			this._leftShadowDomNode.setClassName('shadow');
 			this._domNode.appendChild(this._leftShadowDomNode.domNode);
 
-			this._topShadowDomNode = createFastDomNode(document.createElement('div'));
+			this._topShadowDomNode = createFastDomNode(dom.createElement('div'));
 			this._topShadowDomNode.setClassName('shadow');
 			this._domNode.appendChild(this._topShadowDomNode.domNode);
 
-			this._topLeftShadowDomNode = createFastDomNode(document.createElement('div'));
+			this._topLeftShadowDomNode = createFastDomNode(dom.createElement('div'));
 			this._topLeftShadowDomNode.setClassName('shadow');
 			this._domNode.appendChild(this._topLeftShadowDomNode.domNode);
 		} else {
diff --git a/src/vs/base/browser/ui/scrollbar/scrollbarArrow.ts b/src/vs/base/browser/ui/scrollbar/scrollbarArrow.ts
index f5b7f333ba5..e592da82707 100644
--- a/src/vs/base/browser/ui/scrollbar/scrollbarArrow.ts
+++ b/src/vs/base/browser/ui/scrollbar/scrollbarArrow.ts
@@ -41,7 +41,7 @@ export class ScrollbarArrow extends Widget {
 		super();
 		this._onActivate = opts.onActivate;
 
-		this.bgDomNode = document.createElement('div');
+		this.bgDomNode = dom.createElement('div');
 		this.bgDomNode.className = 'arrow-background';
 		this.bgDomNode.style.position = 'absolute';
 		this.bgDomNode.style.width = opts.bgWidth + 'px';
@@ -59,7 +59,7 @@ export class ScrollbarArrow extends Widget {
 			this.bgDomNode.style.right = '0px';
 		}
 
-		this.domNode = document.createElement('div');
+		this.domNode = dom.createElement('div');
 		this.domNode.className = opts.className;
 		this.domNode.classList.add(...ThemeIcon.asClassNameArray(opts.icon));
 
@@ -88,7 +88,7 @@ export class ScrollbarArrow extends Widget {
 	}
 
 	private _arrowPointerDown(e: PointerEvent): void {
-		if (!e.target || !(e.target instanceof Element)) {
+		if (!e.target || !dom.isElement(e.target)) {
 			return;
 		}
 		const scheduleRepeater = () => {
diff --git a/src/vs/base/browser/ui/selectBox/selectBoxCustom.ts b/src/vs/base/browser/ui/selectBox/selectBoxCustom.ts
index 9ccbafa594e..f611809eb03 100644
--- a/src/vs/base/browser/ui/selectBox/selectBoxCustom.ts
+++ b/src/vs/base/browser/ui/selectBox/selectBoxCustom.ts
@@ -124,7 +124,7 @@ export class SelectBoxList extends Disposable implements ISelectBoxDelegate, ILi
 			this.selectBoxOptions.minBottomMargin = 0;
 		}
 
-		this.selectElement = document.createElement('select');
+		this.selectElement = dom.createElement('select');
 
 		// Use custom CSS vars for padding calculation
 		this.selectElement.className = 'monaco-select-box monaco-select-box-dropdown-padding';
@@ -185,7 +185,7 @@ export class SelectBoxList extends Disposable implements ISelectBoxDelegate, ILi
 		// Create span flex box item/div we can measure and control
 		const widthControlOuterDiv = dom.append(this.selectDropDownContainer, $('.select-box-dropdown-container-width-control'));
 		const widthControlInnerDiv = dom.append(widthControlOuterDiv, $('.width-control-div'));
-		this.widthControlElement = document.createElement('span');
+		this.widthControlElement = dom.createElement('span');
 		this.widthControlElement.className = 'option-text-width-control';
 		dom.append(widthControlInnerDiv, this.widthControlElement);
 
@@ -439,7 +439,7 @@ export class SelectBoxList extends Disposable implements ISelectBoxDelegate, ILi
 	}
 
 	private createOption(value: string, index: number, disabled?: boolean): HTMLOptionElement {
-		const option = document.createElement('option');
+		const option = dom.createElement('option');
 		option.value = value;
 		option.text = value;
 		option.disabled = !!disabled;
diff --git a/src/vs/base/browser/ui/selectBox/selectBoxNative.ts b/src/vs/base/browser/ui/selectBox/selectBoxNative.ts
index 9eebae7dbb1..0b85d0c168c 100644
--- a/src/vs/base/browser/ui/selectBox/selectBoxNative.ts
+++ b/src/vs/base/browser/ui/selectBox/selectBoxNative.ts
@@ -27,7 +27,7 @@ export class SelectBoxNative extends Disposable implements ISelectBoxDelegate {
 
 		this.options = [];
 
-		this.selectElement = document.createElement('select');
+		this.selectElement = dom.createElement('select');
 
 		this.selectElement.className = 'monaco-select-box';
 
@@ -180,7 +180,7 @@ export class SelectBoxNative extends Disposable implements ISelectBoxDelegate {
 	}
 
 	private createOption(value: string, index: number, disabled?: boolean): HTMLOptionElement {
-		const option = document.createElement('option');
+		const option = dom.createElement('option');
 		option.value = value;
 		option.text = value;
 		option.disabled = !!disabled;
diff --git a/src/vs/base/browser/ui/splitview/splitview.ts b/src/vs/base/browser/ui/splitview/splitview.ts
index 0da8fa62431..fbeeb46868d 100644
--- a/src/vs/base/browser/ui/splitview/splitview.ts
+++ b/src/vs/base/browser/ui/splitview/splitview.ts
@@ -3,7 +3,7 @@
  *  Licensed under the MIT License. See License.txt in the project root for license information.
  *--------------------------------------------------------------------------------------------*/
 
-import { $, addDisposableListener, append, getRootContainer, getWindow, scheduleAtNextAnimationFrame } from '../../dom.js';
+import { $, addDisposableListener, append, createElement, getRootContainer, getWindow, scheduleAtNextAnimationFrame } from '../../dom.js';
 import { DomEmitter } from '../../event.js';
 import { ISashEvent as IBaseSashEvent, Orientation, Sash, SashState } from '../sash/sash.js';
 import { SmoothScrollableElement } from '../scrollbar/scrollableElement.js';
@@ -573,7 +573,7 @@ export class SplitView<TLayoutContext = undefined, TView extends IView<TLayoutCo
 		this.proportionalLayout = options.proportionalLayout ?? true;
 		this.getSashOrthogonalSize = options.getSashOrthogonalSize;
 
-		this.el = document.createElement('div');
+		this.el = createElement('div');
 		this.el.classList.add('monaco-split-view2');
 		this.el.classList.add(this.orientation === Orientation.VERTICAL ? 'vertical' : 'horizontal');
 		container.appendChild(this.el);
diff --git a/src/vs/base/browser/ui/toggle/toggle.ts b/src/vs/base/browser/ui/toggle/toggle.ts
index 287c44c94d1..50af50e4bc4 100644
--- a/src/vs/base/browser/ui/toggle/toggle.ts
+++ b/src/vs/base/browser/ui/toggle/toggle.ts
@@ -8,7 +8,7 @@ import { Codicon } from '../../../common/codicons.js';
 import { Emitter, Event } from '../../../common/event.js';
 import { KeyCode } from '../../../common/keyCodes.js';
 import { ThemeIcon } from '../../../common/themables.js';
-import { $, addDisposableListener, EventType, isActiveElement } from '../../dom.js';
+import { $, addDisposableListener, createElement, EventType, isActiveElement } from '../../dom.js';
 import { IKeyboardEvent } from '../../keyboardEvent.js';
 import { BaseActionViewItem, IActionViewItemOptions } from '../actionbar/actionViewItems.js';
 import type { IManagedHover } from '../hover/hover.js';
@@ -152,7 +152,7 @@ export class Toggle extends Widget {
 			classes.push('checked');
 		}
 
-		this.domNode = document.createElement('div');
+		this.domNode = createElement('div');
 		if (this._opts.hoverDelegate?.showNativeHover) {
 			this.domNode.title = this._opts.title;
 		} else {
diff --git a/src/vs/base/browser/ui/toolbar/toolbar.ts b/src/vs/base/browser/ui/toolbar/toolbar.ts
index 1c2be8cc6a8..145d822ae1f 100644
--- a/src/vs/base/browser/ui/toolbar/toolbar.ts
+++ b/src/vs/base/browser/ui/toolbar/toolbar.ts
@@ -17,6 +17,7 @@ import './toolbar.css';
 import * as nls from '../../../../nls.js';
 import { IHoverDelegate } from '../hover/hoverDelegate.js';
 import { createInstantHoverDelegate } from '../hover/hoverDelegateFactory.js';
+import { createElement } from '../../dom.js';
 
 export interface IToolBarOptions {
 	orientation?: ActionsOrientation;
@@ -72,7 +73,7 @@ export class ToolBar extends Disposable {
 
 		this.toggleMenuAction = this._register(new ToggleMenuAction(() => this.toggleMenuActionViewItem?.show(), options.toggleMenuTitle));
 
-		this.element = document.createElement('div');
+		this.element = createElement('div');
 		this.element.className = 'monaco-toolbar';
 		container.appendChild(this.element);
 
diff --git a/src/vs/base/browser/ui/tree/abstractTree.ts b/src/vs/base/browser/ui/tree/abstractTree.ts
index 17272804159..8f1097c8da6 100644
--- a/src/vs/base/browser/ui/tree/abstractTree.ts
+++ b/src/vs/base/browser/ui/tree/abstractTree.ts
@@ -4,7 +4,7 @@
  *--------------------------------------------------------------------------------------------*/
 
 import { IDragAndDropData } from '../../dnd.js';
-import { $, append, clearNode, h, hasParentWithClass, isActiveElement, isKeyboardEvent, addDisposableListener, isEditableElement } from '../../dom.js';
+import { $, append, clearNode, h, hasParentWithClass, isActiveElement, isKeyboardEvent, addDisposableListener, isEditableElement, createElement } from '../../dom.js';
 import { createStyleSheet } from '../../domStylesheets.js';
 import { asCssValueWithDefault } from '../../cssValue.js';
 import { DomEmitter } from '../../event.js';
@@ -1754,7 +1754,7 @@ class StickyScrollWidget<T, TFilterData, TRef> implements IDisposable {
 		const nodeIndex = stickyNode.startIndex;
 
 		// Sticky element container
-		const stickyElement = document.createElement('div');
+		const stickyElement = createElement('div');
 		stickyElement.style.top = `${stickyNode.position}px`;
 
 		if (this.tree.options.setRowHeight !== false) {
diff --git a/src/vs/base/test/browser/ui/grid/util.ts b/src/vs/base/test/browser/ui/grid/util.ts
index eeb080db29a..ae9ffb849d9 100644
--- a/src/vs/base/test/browser/ui/grid/util.ts
+++ b/src/vs/base/test/browser/ui/grid/util.ts
@@ -7,6 +7,7 @@ import assert from 'assert';
 import { IView } from '../../../../browser/ui/grid/grid.js';
 import { GridNode, isGridBranchNode } from '../../../../browser/ui/grid/gridview.js';
 import { Emitter, Event } from '../../../../common/event.js';
+import { createElement } from '../../../../browser/dom.js';
 
 export class TestView implements IView {
 
@@ -25,7 +26,7 @@ export class TestView implements IView {
 	get maximumHeight(): number { return this._maximumHeight; }
 	set maximumHeight(size: number) { this._maximumHeight = size; this._onDidChange.fire(undefined); }
 
-	private _element: HTMLElement = document.createElement('div');
+	private _element: HTMLElement = createElement('div');
 	get element(): HTMLElement { this._onDidGetElement.fire(); return this._element; }
 
 	private readonly _onDidGetElement = new Emitter<void>();
diff --git a/src/vs/editor/browser/config/charWidthReader.ts b/src/vs/editor/browser/config/charWidthReader.ts
index 98846a73d0b..09936353b97 100644
--- a/src/vs/editor/browser/config/charWidthReader.ts
+++ b/src/vs/editor/browser/config/charWidthReader.ts
@@ -5,6 +5,7 @@
 
 import { applyFontInfo } from './domFontInfo.js';
 import { BareFontInfo } from '../../common/config/fontInfo.js';
+import { createElement } from '../../../base/browser/dom.js';
 
 export const enum CharWidthRequestType {
 	Regular = 0,
@@ -63,21 +64,21 @@ class DomCharWidthReader {
 	}
 
 	private _createDomElements(): void {
-		const container = document.createElement('div');
+		const container = createElement('div');
 		container.style.position = 'absolute';
 		container.style.top = '-50000px';
 		container.style.width = '50000px';
 
-		const regularDomNode = document.createElement('div');
+		const regularDomNode = createElement('div');
 		applyFontInfo(regularDomNode, this._bareFontInfo);
 		container.appendChild(regularDomNode);
 
-		const boldDomNode = document.createElement('div');
+		const boldDomNode = createElement('div');
 		applyFontInfo(boldDomNode, this._bareFontInfo);
 		boldDomNode.style.fontWeight = 'bold';
 		container.appendChild(boldDomNode);
 
-		const italicDomNode = document.createElement('div');
+		const italicDomNode = createElement('div');
 		applyFontInfo(italicDomNode, this._bareFontInfo);
 		italicDomNode.style.fontStyle = 'italic';
 		container.appendChild(italicDomNode);
@@ -96,9 +97,9 @@ class DomCharWidthReader {
 				parent = italicDomNode;
 			}
 
-			parent!.appendChild(document.createElement('br'));
+			parent!.appendChild(createElement('br'));
 
-			const testElement = document.createElement('span');
+			const testElement = createElement('span');
 			DomCharWidthReader._render(testElement, request);
 			parent!.appendChild(testElement);
 
diff --git a/src/vs/editor/browser/controller/editContext/native/debugEditContext.ts b/src/vs/editor/browser/controller/editContext/native/debugEditContext.ts
index 5fa3d47cc1b..09c061e1402 100644
--- a/src/vs/editor/browser/controller/editContext/native/debugEditContext.ts
+++ b/src/vs/editor/browser/controller/editContext/native/debugEditContext.ts
@@ -3,6 +3,7 @@
  *  Licensed under the MIT License. See License.txt in the project root for license information.
  *--------------------------------------------------------------------------------------------*/
 
+import { createElement } from '../../../../../base/browser/dom.js';
 import { EditContext } from './editContextFactory.js';
 
 const COLOR_FOR_CONTROL_BOUNDS = 'blue';
@@ -156,7 +157,7 @@ export class DebugEditContext {
 }
 
 function createDiv(text: string, selectionStart: number, selectionEnd: number) {
-	const ret = document.createElement('div');
+	const ret = createElement('div');
 	ret.className = 'debug-rect-marker';
 	ret.style.position = 'absolute';
 	ret.style.zIndex = '999999999';
@@ -176,7 +177,7 @@ function createDiv(text: string, selectionStart: number, selectionEnd: number) {
 	const beforeNode = document.createTextNode(before);
 	ret.appendChild(beforeNode);
 
-	const selectedNode = document.createElement('span');
+	const selectedNode = createElement('span');
 	selectedNode.style.backgroundColor = 'yellow';
 	selectedNode.appendChild(document.createTextNode(selected));
 
@@ -198,7 +199,7 @@ function createDiv(text: string, selectionStart: number, selectionEnd: number) {
 }
 
 function createRect(rect: DOMRect, color: 'green' | 'blue' | 'red') {
-	const ret = document.createElement('div');
+	const ret = createElement('div');
 	ret.className = 'debug-rect-marker';
 	ret.style.position = 'absolute';
 	ret.style.zIndex = '999999999';
diff --git a/src/vs/editor/browser/controller/editContext/native/nativeEditContext.ts b/src/vs/editor/browser/controller/editContext/native/nativeEditContext.ts
index 3836bdf8e1d..e5e7e2a06eb 100644
--- a/src/vs/editor/browser/controller/editContext/native/nativeEditContext.ts
+++ b/src/vs/editor/browser/controller/editContext/native/nativeEditContext.ts
@@ -5,7 +5,7 @@
 
 import './nativeEditContext.css';
 import { isFirefox } from '../../../../../base/browser/browser.js';
-import { addDisposableListener, getActiveWindow, getWindow, getWindowId } from '../../../../../base/browser/dom.js';
+import { addDisposableListener, createElement, getActiveWindow, getWindow, getWindowId } from '../../../../../base/browser/dom.js';
 import { FastDomNode } from '../../../../../base/browser/fastDomNode.js';
 import { StandardKeyboardEvent } from '../../../../../base/browser/keyboardEvent.js';
 import { KeyCode } from '../../../../../base/common/keyCodes.js';
@@ -84,9 +84,9 @@ export class NativeEditContext extends AbstractEditContext {
 	) {
 		super(context);
 
-		this.domNode = new FastDomNode(document.createElement('div'));
+		this.domNode = new FastDomNode(createElement('div'));
 		this.domNode.setClassName(`native-edit-context`);
-		this._imeTextArea = new FastDomNode(document.createElement('textarea'));
+		this._imeTextArea = new FastDomNode(createElement('textarea'));
 		this._imeTextArea.setClassName(`ime-text-area`);
 		this._imeTextArea.setAttribute('readonly', 'true');
 		this._imeTextArea.setAttribute('tabindex', '-1');
diff --git a/src/vs/editor/browser/controller/editContext/textArea/textAreaEditContext.ts b/src/vs/editor/browser/controller/editContext/textArea/textAreaEditContext.ts
index 6d4a59b01ed..9f7e4462453 100644
--- a/src/vs/editor/browser/controller/editContext/textArea/textAreaEditContext.ts
+++ b/src/vs/editor/browser/controller/editContext/textArea/textAreaEditContext.ts
@@ -40,6 +40,7 @@ import { ariaLabelForScreenReaderContent, ISimpleModel, newlinecount, PagedScree
 import { ClipboardDataToCopy, getDataToCopy } from '../clipboardUtils.js';
 import { _debugComposition, ITypeData, TextAreaState } from './textAreaEditContextState.js';
 import { getMapForWordSeparators, WordCharacterClass } from '../../../../common/core/wordCharacterClassifier.js';
+import { createElement } from '../../../../../base/browser/dom.js';
 
 export interface IVisibleRangeProvider {
 	visibleRangeForPosition(position: Position): HorizontalPosition | null;
@@ -177,7 +178,7 @@ export class TextAreaEditContext extends AbstractEditContext {
 		this._lastRenderPosition = null;
 
 		// Text Area (The focus will always be in the textarea when the cursor is blinking)
-		this.textArea = createFastDomNode(document.createElement('textarea'));
+		this.textArea = createFastDomNode(createElement('textarea'));
 		PartFingerprints.write(this.textArea, PartFingerprint.TextArea);
 		this.textArea.setClassName(`inputarea ${MOUSE_CURSOR_TEXT_CSS_CLASS_NAME}`);
 		this.textArea.setAttribute('wrap', this._textAreaWrapping && !this._visibleTextArea ? 'on' : 'off');
@@ -197,7 +198,7 @@ export class TextAreaEditContext extends AbstractEditContext {
 
 		this._ensureReadOnlyAttribute();
 
-		this.textAreaCover = createFastDomNode(document.createElement('div'));
+		this.textAreaCover = createFastDomNode(createElement('div'));
 		this.textAreaCover.setPosition('absolute');
 
 		overflowGuardContainer.appendChild(this.textArea);
diff --git a/src/vs/editor/browser/controller/mouseTarget.ts b/src/vs/editor/browser/controller/mouseTarget.ts
index a4d56940ba5..64a1f5c76c4 100644
--- a/src/vs/editor/browser/controller/mouseTarget.ts
+++ b/src/vs/editor/browser/controller/mouseTarget.ts
@@ -1169,7 +1169,7 @@ class CharWidthReader {
 
 	private constructor() {
 		this._cache = {};
-		this._canvas = document.createElement('canvas');
+		this._canvas = dom.createElement('canvas');
 	}
 
 	public getCharWidth(char: string, font: string): number {
diff --git a/src/vs/editor/browser/gpu/viewGpuContext.ts b/src/vs/editor/browser/gpu/viewGpuContext.ts
index 953e7c23f7a..1d7005f3911 100644
--- a/src/vs/editor/browser/gpu/viewGpuContext.ts
+++ b/src/vs/editor/browser/gpu/viewGpuContext.ts
@@ -4,7 +4,7 @@
  *--------------------------------------------------------------------------------------------*/
 
 import * as nls from '../../../nls.js';
-import { addDisposableListener, getActiveWindow } from '../../../base/browser/dom.js';
+import { addDisposableListener, createElement, getActiveWindow } from '../../../base/browser/dom.js';
 import { createFastDomNode, type FastDomNode } from '../../../base/browser/fastDomNode.js';
 import { BugIndicatingError } from '../../../base/common/errors.js';
 import { Disposable } from '../../../base/common/lifecycle.js';
@@ -84,7 +84,7 @@ export class ViewGpuContext extends Disposable {
 	) {
 		super();
 
-		this.canvas = createFastDomNode(document.createElement('canvas'));
+		this.canvas = createFastDomNode(createElement('canvas'));
 		this.canvas.setClassName('editorCanvas');
 
 		// Adjust the canvas size to avoid drawing under the scroll bar
diff --git a/src/vs/editor/browser/observableCodeEditor.ts b/src/vs/editor/browser/observableCodeEditor.ts
index cf69c10810f..e5be5561ea2 100644
--- a/src/vs/editor/browser/observableCodeEditor.ts
+++ b/src/vs/editor/browser/observableCodeEditor.ts
@@ -16,6 +16,7 @@ import { IModelDeltaDecoration, ITextModel } from '../common/model.js';
 import { IModelContentChangedEvent } from '../common/textModelEvents.js';
 import { ContentWidgetPositionPreference, ICodeEditor, IContentWidget, IContentWidgetPosition, IEditorMouseEvent, IOverlayWidget, IOverlayWidgetPosition, IPasteEvent } from './editorBrowser.js';
 import { Point } from '../common/core/2d/point.js';
+import { createElement } from '../../base/browser/dom.js';
 
 /**
  * Returns a facade for the code editor that provides observables for various states/events.
@@ -368,7 +369,7 @@ export class ObservableCodeEditor extends Disposable {
 		let pos = position.get();
 		const result = observableValueOpts<Point | null>({ owner: this, debugName: () => `topLeftOfPosition${pos?.toString()}`, equalsFn: equalsIfDefined(Point.equals) }, new Point(0, 0));
 		const contentWidgetId = `observablePositionWidget` + (this._widgetCounter++);
-		const domNode = document.createElement('div');
+		const domNode = createElement('div');
 		const w: IContentWidget = {
 			getDomNode: () => domNode,
 			getPosition: () => {
diff --git a/src/vs/editor/browser/view.ts b/src/vs/editor/browser/view.ts
index ef187061795..214878fd86c 100644
--- a/src/vs/editor/browser/view.ts
+++ b/src/vs/editor/browser/view.ts
@@ -142,7 +142,7 @@ export class View extends ViewEventHandler {
 		this._selections = [new Selection(1, 1, 1, 1)];
 		this._renderAnimationFrame = null;
 
-		this._overflowGuardContainer = createFastDomNode(document.createElement('div'));
+		this._overflowGuardContainer = createFastDomNode(dom.createElement('div'));
 		PartFingerprints.write(this._overflowGuardContainer, PartFingerprint.OverflowGuard);
 		this._overflowGuardContainer.setClassName('overflow-guard');
 
@@ -164,11 +164,11 @@ export class View extends ViewEventHandler {
 		this._viewParts.push(this._editContext);
 
 		// These two dom nodes must be constructed up front, since references are needed in the layout provider (scrolling & co.)
-		this._linesContent = createFastDomNode(document.createElement('div'));
+		this._linesContent = createFastDomNode(dom.createElement('div'));
 		this._linesContent.setClassName('lines-content' + ' monaco-editor-background');
 		this._linesContent.setPosition('absolute');
 
-		this.domNode = createFastDomNode(document.createElement('div'));
+		this.domNode = createFastDomNode(dom.createElement('div'));
 		this.domNode.setClassName(this._getEditorClassName());
 		// Set role 'code' for better screen reader support https://github.com/microsoft/vscode/issues/93438
 		this.domNode.setAttribute('role', 'code');
diff --git a/src/vs/editor/browser/view/domLineBreaksComputer.ts b/src/vs/editor/browser/view/domLineBreaksComputer.ts
index b2efc74cf9f..bd193e3e757 100644
--- a/src/vs/editor/browser/view/domLineBreaksComputer.ts
+++ b/src/vs/editor/browser/view/domLineBreaksComputer.ts
@@ -14,6 +14,7 @@ import { StringBuilder } from '../../common/core/stringBuilder.js';
 import { InjectedTextOptions } from '../../common/model.js';
 import { ILineBreaksComputer, ILineBreaksComputerFactory, ModelLineProjectionData } from '../../common/modelLineProjectionData.js';
 import { LineInjectedText } from '../../common/textModelEvents.js';
+import { createElement } from '../../../base/browser/dom.js';
 
 const ttPolicy = createTrustedTypesPolicy('domLineBreaksComputer', { createHTML: value => value });
 
@@ -71,7 +72,7 @@ function createLineBreaks(targetWindow: Window, requests: string[], fontInfo: Fo
 	const additionalIndentSize = Math.round(tabSize * additionalIndent);
 	const additionalIndentLength = Math.ceil(fontInfo.spaceWidth * additionalIndentSize);
 
-	const containerDomNode = document.createElement('div');
+	const containerDomNode = createElement('div');
 	applyFontInfo(containerDomNode, fontInfo);
 
 	const sb = new StringBuilder(10000);
diff --git a/src/vs/editor/browser/view/viewLayer.ts b/src/vs/editor/browser/view/viewLayer.ts
index 3f1b0905954..d5d513d6256 100644
--- a/src/vs/editor/browser/view/viewLayer.ts
+++ b/src/vs/editor/browser/view/viewLayer.ts
@@ -3,6 +3,7 @@
  *  Licensed under the MIT License. See License.txt in the project root for license information.
  *--------------------------------------------------------------------------------------------*/
 
+import { createElement } from '../../../base/browser/dom.js';
 import { FastDomNode, createFastDomNode } from '../../../base/browser/fastDomNode.js';
 import { createTrustedTypesPolicy } from '../../../base/browser/trustedTypes.js';
 import { BugIndicatingError } from '../../../base/common/errors.js';
@@ -264,7 +265,7 @@ export class VisibleLinesCollection<T extends IVisibleLine> {
 	}
 
 	private _createDomNode(): FastDomNode<HTMLElement> {
-		const domNode = createFastDomNode(document.createElement('div'));
+		const domNode = createFastDomNode(createElement('div'));
 		domNode.setClassName('view-layer');
 		domNode.setPosition('absolute');
 		domNode.domNode.setAttribute('role', 'presentation');
@@ -534,7 +535,7 @@ class ViewLayerRenderer<T extends IVisibleLine> {
 	}
 
 	private _finishRenderingInvalidLines(ctx: IRendererContext<T>, invalidLinesHTML: string | TrustedHTML, wasInvalid: boolean[]): void {
-		const hugeDomNode = document.createElement('div');
+		const hugeDomNode = createElement('div');
 
 		if (ViewLayerRenderer._ttPolicy) {
 			invalidLinesHTML = ViewLayerRenderer._ttPolicy.createHTML(invalidLinesHTML as string);
diff --git a/src/vs/editor/browser/viewParts/blockDecorations/blockDecorations.ts b/src/vs/editor/browser/viewParts/blockDecorations/blockDecorations.ts
index 70fe366c06c..d9b40f4f473 100644
--- a/src/vs/editor/browser/viewParts/blockDecorations/blockDecorations.ts
+++ b/src/vs/editor/browser/viewParts/blockDecorations/blockDecorations.ts
@@ -10,6 +10,7 @@ import { ViewPart } from '../../view/viewPart.js';
 import { EditorOption } from '../../../common/config/editorOptions.js';
 import * as viewEvents from '../../../common/viewEvents.js';
 import { ViewContext } from '../../../common/viewModel/viewContext.js';
+import { createElement } from '../../../../base/browser/dom.js';
 
 export class BlockDecorations extends ViewPart {
 
@@ -23,7 +24,7 @@ export class BlockDecorations extends ViewPart {
 	constructor(context: ViewContext) {
 		super(context);
 
-		this.domNode = createFastDomNode<HTMLElement>(document.createElement('div'));
+		this.domNode = createFastDomNode<HTMLElement>(createElement('div'));
 		this.domNode.setAttribute('role', 'presentation');
 		this.domNode.setAttribute('aria-hidden', 'true');
 		this.domNode.setClassName('blockDecorations-container');
@@ -86,7 +87,7 @@ export class BlockDecorations extends ViewPart {
 
 			let block = this.blocks[count];
 			if (!block) {
-				block = this.blocks[count] = createFastDomNode(document.createElement('div'));
+				block = this.blocks[count] = createFastDomNode(createElement('div'));
 				this.domNode.appendChild(block);
 			}
 
diff --git a/src/vs/editor/browser/viewParts/contentWidgets/contentWidgets.ts b/src/vs/editor/browser/viewParts/contentWidgets/contentWidgets.ts
index ed496acc9c6..675fd78a96f 100644
--- a/src/vs/editor/browser/viewParts/contentWidgets/contentWidgets.ts
+++ b/src/vs/editor/browser/viewParts/contentWidgets/contentWidgets.ts
@@ -35,13 +35,13 @@ export class ViewContentWidgets extends ViewPart {
 		this._viewDomNode = viewDomNode;
 		this._widgets = {};
 
-		this.domNode = createFastDomNode(document.createElement('div'));
+		this.domNode = createFastDomNode(dom.createElement('div'));
 		PartFingerprints.write(this.domNode, PartFingerprint.ContentWidgets);
 		this.domNode.setClassName('contentWidgets');
 		this.domNode.setPosition('absolute');
 		this.domNode.setTop(0);
 
-		this.overflowingContentWidgetsDomNode = createFastDomNode(document.createElement('div'));
+		this.overflowingContentWidgetsDomNode = createFastDomNode(dom.createElement('div'));
 		PartFingerprints.write(this.overflowingContentWidgetsDomNode, PartFingerprint.OverflowingContentWidgets);
 		this.overflowingContentWidgetsDomNode.setClassName('overflowingContentWidgets');
 	}
diff --git a/src/vs/editor/browser/viewParts/glyphMargin/glyphMargin.ts b/src/vs/editor/browser/viewParts/glyphMargin/glyphMargin.ts
index dd565eac9e4..5ec32659ffd 100644
--- a/src/vs/editor/browser/viewParts/glyphMargin/glyphMargin.ts
+++ b/src/vs/editor/browser/viewParts/glyphMargin/glyphMargin.ts
@@ -16,6 +16,7 @@ import { Range } from '../../../common/core/range.js';
 import { GlyphMarginLane } from '../../../common/model.js';
 import * as viewEvents from '../../../common/viewEvents.js';
 import { ViewContext } from '../../../common/viewModel/viewContext.js';
+import { createElement } from '../../../../base/browser/dom.js';
 
 /**
  * Represents a decoration that should be shown along the lines from `startLineNumber` to `endLineNumber`.
@@ -141,7 +142,7 @@ export class GlyphMarginWidgets extends ViewPart {
 		const options = this._context.configuration.options;
 		const layoutInfo = options.get(EditorOption.layoutInfo);
 
-		this.domNode = createFastDomNode(document.createElement('div'));
+		this.domNode = createFastDomNode(createElement('div'));
 		this.domNode.setClassName('glyph-margin-widgets');
 		this.domNode.setPosition('absolute');
 		this.domNode.setTop(0);
@@ -423,7 +424,7 @@ export class GlyphMarginWidgets extends ViewPart {
 			if (i < this._managedDomNodes.length) {
 				domNode = this._managedDomNodes[i];
 			} else {
-				domNode = createFastDomNode(document.createElement('div'));
+				domNode = createFastDomNode(createElement('div'));
 				this._managedDomNodes.push(domNode);
 				this.domNode.appendChild(domNode);
 			}
diff --git a/src/vs/editor/browser/viewParts/margin/margin.ts b/src/vs/editor/browser/viewParts/margin/margin.ts
index cd4660c834d..ceda0dfbf98 100644
--- a/src/vs/editor/browser/viewParts/margin/margin.ts
+++ b/src/vs/editor/browser/viewParts/margin/margin.ts
@@ -10,6 +10,7 @@ import { RenderingContext, RestrictedRenderingContext } from '../../view/renderi
 import { ViewContext } from '../../../common/viewModel/viewContext.js';
 import * as viewEvents from '../../../common/viewEvents.js';
 import { EditorOption } from '../../../common/config/editorOptions.js';
+import { createElement } from '../../../../base/browser/dom.js';
 
 /**
  * Margin is a vertical strip located on the left of the editor's content area.
@@ -38,13 +39,13 @@ export class Margin extends ViewPart {
 		this._glyphMarginLeft = layoutInfo.glyphMarginLeft;
 		this._glyphMarginWidth = layoutInfo.glyphMarginWidth;
 
-		this._domNode = createFastDomNode(document.createElement('div'));
+		this._domNode = createFastDomNode(createElement('div'));
 		this._domNode.setClassName(Margin.OUTER_CLASS_NAME);
 		this._domNode.setPosition('absolute');
 		this._domNode.setAttribute('role', 'presentation');
 		this._domNode.setAttribute('aria-hidden', 'true');
 
-		this._glyphMarginBackgroundDomNode = createFastDomNode(document.createElement('div'));
+		this._glyphMarginBackgroundDomNode = createFastDomNode(createElement('div'));
 		this._glyphMarginBackgroundDomNode.setClassName(Margin.CLASS_NAME);
 
 		this._domNode.appendChild(this._glyphMarginBackgroundDomNode);
diff --git a/src/vs/editor/browser/viewParts/minimap/minimap.ts b/src/vs/editor/browser/viewParts/minimap/minimap.ts
index 63919280735..e8cc49b735c 100644
--- a/src/vs/editor/browser/viewParts/minimap/minimap.ts
+++ b/src/vs/editor/browser/viewParts/minimap/minimap.ts
@@ -1185,36 +1185,36 @@ class InnerMinimap extends Disposable {
 		this._buffers = null;
 		this._selectionColor = this._theme.getColor(minimapSelection);
 
-		this._domNode = createFastDomNode(document.createElement('div'));
+		this._domNode = createFastDomNode(dom.createElement('div'));
 		PartFingerprints.write(this._domNode, PartFingerprint.Minimap);
 		this._domNode.setClassName(this._getMinimapDomNodeClassName());
 		this._domNode.setPosition('absolute');
 		this._domNode.setAttribute('role', 'presentation');
 		this._domNode.setAttribute('aria-hidden', 'true');
 
-		this._shadow = createFastDomNode(document.createElement('div'));
+		this._shadow = createFastDomNode(dom.createElement('div'));
 		this._shadow.setClassName('minimap-shadow-hidden');
 		this._domNode.appendChild(this._shadow);
 
-		this._canvas = createFastDomNode(document.createElement('canvas'));
+		this._canvas = createFastDomNode(dom.createElement('canvas'));
 		this._canvas.setPosition('absolute');
 		this._canvas.setLeft(0);
 		this._domNode.appendChild(this._canvas);
 
-		this._decorationsCanvas = createFastDomNode(document.createElement('canvas'));
+		this._decorationsCanvas = createFastDomNode(dom.createElement('canvas'));
 		this._decorationsCanvas.setPosition('absolute');
 		this._decorationsCanvas.setClassName('minimap-decorations-layer');
 		this._decorationsCanvas.setLeft(0);
 		this._domNode.appendChild(this._decorationsCanvas);
 
-		this._slider = createFastDomNode(document.createElement('div'));
+		this._slider = createFastDomNode(dom.createElement('div'));
 		this._slider.setPosition('absolute');
 		this._slider.setClassName('minimap-slider');
 		this._slider.setLayerHinting(true);
 		this._slider.setContain('strict');
 		this._domNode.appendChild(this._slider);
 
-		this._sliderHorizontal = createFastDomNode(document.createElement('div'));
+		this._sliderHorizontal = createFastDomNode(dom.createElement('div'));
 		this._sliderHorizontal.setPosition('absolute');
 		this._sliderHorizontal.setClassName('minimap-slider-horizontal');
 		this._slider.appendChild(this._sliderHorizontal);
@@ -1288,7 +1288,7 @@ class InnerMinimap extends Disposable {
 	}
 
 	private _startSliderDragging(e: PointerEvent, initialPosY: number, initialSliderState: MinimapLayout): void {
-		if (!e.target || !(e.target instanceof Element)) {
+		if (!e.target || !dom.isElement(e.target)) {
 			return;
 		}
 		const initialPosX = e.pageX;
diff --git a/src/vs/editor/browser/viewParts/minimap/minimapCharRendererFactory.ts b/src/vs/editor/browser/viewParts/minimap/minimapCharRendererFactory.ts
index 36846f1203b..eccb46fb151 100644
--- a/src/vs/editor/browser/viewParts/minimap/minimapCharRendererFactory.ts
+++ b/src/vs/editor/browser/viewParts/minimap/minimapCharRendererFactory.ts
@@ -7,6 +7,7 @@ import { MinimapCharRenderer } from './minimapCharRenderer.js';
 import { allCharCodes, Constants } from './minimapCharSheet.js';
 import { prebakedMiniMaps } from './minimapPreBaked.js';
 import { toUint8 } from '../../../../base/common/uint.js';
+import { createElement } from '../../../../base/browser/dom.js';
 
 /**
  * Creates character renderers. It takes a 'scale' that determines how large
@@ -48,7 +49,7 @@ export class MinimapCharRendererFactory {
 	 * Creates the font sample data, writing to a canvas.
 	 */
 	public static createSampleData(fontFamily: string): ImageData {
-		const canvas = document.createElement('canvas');
+		const canvas = createElement('canvas');
 		const ctx = canvas.getContext('2d')!;
 
 		canvas.style.height = `${Constants.SAMPLED_CHAR_HEIGHT}px`;
diff --git a/src/vs/editor/browser/viewParts/overlayWidgets/overlayWidgets.ts b/src/vs/editor/browser/viewParts/overlayWidgets/overlayWidgets.ts
index e34f35493d3..e9c59d6f2eb 100644
--- a/src/vs/editor/browser/viewParts/overlayWidgets/overlayWidgets.ts
+++ b/src/vs/editor/browser/viewParts/overlayWidgets/overlayWidgets.ts
@@ -58,11 +58,11 @@ export class ViewOverlayWidgets extends ViewPart {
 		this._editorWidth = layoutInfo.width;
 		this._viewDomNodeRect = { top: 0, left: 0, width: 0, height: 0 };
 
-		this._domNode = createFastDomNode(document.createElement('div'));
+		this._domNode = createFastDomNode(dom.createElement('div'));
 		PartFingerprints.write(this._domNode, PartFingerprint.OverlayWidgets);
 		this._domNode.setClassName('overlayWidgets');
 
-		this.overflowingOverlayWidgetsDomNode = createFastDomNode(document.createElement('div'));
+		this.overflowingOverlayWidgetsDomNode = createFastDomNode(dom.createElement('div'));
 		PartFingerprints.write(this.overflowingOverlayWidgetsDomNode, PartFingerprint.OverflowingOverlayWidgets);
 		this.overflowingOverlayWidgetsDomNode.setClassName('overflowingOverlayWidgets');
 	}
diff --git a/src/vs/editor/browser/viewParts/overviewRuler/decorationsOverviewRuler.ts b/src/vs/editor/browser/viewParts/overviewRuler/decorationsOverviewRuler.ts
index c494f6e2dfb..e2282cab812 100644
--- a/src/vs/editor/browser/viewParts/overviewRuler/decorationsOverviewRuler.ts
+++ b/src/vs/editor/browser/viewParts/overviewRuler/decorationsOverviewRuler.ts
@@ -18,6 +18,7 @@ import * as viewEvents from '../../../common/viewEvents.js';
 import { EditorOption } from '../../../common/config/editorOptions.js';
 import { OverviewRulerDecorationsGroup } from '../../../common/viewModel.js';
 import { equals } from '../../../../base/common/arrays.js';
+import { createElement } from '../../../../base/browser/dom.js';
 
 class Settings {
 
@@ -247,7 +248,7 @@ export class DecorationsOverviewRuler extends ViewPart {
 	constructor(context: ViewContext) {
 		super(context);
 
-		this._domNode = createFastDomNode(document.createElement('canvas'));
+		this._domNode = createFastDomNode(createElement('canvas'));
 		this._domNode.setClassName('decorationsOverviewRuler');
 		this._domNode.setPosition('absolute');
 		this._domNode.setLayerHinting(true);
diff --git a/src/vs/editor/browser/viewParts/overviewRuler/overviewRuler.ts b/src/vs/editor/browser/viewParts/overviewRuler/overviewRuler.ts
index 11292eb56a1..8fb8b9cb22b 100644
--- a/src/vs/editor/browser/viewParts/overviewRuler/overviewRuler.ts
+++ b/src/vs/editor/browser/viewParts/overviewRuler/overviewRuler.ts
@@ -10,6 +10,7 @@ import { ColorZone, OverviewRulerZone, OverviewZoneManager } from '../../../comm
 import { ViewContext } from '../../../common/viewModel/viewContext.js';
 import * as viewEvents from '../../../common/viewEvents.js';
 import { ViewEventHandler } from '../../../common/viewEventHandler.js';
+import { createElement } from '../../../../base/browser/dom.js';
 
 /**
  * The overview ruler appears underneath the editor scroll bar and shows things
@@ -26,7 +27,7 @@ export class OverviewRuler extends ViewEventHandler implements IOverviewRuler {
 		this._context = context;
 		const options = this._context.configuration.options;
 
-		this._domNode = createFastDomNode(document.createElement('canvas'));
+		this._domNode = createFastDomNode(createElement('canvas'));
 		this._domNode.setClassName(cssClassName);
 		this._domNode.setPosition('absolute');
 		this._domNode.setLayerHinting(true);
diff --git a/src/vs/editor/browser/viewParts/rulers/rulers.ts b/src/vs/editor/browser/viewParts/rulers/rulers.ts
index c0a46927d17..3cd6ad416bf 100644
--- a/src/vs/editor/browser/viewParts/rulers/rulers.ts
+++ b/src/vs/editor/browser/viewParts/rulers/rulers.ts
@@ -10,6 +10,7 @@ import { RenderingContext, RestrictedRenderingContext } from '../../view/renderi
 import { ViewContext } from '../../../common/viewModel/viewContext.js';
 import * as viewEvents from '../../../common/viewEvents.js';
 import { EditorOption, IRulerOption } from '../../../common/config/editorOptions.js';
+import { createElement } from '../../../../base/browser/dom.js';
 
 /**
  * Rulers are vertical lines that appear at certain columns in the editor. There can be >= 0 rulers
@@ -24,7 +25,7 @@ export class Rulers extends ViewPart {
 
 	constructor(context: ViewContext) {
 		super(context);
-		this.domNode = createFastDomNode<HTMLElement>(document.createElement('div'));
+		this.domNode = createFastDomNode<HTMLElement>(createElement('div'));
 		this.domNode.setAttribute('role', 'presentation');
 		this.domNode.setAttribute('aria-hidden', 'true');
 		this.domNode.setClassName('view-rulers');
@@ -70,7 +71,7 @@ export class Rulers extends ViewPart {
 			const rulerWidth = tabSize;
 			let addCount = desiredCount - currentCount;
 			while (addCount > 0) {
-				const node = createFastDomNode(document.createElement('div'));
+				const node = createFastDomNode(createElement('div'));
 				node.setClassName('view-ruler');
 				node.setWidth(rulerWidth);
 				this.domNode.appendChild(node);
diff --git a/src/vs/editor/browser/viewParts/scrollDecoration/scrollDecoration.ts b/src/vs/editor/browser/viewParts/scrollDecoration/scrollDecoration.ts
index 71a9a7605c7..60ac17848a6 100644
--- a/src/vs/editor/browser/viewParts/scrollDecoration/scrollDecoration.ts
+++ b/src/vs/editor/browser/viewParts/scrollDecoration/scrollDecoration.ts
@@ -10,6 +10,7 @@ import { RenderingContext, RestrictedRenderingContext } from '../../view/renderi
 import { ViewContext } from '../../../common/viewModel/viewContext.js';
 import * as viewEvents from '../../../common/viewEvents.js';
 import { EditorOption } from '../../../common/config/editorOptions.js';
+import { createElement } from '../../../../base/browser/dom.js';
 
 
 export class ScrollDecorationViewPart extends ViewPart {
@@ -30,7 +31,7 @@ export class ScrollDecorationViewPart extends ViewPart {
 		const options = this._context.configuration.options;
 		const scrollbar = options.get(EditorOption.scrollbar);
 		this._useShadows = scrollbar.useShadows;
-		this._domNode = createFastDomNode(document.createElement('div'));
+		this._domNode = createFastDomNode(createElement('div'));
 		this._domNode.setAttribute('role', 'presentation');
 		this._domNode.setAttribute('aria-hidden', 'true');
 	}
diff --git a/src/vs/editor/browser/viewParts/viewCursors/viewCursor.ts b/src/vs/editor/browser/viewParts/viewCursors/viewCursor.ts
index 1e4164e9f81..39f8efe00fa 100644
--- a/src/vs/editor/browser/viewParts/viewCursors/viewCursor.ts
+++ b/src/vs/editor/browser/viewParts/viewCursors/viewCursor.ts
@@ -69,7 +69,7 @@ export class ViewCursor {
 		this._isVisible = true;
 
 		// Create the dom node
-		this._domNode = createFastDomNode(document.createElement('div'));
+		this._domNode = createFastDomNode(dom.createElement('div'));
 		this._domNode.setClassName(`cursor ${MOUSE_CURSOR_TEXT_CSS_CLASS_NAME}`);
 		this._domNode.setHeight(this._context.viewLayout.getLineHeightForLineNumber(1));
 		this._domNode.setTop(0);
diff --git a/src/vs/editor/browser/viewParts/viewCursors/viewCursors.ts b/src/vs/editor/browser/viewParts/viewCursors/viewCursors.ts
index d3fd3861bb2..d4c49434612 100644
--- a/src/vs/editor/browser/viewParts/viewCursors/viewCursors.ts
+++ b/src/vs/editor/browser/viewParts/viewCursors/viewCursors.ts
@@ -21,7 +21,7 @@ import * as viewEvents from '../../../common/viewEvents.js';
 import { registerThemingParticipant } from '../../../../platform/theme/common/themeService.js';
 import { isHighContrast } from '../../../../platform/theme/common/theme.js';
 import { CursorChangeReason } from '../../../common/cursorEvents.js';
-import { WindowIntervalTimer, getWindow } from '../../../../base/browser/dom.js';
+import { WindowIntervalTimer, createElement, getWindow } from '../../../../base/browser/dom.js';
 
 /**
  * View cursors is a view part responsible for rendering the primary cursor and
@@ -71,7 +71,7 @@ export class ViewCursors extends ViewPart {
 		this._secondaryCursors = [];
 		this._renderData = [];
 
-		this._domNode = createFastDomNode(document.createElement('div'));
+		this._domNode = createFastDomNode(createElement('div'));
 		this._domNode.setAttribute('role', 'presentation');
 		this._domNode.setAttribute('aria-hidden', 'true');
 		this._updateDomClassName();
diff --git a/src/vs/editor/browser/viewParts/viewLines/viewLines.ts b/src/vs/editor/browser/viewParts/viewLines/viewLines.ts
index 140b62be89e..9d2d82b7c21 100644
--- a/src/vs/editor/browser/viewParts/viewLines/viewLines.ts
+++ b/src/vs/editor/browser/viewParts/viewLines/viewLines.ts
@@ -26,6 +26,7 @@ import { Viewport } from '../../../common/viewModel.js';
 import { ViewContext } from '../../../common/viewModel/viewContext.js';
 import { ViewLineOptions } from './viewLineOptions.js';
 import type { ViewGpuContext } from '../../gpu/viewGpuContext.js';
+import { createElement } from '../../../../base/browser/dom.js';
 
 class LastRenderedData {
 
@@ -144,7 +145,7 @@ export class ViewLines extends ViewPart implements IViewLines {
 		this._viewLineOptions = new ViewLineOptions(conf, this._context.theme.type);
 
 		this._linesContent = linesContent;
-		this._textRangeRestingSpot = document.createElement('div');
+		this._textRangeRestingSpot = createElement('div');
 		this._visibleLines = new VisibleLinesCollection(this._context, {
 			createLine: () => new ViewLine(viewGpuContext, this._viewLineOptions),
 		});
diff --git a/src/vs/editor/browser/viewParts/viewZones/viewZones.ts b/src/vs/editor/browser/viewParts/viewZones/viewZones.ts
index 4b94e5660d3..08695759a3e 100644
--- a/src/vs/editor/browser/viewParts/viewZones/viewZones.ts
+++ b/src/vs/editor/browser/viewParts/viewZones/viewZones.ts
@@ -13,6 +13,7 @@ import { ViewContext } from '../../../common/viewModel/viewContext.js';
 import * as viewEvents from '../../../common/viewEvents.js';
 import { IEditorWhitespace, IViewWhitespaceViewportData, IWhitespaceChangeAccessor } from '../../../common/viewModel.js';
 import { EditorOption } from '../../../common/config/editorOptions.js';
+import { createElement } from '../../../../base/browser/dom.js';
 
 interface IMyViewZone {
 	whitespaceId: string;
@@ -57,13 +58,13 @@ export class ViewZones extends ViewPart {
 		this._contentWidth = layoutInfo.contentWidth;
 		this._contentLeft = layoutInfo.contentLeft;
 
-		this.domNode = createFastDomNode(document.createElement('div'));
+		this.domNode = createFastDomNode(createElement('div'));
 		this.domNode.setClassName('view-zones');
 		this.domNode.setPosition('absolute');
 		this.domNode.setAttribute('role', 'presentation');
 		this.domNode.setAttribute('aria-hidden', 'true');
 
-		this.marginDomNode = createFastDomNode(document.createElement('div'));
+		this.marginDomNode = createFastDomNode(createElement('div'));
 		this.marginDomNode.setClassName('margin-view-zones');
 		this.marginDomNode.setPosition('absolute');
 		this.marginDomNode.setAttribute('role', 'presentation');
diff --git a/src/vs/editor/browser/widget/diffEditor/components/accessibleDiffViewer.ts b/src/vs/editor/browser/widget/diffEditor/components/accessibleDiffViewer.ts
index 20d84267704..556638b15b3 100644
--- a/src/vs/editor/browser/widget/diffEditor/components/accessibleDiffViewer.ts
+++ b/src/vs/editor/browser/widget/diffEditor/components/accessibleDiffViewer.ts
@@ -3,7 +3,7 @@
  *  Licensed under the MIT License. See License.txt in the project root for license information.
  *--------------------------------------------------------------------------------------------*/
 
-import { addDisposableListener, addStandardDisposableListener, reset } from '../../../../../base/browser/dom.js';
+import { addDisposableListener, addStandardDisposableListener, createElement, reset } from '../../../../../base/browser/dom.js';
 import { createTrustedTypesPolicy } from '../../../../../base/browser/trustedTypes.js';
 import { ActionBar } from '../../../../../base/browser/ui/actionbar/actionbar.js';
 import { DomScrollableElement } from '../../../../../base/browser/ui/scrollbar/scrollableElement.js';
@@ -356,7 +356,7 @@ class View extends Disposable {
 		this.domNode = this._element;
 		this.domNode.className = 'monaco-component diff-review monaco-editor-background';
 
-		const actionBarContainer = document.createElement('div');
+		const actionBarContainer = createElement('div');
 		actionBarContainer.className = 'diff-review-actions';
 		this._actionBar = this._register(new ActionBar(
 			actionBarContainer
@@ -375,7 +375,7 @@ class View extends Disposable {
 			}
 		}));
 
-		this._content = document.createElement('div');
+		this._content = createElement('div');
 		this._content.className = 'diff-review-content';
 		this._content.setAttribute('role', 'code');
 		this._scrollbar = this._register(new DomScrollableElement(this._content, {}));
@@ -442,7 +442,7 @@ class View extends Disposable {
 		const originalOptions = this._models.getOriginalOptions();
 		const modifiedOptions = this._models.getModifiedOptions();
 
-		const container = document.createElement('div');
+		const container = createElement('div');
 		container.className = 'diff-review-table';
 		container.setAttribute('role', 'list');
 		container.setAttribute('aria-label', localize('ariaLabel', 'Accessible Diff Viewer. Use arrow up and down to navigate.'));
@@ -469,7 +469,7 @@ class View extends Disposable {
 
 			if (viewItem.type === LineType.Header) {
 
-				const header = document.createElement('div');
+				const header = createElement('div');
 				header.className = 'diff-review-row';
 				header.setAttribute('role', 'listitem');
 
@@ -502,7 +502,7 @@ class View extends Disposable {
 					modifiedChangedLinesCntAria
 				));
 
-				const cell = document.createElement('div');
+				const cell = createElement('div');
 				cell.className = 'diff-review-cell diff-review-summary';
 				// e.g.: `1/10: @@ -504,7 +517,7 @@`
 				cell.appendChild(document.createTextNode(`${diffIndex + 1}/${diffsLength}: @@ -${r.original.startLineNumber},${r.original.length} +${r.modified.startLineNumber},${r.modified.length} @@`));
@@ -566,18 +566,18 @@ class View extends Disposable {
 				break;
 		}
 
-		const row = document.createElement('div');
+		const row = createElement('div');
 		row.style.minWidth = width + 'px';
 		row.className = rowClassName;
 		row.setAttribute('role', 'listitem');
 		row.ariaLevel = '';
 
-		const cell = document.createElement('div');
+		const cell = createElement('div');
 		cell.className = 'diff-review-cell';
 		cell.style.height = `${lineHeight}px`;
 		row.appendChild(cell);
 
-		const originalLineNumber = document.createElement('span');
+		const originalLineNumber = createElement('span');
 		originalLineNumber.style.width = (originalLineNumbersWidth + 'px');
 		originalLineNumber.style.minWidth = (originalLineNumbersWidth + 'px');
 		originalLineNumber.className = 'diff-review-line-number' + lineNumbersExtraClassName;
@@ -588,7 +588,7 @@ class View extends Disposable {
 		}
 		cell.appendChild(originalLineNumber);
 
-		const modifiedLineNumber = document.createElement('span');
+		const modifiedLineNumber = createElement('span');
 		modifiedLineNumber.style.width = (modifiedLineNumbersWidth + 'px');
 		modifiedLineNumber.style.minWidth = (modifiedLineNumbersWidth + 'px');
 		modifiedLineNumber.style.paddingRight = '10px';
@@ -600,11 +600,11 @@ class View extends Disposable {
 		}
 		cell.appendChild(modifiedLineNumber);
 
-		const spacer = document.createElement('span');
+		const spacer = createElement('span');
 		spacer.className = spacerClassName;
 
 		if (spacerIcon) {
-			const spacerCodicon = document.createElement('span');
+			const spacerCodicon = createElement('span');
 			spacerCodicon.className = ThemeIcon.asClassName(spacerIcon);
 			spacerCodicon.innerText = '\u00a0\u00a0';
 			spacer.appendChild(spacerCodicon);
diff --git a/src/vs/editor/browser/widget/diffEditor/components/diffEditorViewZones/diffEditorViewZones.ts b/src/vs/editor/browser/widget/diffEditor/components/diffEditorViewZones/diffEditorViewZones.ts
index 0a2fd9eda46..95aad773969 100644
--- a/src/vs/editor/browser/widget/diffEditor/components/diffEditorViewZones/diffEditorViewZones.ts
+++ b/src/vs/editor/browser/widget/diffEditor/components/diffEditorViewZones/diffEditorViewZones.ts
@@ -3,7 +3,7 @@
  *  Licensed under the MIT License. See License.txt in the project root for license information.
  *--------------------------------------------------------------------------------------------*/
 
-import { $, addDisposableListener } from '../../../../../../base/browser/dom.js';
+import { $, addDisposableListener, createElement } from '../../../../../../base/browser/dom.js';
 import { ArrayQueue } from '../../../../../../base/common/arrays.js';
 import { RunOnceScheduler } from '../../../../../../base/common/async.js';
 import { Codicon } from '../../../../../../base/common/codicons.js';
@@ -127,7 +127,7 @@ export class DiffEditorViewZones extends Disposable {
 		});
 
 		function createFakeLinesDiv(): HTMLElement {
-			const r = document.createElement('div');
+			const r = createElement('div');
 			r.className = 'diagonal-fill';
 			return r;
 		}
@@ -145,7 +145,7 @@ export class DiffEditorViewZones extends Disposable {
 			if (modifiedTopPaddingVal > 0) {
 				modViewZones.push({
 					afterLineNumber: 0,
-					domNode: document.createElement('div'),
+					domNode: createElement('div'),
 					heightInPx: modifiedTopPaddingVal,
 					showInHiddenAreas: true,
 					suppressMouseDown: true,
@@ -155,7 +155,7 @@ export class DiffEditorViewZones extends Disposable {
 			if (originalTopPaddingVal > 0) {
 				origViewZones.push({
 					afterLineNumber: 0,
-					domNode: document.createElement('div'),
+					domNode: createElement('div'),
 					heightInPx: originalTopPaddingVal,
 					showInHiddenAreas: true,
 					suppressMouseDown: true,
@@ -198,7 +198,7 @@ export class DiffEditorViewZones extends Disposable {
 					if (!a.originalRange.isEmpty) {
 						originalModelTokenizationCompleted.read(reader); // Update view-zones once tokenization completes
 
-						const deletedCodeDomNode = document.createElement('div');
+						const deletedCodeDomNode = createElement('div');
 						deletedCodeDomNode.classList.add('view-lines', 'line-delete', 'monaco-mouse-cursor-text');
 						const originalModel = this._editors.original.getModel()!;
 						// `a.originalRange` can be out of bound when the diff has not been updated yet.
@@ -223,13 +223,13 @@ export class DiffEditorViewZones extends Disposable {
 						}
 						const result = renderLines(source, renderOptions, decorations, deletedCodeDomNode);
 
-						const marginDomNode = document.createElement('div');
+						const marginDomNode = createElement('div');
 						marginDomNode.className = 'inline-deleted-margin-view-zone';
 						applyFontInfo(marginDomNode, renderOptions.fontInfo);
 
 						if (this._options.renderIndicators.read(reader)) {
 							for (let i = 0; i < result.heightInLines; i++) {
-								const marginElement = document.createElement('div');
+								const marginElement = createElement('div');
 								marginElement.className = `delete-sign ${ThemeIcon.asClassName(diffRemoveIcon)}`;
 								marginElement.setAttribute('style', `position:absolute;top:${i * modLineHeight}px;width:${renderOptions.lineDecorationsWidth}px;height:${modLineHeight}px;right:0;`);
 								marginDomNode.appendChild(marginElement);
@@ -277,7 +277,7 @@ export class DiffEditorViewZones extends Disposable {
 						});
 					}
 
-					const marginDomNode = document.createElement('div');
+					const marginDomNode = createElement('div');
 					marginDomNode.className = 'gutter-delete';
 
 					origViewZones.push({
@@ -308,7 +308,7 @@ export class DiffEditorViewZones extends Disposable {
 						}
 
 						function createViewZoneMarginArrow(): HTMLElement {
-							const arrow = document.createElement('div');
+							const arrow = createElement('div');
 							arrow.className = 'arrow-revert-change ' + ThemeIcon.asClassName(Codicon.arrowRight);
 							reader.store.add(addDisposableListener(arrow, 'mousedown', e => e.stopPropagation()));
 							reader.store.add(addDisposableListener(arrow, 'click', e => {
diff --git a/src/vs/editor/browser/widget/diffEditor/components/diffEditorViewZones/inlineDiffDeletedCodeMargin.ts b/src/vs/editor/browser/widget/diffEditor/components/diffEditorViewZones/inlineDiffDeletedCodeMargin.ts
index fa63055ff08..eb43af783a2 100644
--- a/src/vs/editor/browser/widget/diffEditor/components/diffEditorViewZones/inlineDiffDeletedCodeMargin.ts
+++ b/src/vs/editor/browser/widget/diffEditor/components/diffEditorViewZones/inlineDiffDeletedCodeMargin.ts
@@ -3,7 +3,7 @@
  *  Licensed under the MIT License. See License.txt in the project root for license information.
  *--------------------------------------------------------------------------------------------*/
 
-import { addStandardDisposableListener, getDomNodePagePosition } from '../../../../../../base/browser/dom.js';
+import { addStandardDisposableListener, createElement, getDomNodePagePosition } from '../../../../../../base/browser/dom.js';
 import { Action } from '../../../../../../base/common/actions.js';
 import { Codicon } from '../../../../../../base/common/codicons.js';
 import { Disposable } from '../../../../../../base/common/lifecycle.js';
@@ -51,7 +51,7 @@ export class InlineDiffDeletedCodeMargin extends Disposable {
 		// make sure the diff margin shows above overlay.
 		this._marginDomNode.style.zIndex = '10';
 
-		this._diffActions = document.createElement('div');
+		this._diffActions = createElement('div');
 		this._diffActions.className = ThemeIcon.asClassName(Codicon.lightBulb) + ' lightbulb-glyph';
 		this._diffActions.style.position = 'absolute';
 		const lineHeight = this._modifiedEditor.getOption(EditorOption.lineHeight);
diff --git a/src/vs/editor/browser/widget/diffEditor/features/movedBlocksLinesFeature.ts b/src/vs/editor/browser/widget/diffEditor/features/movedBlocksLinesFeature.ts
index 04e0c61e024..9e05348c96b 100644
--- a/src/vs/editor/browser/widget/diffEditor/features/movedBlocksLinesFeature.ts
+++ b/src/vs/editor/browser/widget/diffEditor/features/movedBlocksLinesFeature.ts
@@ -3,7 +3,7 @@
  *  Licensed under the MIT License. See License.txt in the project root for license information.
  *--------------------------------------------------------------------------------------------*/
 
-import { h } from '../../../../../base/browser/dom.js';
+import { createElementNS, h } from '../../../../../base/browser/dom.js';
 import { ActionBar } from '../../../../../base/browser/ui/actionbar/actionbar.js';
 import { Action } from '../../../../../base/common/actions.js';
 import { booleanComparator, compareBy, numberComparator, tieBreakComparators } from '../../../../../base/common/arrays.js';
@@ -113,7 +113,7 @@ export class MovedBlocksLinesFeature extends Disposable {
 
 				const rectWidth = infoMod.glyphMarginWidth + infoMod.lineNumbersWidth;
 				const rectHeight = 18;
-				const rect = document.createElementNS('http://www.w3.org/2000/svg', 'rect');
+				const rect = createElementNS('http://www.w3.org/2000/svg', 'rect');
 				rect.classList.add('arrow-rectangle');
 				rect.setAttribute('x', `${right - rectWidth}`);
 				rect.setAttribute('y', `${line.to - rectHeight / 2}`);
@@ -121,15 +121,15 @@ export class MovedBlocksLinesFeature extends Disposable {
 				rect.setAttribute('height', `${rectHeight}`);
 				this._element.appendChild(rect);
 
-				const g = document.createElementNS('http://www.w3.org/2000/svg', 'g');
+				const g = createElementNS('http://www.w3.org/2000/svg', 'g');
 
-				const path = document.createElementNS('http://www.w3.org/2000/svg', 'path');
+				const path = createElementNS('http://www.w3.org/2000/svg', 'path');
 
 				path.setAttribute('d', `M ${0} ${line.from} L ${verticalY} ${line.from} L ${verticalY} ${line.to} L ${right - arrowWidth} ${line.to}`);
 				path.setAttribute('fill', 'none');
 				g.appendChild(path);
 
-				const arrowRight = document.createElementNS('http://www.w3.org/2000/svg', 'polygon');
+				const arrowRight = createElementNS('http://www.w3.org/2000/svg', 'polygon');
 				arrowRight.classList.add('arrow');
 
 				reader.store.add(autorun(reader => {
@@ -157,7 +157,7 @@ export class MovedBlocksLinesFeature extends Disposable {
 			this.width.set(lineAreaWidth, undefined);
 		});
 
-		this._element = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
+		this._element = createElementNS('http://www.w3.org/2000/svg', 'svg');
 		this._element.setAttribute('class', 'moved-blocks-lines');
 		this._rootElement.appendChild(this._element);
 		this._register(toDisposable(() => this._element.remove()));
diff --git a/src/vs/editor/browser/widget/diffEditor/features/overviewRulerFeature.ts b/src/vs/editor/browser/widget/diffEditor/features/overviewRulerFeature.ts
index 146e124ff38..baefbf75d6a 100644
--- a/src/vs/editor/browser/widget/diffEditor/features/overviewRulerFeature.ts
+++ b/src/vs/editor/browser/widget/diffEditor/features/overviewRulerFeature.ts
@@ -3,7 +3,7 @@
  *  Licensed under the MIT License. See License.txt in the project root for license information.
  *--------------------------------------------------------------------------------------------*/
 
-import { EventType, addDisposableListener, addStandardDisposableListener, h } from '../../../../../base/browser/dom.js';
+import { EventType, addDisposableListener, addStandardDisposableListener, createElement, h } from '../../../../../base/browser/dom.js';
 import { createFastDomNode } from '../../../../../base/browser/fastDomNode.js';
 import { IMouseWheelEvent } from '../../../../../base/browser/mouseEvent.js';
 import { ScrollbarState } from '../../../../../base/browser/ui/scrollbar/scrollbarState.js';
@@ -47,7 +47,7 @@ export class OverviewRulerFeature extends Disposable {
 			return { insertColor, removeColor };
 		});
 
-		const viewportDomElement = createFastDomNode(document.createElement('div'));
+		const viewportDomElement = createFastDomNode(createElement('div'));
 		viewportDomElement.setClassName('diffViewport');
 		viewportDomElement.setPosition('absolute');
 
diff --git a/src/vs/editor/browser/widget/diffEditor/utils.ts b/src/vs/editor/browser/widget/diffEditor/utils.ts
index c1579dacef5..ef2e348991f 100644
--- a/src/vs/editor/browser/widget/diffEditor/utils.ts
+++ b/src/vs/editor/browser/widget/diffEditor/utils.ts
@@ -3,7 +3,7 @@
  *  Licensed under the MIT License. See License.txt in the project root for license information.
  *--------------------------------------------------------------------------------------------*/
 
-import { IDimension } from '../../../../base/browser/dom.js';
+import { createElement, IDimension } from '../../../../base/browser/dom.js';
 import { findLast } from '../../../../base/common/arraysFind.js';
 import { CancellationTokenSource } from '../../../../base/common/cancellation.js';
 import { Disposable, DisposableStore, IDisposable, IReference, toDisposable } from '../../../../base/common/lifecycle.js';
@@ -239,7 +239,7 @@ export class PlaceholderViewZone implements IObservableViewZone {
 		private readonly _afterLineNumber: IObservable<number>,
 		public readonly heightInPx: number,
 	) {
-		this.domNode = document.createElement('div');
+		this.domNode = createElement('div');
 		this._actualTop = observableValue<number | undefined>(this, undefined);
 		this._actualHeight = observableValue<number | undefined>(this, undefined);
 		this.actualTop = this._actualTop;
diff --git a/src/vs/editor/browser/widget/diffEditor/utils/editorGutter.ts b/src/vs/editor/browser/widget/diffEditor/utils/editorGutter.ts
index 86e17fdde6c..ef6dc17280d 100644
--- a/src/vs/editor/browser/widget/diffEditor/utils/editorGutter.ts
+++ b/src/vs/editor/browser/widget/diffEditor/utils/editorGutter.ts
@@ -3,7 +3,7 @@
  *  Licensed under the MIT License. See License.txt in the project root for license information.
  *--------------------------------------------------------------------------------------------*/
 
-import { h, reset } from '../../../../../base/browser/dom.js';
+import { createElement, h, reset } from '../../../../../base/browser/dom.js';
 import { Disposable, IDisposable, toDisposable } from '../../../../../base/common/lifecycle.js';
 import { autorun, IObservable, IReader, ISettableObservable, observableFromEvent, observableSignal, observableSignalFromEvent, observableValue, transaction } from '../../../../../base/common/observable.js';
 import { CodeEditorWidget } from '../../codeEditor/codeEditorWidget.js';
@@ -108,7 +108,7 @@ export class EditorGutter<T extends IGutterItemInfo = IGutterItemInfo> extends D
 						unusedIds.delete(gutterItem.id);
 						let view = this.views.get(gutterItem.id);
 						if (!view) {
-							const viewDomNode = document.createElement('div');
+							const viewDomNode = createElement('div');
 							this._domNode.appendChild(viewDomNode);
 							const gutterItemObs = observableValue('item', gutterItem);
 							const itemView = this.itemProvider.createView(
diff --git a/src/vs/editor/browser/widget/markdownRenderer/browser/markdownRenderer.ts b/src/vs/editor/browser/widget/markdownRenderer/browser/markdownRenderer.ts
index d8f15787616..d149378dd06 100644
--- a/src/vs/editor/browser/widget/markdownRenderer/browser/markdownRenderer.ts
+++ b/src/vs/editor/browser/widget/markdownRenderer/browser/markdownRenderer.ts
@@ -3,6 +3,7 @@
  *  Licensed under the MIT License. See License.txt in the project root for license information.
  *--------------------------------------------------------------------------------------------*/
 
+import { createElement } from '../../../../../base/browser/dom.js';
 import { MarkdownRenderOptions, MarkedOptions, renderMarkdown } from '../../../../../base/browser/markdownRenderer.js';
 import { createTrustedTypesPolicy } from '../../../../../base/browser/trustedTypes.js';
 import { onUnexpectedError } from '../../../../../base/common/errors.js';
@@ -47,7 +48,7 @@ export class MarkdownRenderer {
 
 	render(markdown: IMarkdownString | undefined, options?: MarkdownRenderOptions, markedOptions?: MarkedOptions): IMarkdownRenderResult {
 		if (!markdown) {
-			const element = document.createElement('span');
+			const element = createElement('span');
 			return { element, dispose: () => { } };
 		}
 
@@ -77,7 +78,7 @@ export class MarkdownRenderer {
 				}
 				const html = await tokenizeToString(this._languageService, value, languageId);
 
-				const element = document.createElement('span');
+				const element = createElement('span');
 
 				element.innerHTML = (MarkdownRenderer._ttpTokenizer?.createHTML(html) ?? html) as string;
 
diff --git a/src/vs/editor/contrib/codelens/browser/codelensWidget.ts b/src/vs/editor/contrib/codelens/browser/codelensWidget.ts
index 394c333b2e5..836c3dee3d0 100644
--- a/src/vs/editor/contrib/codelens/browser/codelensWidget.ts
+++ b/src/vs/editor/contrib/codelens/browser/codelensWidget.ts
@@ -36,7 +36,7 @@ class CodeLensViewZone implements IViewZone {
 
 		this._onHeight = onHeight;
 		this.suppressMouseDown = true;
-		this.domNode = document.createElement('div');
+		this.domNode = dom.createElement('div');
 	}
 
 	onComputedHeight(height: number): void {
@@ -79,7 +79,7 @@ class CodeLensContentWidget implements IContentWidget {
 
 		this.updatePosition(line);
 
-		this._domNode = document.createElement('span');
+		this._domNode = dom.createElement('span');
 		this._domNode.className = `codelens-decoration`;
 	}
 
diff --git a/src/vs/editor/contrib/colorPicker/browser/colorPickerParts/colorPickerCloseButton.ts b/src/vs/editor/contrib/colorPicker/browser/colorPickerParts/colorPickerCloseButton.ts
index 4b8bc2b45f6..31e2bf75f13 100644
--- a/src/vs/editor/contrib/colorPicker/browser/colorPickerParts/colorPickerCloseButton.ts
+++ b/src/vs/editor/contrib/colorPicker/browser/colorPickerParts/colorPickerCloseButton.ts
@@ -21,11 +21,11 @@ export class CloseButton extends Disposable {
 
 	constructor(container: HTMLElement) {
 		super();
-		this._button = document.createElement('div');
+		this._button = dom.createElement('div');
 		this._button.classList.add('close-button');
 		dom.append(container, this._button);
 
-		const innerDiv = document.createElement('div');
+		const innerDiv = dom.createElement('div');
 		innerDiv.classList.add('close-button-inner-div');
 		dom.append(this._button, innerDiv);
 
diff --git a/src/vs/editor/contrib/colorPicker/browser/colorPickerParts/colorPickerHeader.ts b/src/vs/editor/contrib/colorPicker/browser/colorPickerParts/colorPickerHeader.ts
index 8522f41e361..fe7b27416c5 100644
--- a/src/vs/editor/contrib/colorPicker/browser/colorPickerParts/colorPickerHeader.ts
+++ b/src/vs/editor/contrib/colorPicker/browser/colorPickerParts/colorPickerHeader.ts
@@ -33,7 +33,7 @@ export class ColorPickerHeader extends Disposable {
 
 		this._pickedColorNode = dom.append(this._domNode, $('.picked-color'));
 		dom.append(this._pickedColorNode, $('span.codicon.codicon-color-mode'));
-		this._pickedColorPresentation = dom.append(this._pickedColorNode, document.createElement('span'));
+		this._pickedColorPresentation = dom.append(this._pickedColorNode, dom.createElement('span'));
 		this._pickedColorPresentation.classList.add('picked-color-presentation');
 
 		const tooltip = localize('clickToToggleColorOptions', "Click to toggle color options (rgb/hsl/hex)");
diff --git a/src/vs/editor/contrib/colorPicker/browser/colorPickerParts/colorPickerInsertButton.ts b/src/vs/editor/contrib/colorPicker/browser/colorPickerParts/colorPickerInsertButton.ts
index 83c7ec84f1b..f301a36cf31 100644
--- a/src/vs/editor/contrib/colorPicker/browser/colorPickerParts/colorPickerInsertButton.ts
+++ b/src/vs/editor/contrib/colorPicker/browser/colorPickerParts/colorPickerInsertButton.ts
@@ -15,7 +15,7 @@ export class InsertButton extends Disposable {
 
 	constructor(container: HTMLElement) {
 		super();
-		this._button = dom.append(container, document.createElement('button'));
+		this._button = dom.append(container, dom.createElement('button'));
 		this._button.classList.add('insert-button');
 		this._button.textContent = 'Insert';
 		this._register(dom.addDisposableListener(this._button, dom.EventType.CLICK, () => {
diff --git a/src/vs/editor/contrib/colorPicker/browser/colorPickerParts/colorPickerSaturationBox.ts b/src/vs/editor/contrib/colorPicker/browser/colorPickerParts/colorPickerSaturationBox.ts
index feb65929064..4533770f21e 100644
--- a/src/vs/editor/contrib/colorPicker/browser/colorPickerParts/colorPickerSaturationBox.ts
+++ b/src/vs/editor/contrib/colorPicker/browser/colorPickerParts/colorPickerSaturationBox.ts
@@ -34,7 +34,7 @@ export class SaturationBox extends Disposable {
 		dom.append(container, this._domNode);
 
 		// Create canvas, draw selected color
-		this._canvas = document.createElement('canvas');
+		this._canvas = dom.createElement('canvas');
 		this._canvas.className = 'saturation-box';
 		dom.append(this._domNode, this._canvas);
 
@@ -58,7 +58,7 @@ export class SaturationBox extends Disposable {
 	}
 
 	private onPointerDown(e: PointerEvent): void {
-		if (!e.target || !(e.target instanceof Element)) {
+		if (!e.target || !dom.isElement(e.target)) {
 			return;
 		}
 		this.monitor = this._register(new GlobalPointerMoveMonitor());
diff --git a/src/vs/editor/contrib/colorPicker/browser/colorPickerParts/colorPickerStrip.ts b/src/vs/editor/contrib/colorPicker/browser/colorPickerParts/colorPickerStrip.ts
index 5702c8e4bcd..10b12b270f9 100644
--- a/src/vs/editor/contrib/colorPicker/browser/colorPickerParts/colorPickerStrip.ts
+++ b/src/vs/editor/contrib/colorPicker/browser/colorPickerParts/colorPickerStrip.ts
@@ -56,7 +56,7 @@ export abstract class Strip extends Disposable {
 	}
 
 	private onPointerDown(e: PointerEvent): void {
-		if (!e.target || !(e.target instanceof Element)) {
+		if (!e.target || !dom.isElement(e.target)) {
 			return;
 		}
 		const monitor = this._register(new GlobalPointerMoveMonitor());
diff --git a/src/vs/editor/contrib/colorPicker/browser/standaloneColorPicker/standaloneColorPickerWidget.ts b/src/vs/editor/contrib/colorPicker/browser/standaloneColorPicker/standaloneColorPickerWidget.ts
index f15557441bd..70c9fad8e67 100644
--- a/src/vs/editor/contrib/colorPicker/browser/standaloneColorPicker/standaloneColorPickerWidget.ts
+++ b/src/vs/editor/contrib/colorPicker/browser/standaloneColorPicker/standaloneColorPickerWidget.ts
@@ -44,7 +44,7 @@ export class StandaloneColorPickerWidget extends Disposable implements IContentW
 	private readonly _position: Position | undefined = undefined;
 	private readonly _standaloneColorPickerParticipant: StandaloneColorPickerParticipant;
 
-	private _body: HTMLElement = document.createElement('div');
+	private _body: HTMLElement = dom.createElement('div');
 	private _colorHover: StandaloneColorPickerHover | null = null;
 	private _selectionSetInEditor: boolean = false;
 
diff --git a/src/vs/editor/contrib/find/browser/findOptionsWidget.ts b/src/vs/editor/contrib/find/browser/findOptionsWidget.ts
index 137f792ff50..97bf05bbb77 100644
--- a/src/vs/editor/contrib/find/browser/findOptionsWidget.ts
+++ b/src/vs/editor/contrib/find/browser/findOptionsWidget.ts
@@ -39,7 +39,7 @@ export class FindOptionsWidget extends Widget implements IOverlayWidget {
 		this._state = state;
 		this._keybindingService = keybindingService;
 
-		this._domNode = document.createElement('div');
+		this._domNode = dom.createElement('div');
 		this._domNode.className = 'findOptionsWidget';
 		this._domNode.style.display = 'none';
 		this._domNode.style.top = '10px';
diff --git a/src/vs/editor/contrib/find/browser/findWidget.ts b/src/vs/editor/contrib/find/browser/findWidget.ts
index 97d96df256f..36ddbefd428 100644
--- a/src/vs/editor/contrib/find/browser/findWidget.ts
+++ b/src/vs/editor/contrib/find/browser/findWidget.ts
@@ -98,7 +98,7 @@ export class FindWidgetViewZone implements IViewZone {
 
 		this.heightInPx = FIND_INPUT_AREA_HEIGHT;
 		this.suppressMouseDown = false;
-		this.domNode = document.createElement('div');
+		this.domNode = dom.createElement('div');
 		this.domNode.className = 'dock-find-viewzone';
 	}
 }
@@ -995,7 +995,7 @@ export class FindWidget extends Widget implements IOverlayWidget, IVerticalSashL
 			this._register(this._findInput.onMouseDown((e) => this._onFindInputMouseDown(e)));
 		}
 
-		this._matchesCount = document.createElement('div');
+		this._matchesCount = dom.createElement('div');
 		this._matchesCount.className = 'matchesCount';
 		this._updateMatchesCount();
 
@@ -1022,10 +1022,10 @@ export class FindWidget extends Widget implements IOverlayWidget, IVerticalSashL
 			}
 		}, this._hoverService));
 
-		const findPart = document.createElement('div');
+		const findPart = dom.createElement('div');
 		findPart.className = 'find-part';
 		findPart.appendChild(this._findInput.domNode);
-		const actionsContainer = document.createElement('div');
+		const actionsContainer = dom.createElement('div');
 		actionsContainer.className = 'find-actions';
 		findPart.appendChild(actionsContainer);
 		actionsContainer.appendChild(this._matchesCount);
@@ -1163,11 +1163,11 @@ export class FindWidget extends Widget implements IOverlayWidget, IVerticalSashL
 			}
 		}, this._hoverService));
 
-		const replacePart = document.createElement('div');
+		const replacePart = dom.createElement('div');
 		replacePart.className = 'replace-part';
 		replacePart.appendChild(this._replaceInput.domNode);
 
-		const replaceActionsContainer = document.createElement('div');
+		const replaceActionsContainer = dom.createElement('div');
 		replaceActionsContainer.className = 'replace-actions';
 		replacePart.appendChild(replaceActionsContainer);
 
@@ -1190,7 +1190,7 @@ export class FindWidget extends Widget implements IOverlayWidget, IVerticalSashL
 		this._toggleReplaceBtn.setExpanded(this._isReplaceVisible);
 
 		// Widget
-		this._domNode = document.createElement('div');
+		this._domNode = dom.createElement('div');
 		this._domNode.className = 'editor-widget find-widget';
 		this._domNode.setAttribute('aria-hidden', 'true');
 		this._domNode.ariaLabel = NLS_FIND_DIALOG_LABEL;
@@ -1325,7 +1325,7 @@ export class SimpleButton extends Widget {
 			className = className + ' ' + ThemeIcon.asClassName(this._opts.icon);
 		}
 
-		this._domNode = document.createElement('div');
+		this._domNode = dom.createElement('div');
 		this._domNode.tabIndex = 0;
 		this._domNode.className = className;
 		this._domNode.setAttribute('role', 'button');
diff --git a/src/vs/editor/contrib/gotoError/browser/gotoErrorWidget.ts b/src/vs/editor/contrib/gotoError/browser/gotoErrorWidget.ts
index 3d2538512e7..cff00303494 100644
--- a/src/vs/editor/contrib/gotoError/browser/gotoErrorWidget.ts
+++ b/src/vs/editor/contrib/gotoError/browser/gotoErrorWidget.ts
@@ -53,16 +53,16 @@ class MessageWidget {
 	) {
 		this._editor = editor;
 
-		const domNode = document.createElement('div');
+		const domNode = dom.createElement('div');
 		domNode.className = 'descriptioncontainer';
 
-		this._messageBlock = document.createElement('div');
+		this._messageBlock = dom.createElement('div');
 		this._messageBlock.classList.add('message');
 		this._messageBlock.setAttribute('aria-live', 'assertive');
 		this._messageBlock.setAttribute('role', 'alert');
 		domNode.appendChild(this._messageBlock);
 
-		this._relatedBlock = document.createElement('div');
+		this._relatedBlock = dom.createElement('div');
 		domNode.appendChild(this._relatedBlock);
 		this._disposables.add(dom.addStandardDisposableListener(this._relatedBlock, 'click', event => {
 			event.preventDefault();
@@ -114,7 +114,7 @@ class MessageWidget {
 		this._editor.applyFontInfo(this._messageBlock);
 		let lastLineElement = this._messageBlock;
 		for (const line of lines) {
-			lastLineElement = document.createElement('div');
+			lastLineElement = dom.createElement('div');
 			lastLineElement.innerText = line;
 			if (line === '') {
 				lastLineElement.style.height = this._messageBlock.style.lineHeight;
@@ -122,18 +122,18 @@ class MessageWidget {
 			this._messageBlock.appendChild(lastLineElement);
 		}
 		if (source || code) {
-			const detailsElement = document.createElement('span');
+			const detailsElement = dom.createElement('span');
 			detailsElement.classList.add('details');
 			lastLineElement.appendChild(detailsElement);
 			if (source) {
-				const sourceElement = document.createElement('span');
+				const sourceElement = dom.createElement('span');
 				sourceElement.innerText = source;
 				sourceElement.classList.add('source');
 				detailsElement.appendChild(sourceElement);
 			}
 			if (code) {
 				if (typeof code === 'string') {
-					const codeElement = document.createElement('span');
+					const codeElement = dom.createElement('span');
 					codeElement.innerText = `(${code})`;
 					codeElement.classList.add('code');
 					detailsElement.appendChild(codeElement);
@@ -157,21 +157,21 @@ class MessageWidget {
 		dom.clearNode(this._relatedBlock);
 		this._editor.applyFontInfo(this._relatedBlock);
 		if (isNonEmptyArray(relatedInformation)) {
-			const relatedInformationNode = this._relatedBlock.appendChild(document.createElement('div'));
+			const relatedInformationNode = this._relatedBlock.appendChild(dom.createElement('div'));
 			relatedInformationNode.style.paddingTop = `${Math.floor(this._editor.getOption(EditorOption.lineHeight) * 0.66)}px`;
 			this._lines += 1;
 
 			for (const related of relatedInformation) {
 
-				const container = document.createElement('div');
+				const container = dom.createElement('div');
 
-				const relatedResource = document.createElement('a');
+				const relatedResource = dom.createElement('a');
 				relatedResource.classList.add('filename');
 				relatedResource.innerText = `${this._labelService.getUriBasenameLabel(related.resource)}(${related.startLineNumber}, ${related.startColumn}): `;
 				relatedResource.title = this._labelService.getUriLabel(related.resource);
 				this._relatedDiagnostics.set(relatedResource, related);
 
-				const relatedMessage = document.createElement('span');
+				const relatedMessage = dom.createElement('span');
 				relatedMessage.innerText = related.message;
 
 				container.appendChild(relatedResource);
@@ -321,7 +321,7 @@ export class MarkerNavigationWidget extends PeekViewWidget {
 		this._parentContainer.tabIndex = 0;
 		this._parentContainer.setAttribute('role', 'tooltip');
 
-		this._container = document.createElement('div');
+		this._container = dom.createElement('div');
 		container.appendChild(this._container);
 
 		this._message = new MessageWidget(this._container, this.editor, related => this._onDidSelectRelatedInformation.fire(related), this._openerService, this._labelService);
diff --git a/src/vs/editor/contrib/gotoSymbol/browser/peek/referencesTree.ts b/src/vs/editor/contrib/gotoSymbol/browser/peek/referencesTree.ts
index c6cda849675..2f6e4f1051b 100644
--- a/src/vs/editor/contrib/gotoSymbol/browser/peek/referencesTree.ts
+++ b/src/vs/editor/contrib/gotoSymbol/browser/peek/referencesTree.ts
@@ -114,7 +114,7 @@ class FileReferencesTemplate extends Disposable {
 		@ILabelService private readonly _labelService: ILabelService
 	) {
 		super();
-		const parent = document.createElement('div');
+		const parent = dom.createElement('div');
 		parent.classList.add('reference-file');
 		this.file = this._register(new IconLabel(parent, { supportHighlights: true }));
 
diff --git a/src/vs/editor/contrib/inlineCompletions/browser/hintsWidget/hoverParticipant.ts b/src/vs/editor/contrib/inlineCompletions/browser/hintsWidget/hoverParticipant.ts
index 84650683bbe..7c55c3c7417 100644
--- a/src/vs/editor/contrib/inlineCompletions/browser/hintsWidget/hoverParticipant.ts
+++ b/src/vs/editor/contrib/inlineCompletions/browser/hintsWidget/hoverParticipant.ts
@@ -115,7 +115,7 @@ export class InlineCompletionsHoverParticipant implements IEditorHoverParticipan
 		}
 
 		const model = part.controller.model.get()!;
-		const widgetNode: HTMLElement = document.createElement('div');
+		const widgetNode: HTMLElement = dom.createElement('div');
 		context.fragment.appendChild(widgetNode);
 
 		disposables.add(autorunWithStore((reader, store) => {
diff --git a/src/vs/editor/contrib/inlineCompletions/browser/view/ghostText/ghostTextView.ts b/src/vs/editor/contrib/inlineCompletions/browser/view/ghostText/ghostTextView.ts
index 3d0f6602e06..9dbd67c2db7 100644
--- a/src/vs/editor/contrib/inlineCompletions/browser/view/ghostText/ghostTextView.ts
+++ b/src/vs/editor/contrib/inlineCompletions/browser/view/ghostText/ghostTextView.ts
@@ -29,7 +29,7 @@ import { InlineDecorationType } from '../../../../../common/viewModel.js';
 import { GhostText, GhostTextReplacement, IGhostTextLine } from '../../model/ghostText.js';
 import { RangeSingleLine } from '../../../../../common/core/ranges/rangeSingleLine.js';
 import { ColumnRange } from '../../../../../common/core/ranges/columnRange.js';
-import { addDisposableListener, getWindow, isHTMLElement, n } from '../../../../../../base/browser/dom.js';
+import { addDisposableListener, createElement, getWindow, isHTMLElement, n } from '../../../../../../base/browser/dom.js';
 import './ghostTextView.css';
 import { IMouseEvent, StandardMouseEvent } from '../../../../../../base/browser/mouseEvent.js';
 import { CodeEditorWidget } from '../../../../../browser/widget/codeEditor/codeEditorWidget.js';
@@ -494,7 +494,7 @@ export class AdditionalLinesWidget extends Disposable {
 
 			const heightInLines = Math.max(additionalLines.length, minReservedLineCount);
 			if (heightInLines > 0) {
-				const domNode = document.createElement('div');
+				const domNode = createElement('div');
 				renderLines(domNode, tabSize, additionalLines, this._editor.getOptions(), this._isClickable);
 
 				if (this._isClickable) {
diff --git a/src/vs/editor/contrib/inlineCompletions/browser/view/inlineEdits/inlineEditsViews/debugVisualization.ts b/src/vs/editor/contrib/inlineCompletions/browser/view/inlineEdits/inlineEditsViews/debugVisualization.ts
index 169b6bc6156..27a85abf4b4 100644
--- a/src/vs/editor/contrib/inlineCompletions/browser/view/inlineEdits/inlineEditsViews/debugVisualization.ts
+++ b/src/vs/editor/contrib/inlineCompletions/browser/view/inlineEdits/inlineEditsViews/debugVisualization.ts
@@ -3,6 +3,7 @@
  *  Licensed under the MIT License. See License.txt in the project root for license information.
  *--------------------------------------------------------------------------------------------*/
 
+import { createElement } from '../../../../../../../base/browser/dom.js';
 import { IDisposable } from '../../../../../../../base/common/lifecycle.js';
 import { IReader, derived } from '../../../../../../../base/common/observable.js';
 import { Rect } from '../../../../../../common/core/2d/rect.js';
@@ -54,13 +55,13 @@ class HtmlRectVisualizer implements IVisualizationEffect {
 	) { }
 
 	visualize(): IDisposable {
-		const div = document.createElement('div');
+		const div = createElement('div');
 		div.style.position = 'fixed';
 		div.style.border = '1px solid red';
 		div.style.pointerEvents = 'none';
 		div.style.zIndex = '100000';
 
-		const label = document.createElement('div');
+		const label = createElement('div');
 		label.textContent = this._name;
 		label.style.position = 'absolute';
 		label.style.top = '-20px';
diff --git a/src/vs/editor/contrib/inlineCompletions/browser/view/inlineEdits/inlineEditsViews/inlineEditsCustomView.ts b/src/vs/editor/contrib/inlineCompletions/browser/view/inlineEdits/inlineEditsViews/inlineEditsCustomView.ts
index 78ed1ad3988..1467936f44f 100644
--- a/src/vs/editor/contrib/inlineCompletions/browser/view/inlineEdits/inlineEditsViews/inlineEditsCustomView.ts
+++ b/src/vs/editor/contrib/inlineCompletions/browser/view/inlineEdits/inlineEditsViews/inlineEditsCustomView.ts
@@ -2,7 +2,7 @@
  *  Copyright (c) Microsoft Corporation. All rights reserved.
  *  Licensed under the MIT License. See License.txt in the project root for license information.
  *--------------------------------------------------------------------------------------------*/
-import { getWindow, n } from '../../../../../../../base/browser/dom.js';
+import { createElement, getWindow, n } from '../../../../../../../base/browser/dom.js';
 import { IMouseEvent, StandardMouseEvent } from '../../../../../../../base/browser/mouseEvent.js';
 import { Emitter } from '../../../../../../../base/common/event.js';
 import { Disposable } from '../../../../../../../base/common/lifecycle.js';
@@ -197,7 +197,7 @@ export class InlineEditsCustomView extends Disposable implements IInlineEditsVie
 
 	private getRendering(state: { rect: IObservable<Rect>; label: string }, styles: IObservable<{ background: string; border: string }>) {
 
-		const line = document.createElement('div');
+		const line = createElement('div');
 		const t = this._editor.getModel()!.tokenization.tokenizeLinesAt(1, [state.label])?.[0];
 		let tokens: LineTokens;
 		if (t) {
diff --git a/src/vs/editor/contrib/inlineCompletions/browser/view/inlineEdits/inlineEditsViews/inlineEditsLineReplacementView.ts b/src/vs/editor/contrib/inlineCompletions/browser/view/inlineEdits/inlineEditsViews/inlineEditsLineReplacementView.ts
index 2a40722dd23..9a46ea44b8d 100644
--- a/src/vs/editor/contrib/inlineCompletions/browser/view/inlineEdits/inlineEditsViews/inlineEditsLineReplacementView.ts
+++ b/src/vs/editor/contrib/inlineCompletions/browser/view/inlineEdits/inlineEditsViews/inlineEditsLineReplacementView.ts
@@ -3,7 +3,7 @@
  *  Licensed under the MIT License. See License.txt in the project root for license information.
  *--------------------------------------------------------------------------------------------*/
 
-import { $, getWindow, n } from '../../../../../../../base/browser/dom.js';
+import { $, createElement, getWindow, n } from '../../../../../../../base/browser/dom.js';
 import { IMouseEvent, StandardMouseEvent } from '../../../../../../../base/browser/mouseEvent.js';
 import { Emitter } from '../../../../../../../base/common/event.js';
 import { Disposable, toDisposable } from '../../../../../../../base/common/lifecycle.js';
@@ -79,7 +79,7 @@ export class InlineEditsLineReplacementView extends Disposable implements IInlin
 			const textModel = this._editor.model.get()!;
 			const startLineNumber = edit.modifiedRange.startLineNumber;
 			for (let i = 0; i < edit.modifiedRange.length; i++) {
-				const line = document.createElement('div');
+				const line = createElement('div');
 				const lineNumber = startLineNumber + i;
 				const modLine = edit.modifiedLines[i].slice(maxPrefixTrim);
 
diff --git a/src/vs/editor/contrib/inlineCompletions/browser/view/inlineEdits/inlineEditsViews/inlineEditsWordReplacementView.ts b/src/vs/editor/contrib/inlineCompletions/browser/view/inlineEdits/inlineEditsViews/inlineEditsWordReplacementView.ts
index 97f90697f6e..5aa610527ea 100644
--- a/src/vs/editor/contrib/inlineCompletions/browser/view/inlineEdits/inlineEditsViews/inlineEditsWordReplacementView.ts
+++ b/src/vs/editor/contrib/inlineCompletions/browser/view/inlineEdits/inlineEditsViews/inlineEditsWordReplacementView.ts
@@ -3,7 +3,7 @@
  *  Licensed under the MIT License. See License.txt in the project root for license information.
  *--------------------------------------------------------------------------------------------*/
 
-import { getWindow, n, ObserverNodeWithElement } from '../../../../../../../base/browser/dom.js';
+import { createElement, getWindow, n, ObserverNodeWithElement } from '../../../../../../../base/browser/dom.js';
 import { IMouseEvent, StandardMouseEvent } from '../../../../../../../base/browser/mouseEvent.js';
 import { Emitter } from '../../../../../../../base/common/event.js';
 import { Disposable } from '../../../../../../../base/common/lifecycle.js';
@@ -52,7 +52,7 @@ export class InlineEditsWordReplacementView extends Disposable implements IInlin
 		this.onDidClick = this._onDidClick.event;
 		this._start = this._editor.observePosition(constObservable(this._edit.range.getStartPosition()), this._store);
 		this._end = this._editor.observePosition(constObservable(this._edit.range.getEndPosition()), this._store);
-		this._line = document.createElement('div');
+		this._line = createElement('div');
 		this._hoverableElement = observableValue<ObserverNodeWithElement | null>(this, null);
 		this.isHovered = this._hoverableElement.map((e, reader) => e?.didMouseMoveDuringHover.read(reader) ?? false);
 		this._renderTextEffect = derived(_reader => {
diff --git a/src/vs/editor/contrib/message/browser/messageController.ts b/src/vs/editor/contrib/message/browser/messageController.ts
index 8e4d1e2e9c3..cdcce92bf59 100644
--- a/src/vs/editor/contrib/message/browser/messageController.ts
+++ b/src/vs/editor/contrib/message/browser/messageController.ts
@@ -166,15 +166,15 @@ class MessageWidget implements IContentWidget {
 		this._editor.revealLinesInCenterIfOutsideViewport(lineNumber, lineNumber, ScrollType.Smooth);
 		this._position = { lineNumber, column };
 
-		this._domNode = document.createElement('div');
+		this._domNode = dom.createElement('div');
 		this._domNode.classList.add('monaco-editor-overlaymessage');
 		this._domNode.style.marginLeft = '-6px';
 
-		const anchorTop = document.createElement('div');
+		const anchorTop = dom.createElement('div');
 		anchorTop.classList.add('anchor', 'top');
 		this._domNode.appendChild(anchorTop);
 
-		const message = document.createElement('div');
+		const message = dom.createElement('div');
 		if (typeof text === 'string') {
 			message.classList.add('message');
 			message.textContent = text;
@@ -184,7 +184,7 @@ class MessageWidget implements IContentWidget {
 		}
 		this._domNode.appendChild(message);
 
-		const anchorBottom = document.createElement('div');
+		const anchorBottom = dom.createElement('div');
 		anchorBottom.classList.add('anchor', 'below');
 		this._domNode.appendChild(anchorBottom);
 
diff --git a/src/vs/editor/contrib/parameterHints/browser/parameterHintsWidget.ts b/src/vs/editor/contrib/parameterHints/browser/parameterHintsWidget.ts
index 7aa3fac2c6e..be8e9d99a2b 100644
--- a/src/vs/editor/contrib/parameterHints/browser/parameterHintsWidget.ts
+++ b/src/vs/editor/contrib/parameterHints/browser/parameterHintsWidget.ts
@@ -300,14 +300,14 @@ export class ParameterHintsWidget extends Disposable implements IContentWidget {
 	private renderParameters(parent: HTMLElement, signature: languages.SignatureInformation, activeParameterIndex: number): void {
 		const [start, end] = this.getParameterLabelOffsets(signature, activeParameterIndex);
 
-		const beforeSpan = document.createElement('span');
+		const beforeSpan = dom.createElement('span');
 		beforeSpan.textContent = signature.label.substring(0, start);
 
-		const paramSpan = document.createElement('span');
+		const paramSpan = dom.createElement('span');
 		paramSpan.textContent = signature.label.substring(start, end);
 		paramSpan.className = 'parameter active';
 
-		const afterSpan = document.createElement('span');
+		const afterSpan = dom.createElement('span');
 		afterSpan.textContent = signature.label.substring(end);
 
 		dom.append(parent, beforeSpan, paramSpan, afterSpan);
diff --git a/src/vs/editor/contrib/rename/browser/renameWidget.ts b/src/vs/editor/contrib/rename/browser/renameWidget.ts
index d2ce61a6b59..c6528634a22 100644
--- a/src/vs/editor/contrib/rename/browser/renameWidget.ts
+++ b/src/vs/editor/contrib/rename/browser/renameWidget.ts
@@ -195,7 +195,7 @@ export class RenameWidget implements IRenameWidget, IContentWidget, IDisposable
 
 	getDomNode(): HTMLElement {
 		if (!this._domNode) {
-			this._domNode = document.createElement('div');
+			this._domNode = dom.createElement('div');
 			this._domNode.className = 'monaco-editor rename-box';
 
 			this._domNode.appendChild(this._inputWithButton.domNode);
@@ -227,7 +227,7 @@ export class RenameWidget implements IRenameWidget, IContentWidget, IDisposable
 				})
 			);
 
-			this._label = document.createElement('div');
+			this._label = dom.createElement('div');
 			this._label.className = 'rename-label';
 			this._domNode.appendChild(this._label);
 
@@ -686,7 +686,7 @@ class RenameCandidateListView {
 		this._lineHeight = opts.fontInfo.lineHeight;
 		this._typicalHalfwidthCharacterWidth = opts.fontInfo.typicalHalfwidthCharacterWidth;
 
-		this._listContainer = document.createElement('div');
+		this._listContainer = dom.createElement('div');
 		this._listContainer.className = 'rename-box rename-candidate-list-container';
 		parent.appendChild(this._listContainer);
 
@@ -912,13 +912,13 @@ class InputWithButton implements IDisposable {
 	get domNode() {
 		if (!this._domNode) {
 
-			this._domNode = document.createElement('div');
+			this._domNode = dom.createElement('div');
 			this._domNode.className = 'rename-input-with-button';
 			this._domNode.style.display = 'flex';
 			this._domNode.style.flexDirection = 'row';
 			this._domNode.style.alignItems = 'center';
 
-			this._inputNode = document.createElement('input');
+			this._inputNode = dom.createElement('input');
 			this._inputNode.className = 'rename-input';
 			this._inputNode.type = 'text';
 			this._inputNode.style.border = 'none';
@@ -926,7 +926,7 @@ class InputWithButton implements IDisposable {
 
 			this._domNode.appendChild(this._inputNode);
 
-			this._buttonNode = document.createElement('div');
+			this._buttonNode = dom.createElement('div');
 			this._buttonNode.className = 'rename-suggestions-button';
 			this._buttonNode.setAttribute('tabindex', '0');
 
@@ -1018,7 +1018,7 @@ class RenameCandidateView {
 
 	constructor(parent: HTMLElement, fontInfo: FontInfo) {
 
-		this._domNode = document.createElement('div');
+		this._domNode = dom.createElement('div');
 		this._domNode.className = 'rename-box rename-candidate';
 		this._domNode.style.display = `flex`;
 		this._domNode.style.columnGap = `5px`;
@@ -1027,7 +1027,7 @@ class RenameCandidateView {
 		this._domNode.style.padding = `${RenameCandidateView._PADDING}px`;
 
 		// @ulugbekna: needed to keep space when the `icon.style.display` is set to `none`
-		const iconContainer = document.createElement('div');
+		const iconContainer = dom.createElement('div');
 		iconContainer.style.display = `flex`;
 		iconContainer.style.alignItems = `center`;
 		iconContainer.style.width = iconContainer.style.height = `${fontInfo.lineHeight * 0.8}px`;
@@ -1037,7 +1037,7 @@ class RenameCandidateView {
 		this._icon.style.display = `none`;
 		iconContainer.appendChild(this._icon);
 
-		this._label = document.createElement('div');
+		this._label = dom.createElement('div');
 		domFontInfo.applyFontInfo(this._label, fontInfo);
 		this._domNode.appendChild(this._label);
 
diff --git a/src/vs/editor/contrib/stickyScroll/browser/stickyScrollWidget.ts b/src/vs/editor/contrib/stickyScroll/browser/stickyScrollWidget.ts
index 7790a32ce70..b1ee01cca59 100644
--- a/src/vs/editor/contrib/stickyScroll/browser/stickyScrollWidget.ts
+++ b/src/vs/editor/contrib/stickyScroll/browser/stickyScrollWidget.ts
@@ -52,10 +52,10 @@ const STICKY_IS_FOLDING_ICON_ATTR = 'data-sticky-is-folding-icon';
 export class StickyScrollWidget extends Disposable implements IOverlayWidget {
 
 	private readonly _foldingIconStore = new DisposableStore();
-	private readonly _rootDomNode: HTMLElement = document.createElement('div');
-	private readonly _lineNumbersDomNode: HTMLElement = document.createElement('div');
-	private readonly _linesDomNodeScrollable: HTMLElement = document.createElement('div');
-	private readonly _linesDomNode: HTMLElement = document.createElement('div');
+	private readonly _rootDomNode: HTMLElement = dom.createElement('div');
+	private readonly _lineNumbersDomNode: HTMLElement = dom.createElement('div');
+	private readonly _linesDomNodeScrollable: HTMLElement = dom.createElement('div');
+	private readonly _linesDomNode: HTMLElement = dom.createElement('div');
 
 	private readonly _editor: ICodeEditor;
 
@@ -325,7 +325,7 @@ export class StickyScrollWidget extends Disposable implements IOverlayWidget {
 			newLine = sb.build();
 		}
 
-		const lineHTMLNode = document.createElement('span');
+		const lineHTMLNode = dom.createElement('span');
 		lineHTMLNode.setAttribute(STICKY_INDEX_ATTR, String(index));
 		lineHTMLNode.setAttribute(STICKY_IS_LINE_ATTR, '');
 		lineHTMLNode.setAttribute('role', 'listitem');
@@ -335,7 +335,7 @@ export class StickyScrollWidget extends Disposable implements IOverlayWidget {
 		lineHTMLNode.style.lineHeight = `${lineHeight}px`;
 		lineHTMLNode.innerHTML = newLine as string;
 
-		const lineNumberHTMLNode = document.createElement('span');
+		const lineNumberHTMLNode = dom.createElement('span');
 		lineNumberHTMLNode.setAttribute(STICKY_INDEX_ATTR, String(index));
 		lineNumberHTMLNode.setAttribute(STICKY_IS_LINE_NUMBER_ATTR, '');
 		lineNumberHTMLNode.className = 'sticky-line-number';
@@ -343,7 +343,7 @@ export class StickyScrollWidget extends Disposable implements IOverlayWidget {
 		const lineNumbersWidth = layoutInfo.contentLeft;
 		lineNumberHTMLNode.style.width = `${lineNumbersWidth}px`;
 
-		const innerLineNumberHTML = document.createElement('span');
+		const innerLineNumberHTML = dom.createElement('span');
 		if (lineNumberOption.renderType === RenderLineNumbersType.On || lineNumberOption.renderType === RenderLineNumbersType.Interval && line % 10 === 0) {
 			innerLineNumberHTML.innerText = line.toString();
 		} else if (lineNumberOption.renderType === RenderLineNumbersType.Relative) {
@@ -540,7 +540,7 @@ class StickyFoldingIcon {
 		public foldingEndLine: number,
 		public dimension: number
 	) {
-		this.domNode = document.createElement('div');
+		this.domNode = dom.createElement('div');
 		this.domNode.style.width = `26px`;
 		this.domNode.style.height = `${dimension}px`;
 		this.domNode.style.lineHeight = `${dimension}px`;
diff --git a/src/vs/editor/contrib/zoneWidget/browser/zoneWidget.ts b/src/vs/editor/contrib/zoneWidget/browser/zoneWidget.ts
index 96820f1eafd..1d4cf12d570 100644
--- a/src/vs/editor/contrib/zoneWidget/browser/zoneWidget.ts
+++ b/src/vs/editor/contrib/zoneWidget/browser/zoneWidget.ts
@@ -198,7 +198,7 @@ export abstract class ZoneWidget implements IHorizontalSashLayoutProvider {
 		this._positionMarkerId = this.editor.createDecorationsCollection();
 		this.options = objects.deepClone(options);
 		objects.mixin(this.options, defaultOptions, false);
-		this.domNode = document.createElement('div');
+		this.domNode = dom.createElement('div');
 		if (!this.options.isAccessible) {
 			this.domNode.setAttribute('aria-hidden', 'true');
 			this.domNode.setAttribute('role', 'presentation');
@@ -239,7 +239,7 @@ export abstract class ZoneWidget implements IHorizontalSashLayoutProvider {
 			this.domNode.classList.add(this.options.className);
 		}
 
-		this.container = document.createElement('div');
+		this.container = dom.createElement('div');
 		this.container.classList.add('zone-widget-container');
 		this.domNode.appendChild(this.container);
 		if (this.options.showArrow) {
@@ -390,7 +390,7 @@ export abstract class ZoneWidget implements IHorizontalSashLayoutProvider {
 		this.domNode.style.left = this._getLeft(layoutInfo) + 'px';
 
 		// Render the widget as zone (rendering) and widget (lifecycle)
-		const viewZoneDomNode = document.createElement('div');
+		const viewZoneDomNode = dom.createElement('div');
 		viewZoneDomNode.style.overflow = 'hidden';
 		const lineHeight = this.editor.getOption(EditorOption.lineHeight);
 
diff --git a/src/vs/editor/standalone/browser/iPadShowKeyboard/iPadShowKeyboard.ts b/src/vs/editor/standalone/browser/iPadShowKeyboard/iPadShowKeyboard.ts
index 3c3ce892ce9..eccb7f0b2f1 100644
--- a/src/vs/editor/standalone/browser/iPadShowKeyboard/iPadShowKeyboard.ts
+++ b/src/vs/editor/standalone/browser/iPadShowKeyboard/iPadShowKeyboard.ts
@@ -64,7 +64,7 @@ class ShowKeyboardWidget extends Disposable implements IOverlayWidget {
 	constructor(editor: ICodeEditor) {
 		super();
 		this.editor = editor;
-		this._domNode = document.createElement('textarea');
+		this._domNode = dom.createElement('textarea');
 		this._domNode.className = 'iPadShowKeyboard';
 
 		this._register(dom.addDisposableListener(this._domNode, 'touchstart', (e) => {
diff --git a/src/vs/editor/standalone/browser/inspectTokens/inspectTokens.ts b/src/vs/editor/standalone/browser/inspectTokens/inspectTokens.ts
index 2eb75568747..220eb1ce517 100644
--- a/src/vs/editor/standalone/browser/inspectTokens/inspectTokens.ts
+++ b/src/vs/editor/standalone/browser/inspectTokens/inspectTokens.ts
@@ -4,7 +4,7 @@
  *--------------------------------------------------------------------------------------------*/
 
 import './inspectTokens.css';
-import { $, append, reset } from '../../../../base/browser/dom.js';
+import { $, append, createElement, reset } from '../../../../base/browser/dom.js';
 import { CharCode } from '../../../../base/common/charCode.js';
 import { Color } from '../../../../base/common/color.js';
 import { KeyCode } from '../../../../base/common/keyCodes.js';
@@ -159,7 +159,7 @@ class InspectTokensWidget extends Disposable implements IContentWidget {
 		this._editor = editor;
 		this._languageService = languageService;
 		this._model = this._editor.getModel();
-		this._domNode = document.createElement('div');
+		this._domNode = createElement('div');
 		this._domNode.className = 'tokens-inspect-widget';
 		this._tokenizationSupport = getSafeTokenizationSupport(this._languageService.languageIdCodec, this._model.getLanguageId());
 		this._compute(this._editor.getPosition());
diff --git a/src/vs/editor/standalone/browser/quickInput/standaloneQuickInputService.ts b/src/vs/editor/standalone/browser/quickInput/standaloneQuickInputService.ts
index 4a06e551636..50f4fbfd43c 100644
--- a/src/vs/editor/standalone/browser/quickInput/standaloneQuickInputService.ts
+++ b/src/vs/editor/standalone/browser/quickInput/standaloneQuickInputService.ts
@@ -19,6 +19,7 @@ import { QuickInputController, IQuickInputControllerHost } from '../../../../pla
 import { QuickInputService } from '../../../../platform/quickinput/browser/quickInputService.js';
 import { createSingleCallFunction } from '../../../../base/common/functional.js';
 import { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';
+import { createElement } from '../../../../base/browser/dom.js';
 
 class EditorScopedQuickInputService extends QuickInputService {
 
@@ -192,7 +193,7 @@ export class QuickInputEditorWidget implements IOverlayWidget {
 	private domNode: HTMLElement;
 
 	constructor(private codeEditor: ICodeEditor) {
-		this.domNode = document.createElement('div');
+		this.domNode = createElement('div');
 
 		this.codeEditor.addOverlayWidget(this);
 	}
diff --git a/src/vs/editor/test/browser/controller/imeRecorder.ts b/src/vs/editor/test/browser/controller/imeRecorder.ts
index 4b22ced5131..e0907af4257 100644
--- a/src/vs/editor/test/browser/controller/imeRecorder.ts
+++ b/src/vs/editor/test/browser/controller/imeRecorder.ts
@@ -9,6 +9,7 @@ import * as browser from '../../../../base/browser/browser.js';
 import * as platform from '../../../../base/common/platform.js';
 import { mainWindow } from '../../../../base/browser/window.js';
 import { TextAreaWrapper } from '../../../browser/controller/editContext/textArea/textAreaEditContextInput.js';
+import { createElement } from '../../../../base/browser/dom.js';
 
 (() => {
 
@@ -90,7 +91,7 @@ import { TextAreaWrapper } from '../../../browser/controller/editContext/textAre
 	}
 
 	function startTest() {
-		inputarea = document.createElement('textarea');
+		inputarea = createElement('textarea');
 		mainWindow.document.body.appendChild(inputarea);
 		inputarea.focus();
 		disposables.add(toDisposable(() => {
diff --git a/src/vs/editor/test/browser/controller/imeTester.ts b/src/vs/editor/test/browser/controller/imeTester.ts
index 25a9e6c5180..8bd1904355a 100644
--- a/src/vs/editor/test/browser/controller/imeTester.ts
+++ b/src/vs/editor/test/browser/controller/imeTester.ts
@@ -69,7 +69,7 @@ class TestView {
 		for (let i = 1; i <= this._model.getLineCount(); i++) {
 			const textNode = document.createTextNode(this._model.getModelLineContent(i));
 			output.appendChild(textNode);
-			const br = document.createElement('br');
+			const br = dom.createElement('br');
 			output.appendChild(br);
 		}
 	}
@@ -79,13 +79,13 @@ function doCreateTest(description: string, inputStr: string, expectedStr: string
 	let cursorOffset: number = 0;
 	let cursorLength: number = 0;
 
-	const container = document.createElement('div');
+	const container = dom.createElement('div');
 	container.className = 'container';
 
-	const title = document.createElement('div');
+	const title = dom.createElement('div');
 	title.className = 'title';
 
-	const inputStrStrong = document.createElement('strong');
+	const inputStrStrong = dom.createElement('strong');
 	inputStrStrong.innerText = inputStr;
 
 	title.innerText = description + '. Type ';
@@ -93,12 +93,12 @@ function doCreateTest(description: string, inputStr: string, expectedStr: string
 
 	container.appendChild(title);
 
-	const startBtn = document.createElement('button');
+	const startBtn = dom.createElement('button');
 	startBtn.innerText = 'Start';
 	container.appendChild(startBtn);
 
 
-	const input = document.createElement('textarea');
+	const input = dom.createElement('textarea');
 	input.setAttribute('rows', '10');
 	input.setAttribute('cols', '40');
 	container.appendChild(input);
@@ -133,15 +133,15 @@ function doCreateTest(description: string, inputStr: string, expectedStr: string
 		isSafari: browser.isSafari,
 	}, new TestAccessibilityService(), new NullLogService());
 
-	const output = document.createElement('pre');
+	const output = dom.createElement('pre');
 	output.className = 'output';
 	container.appendChild(output);
 
-	const check = document.createElement('pre');
+	const check = dom.createElement('pre');
 	check.className = 'check';
 	container.appendChild(check);
 
-	const br = document.createElement('br');
+	const br = dom.createElement('br');
 	br.style.clear = 'both';
 	container.appendChild(br);
 
diff --git a/src/vs/platform/actionWidget/browser/actionList.ts b/src/vs/platform/actionWidget/browser/actionList.ts
index 87cd115f124..0e8ea7f04aa 100644
--- a/src/vs/platform/actionWidget/browser/actionList.ts
+++ b/src/vs/platform/actionWidget/browser/actionList.ts
@@ -68,7 +68,7 @@ class HeaderRenderer<T> implements IListRenderer<IActionListItem<T>, IHeaderTemp
 	renderTemplate(container: HTMLElement): IHeaderTemplateData {
 		container.classList.add('group-header');
 
-		const text = document.createElement('span');
+		const text = dom.createElement('span');
 		container.append(text);
 
 		return { container, text };
@@ -95,15 +95,15 @@ class ActionItemRenderer<T> implements IListRenderer<IActionListItem<T>, IAction
 	renderTemplate(container: HTMLElement): IActionMenuTemplateData {
 		container.classList.add(this.templateId);
 
-		const icon = document.createElement('div');
+		const icon = dom.createElement('div');
 		icon.className = 'icon';
 		container.append(icon);
 
-		const text = document.createElement('span');
+		const text = dom.createElement('span');
 		text.className = 'title';
 		container.append(text);
 
-		const description = document.createElement('span');
+		const description = dom.createElement('span');
 		description.className = 'description';
 		container.append(description);
 
@@ -207,7 +207,7 @@ export class ActionList<T> extends Disposable {
 		@ILayoutService private readonly _layoutService: ILayoutService,
 	) {
 		super();
-		this.domNode = document.createElement('div');
+		this.domNode = dom.createElement('div');
 		this.domNode.classList.add('actionList');
 		const virtualDelegate: IListVirtualDelegate<IActionListItem<T>> = {
 			getHeight: element => element.kind === ActionListItemKind.Header ? this._headerLineHeight : this._actionLineHeight,
diff --git a/src/vs/platform/actionWidget/browser/actionWidget.ts b/src/vs/platform/actionWidget/browser/actionWidget.ts
index 2e037dca7ba..00e19645faa 100644
--- a/src/vs/platform/actionWidget/browser/actionWidget.ts
+++ b/src/vs/platform/actionWidget/browser/actionWidget.ts
@@ -99,7 +99,7 @@ export class ActionWidgetService extends Disposable implements IActionWidgetServ
 	}
 
 	private _renderWidget(element: HTMLElement, list: ActionList<unknown>, actionBarActions: readonly IAction[]): IDisposable {
-		const widget = document.createElement('div');
+		const widget = dom.createElement('div');
 		widget.classList.add('action-widget');
 		element.appendChild(widget);
 
@@ -112,13 +112,13 @@ export class ActionWidgetService extends Disposable implements IActionWidgetServ
 		const renderDisposables = new DisposableStore();
 
 		// Invisible div to block mouse interaction in the rest of the UI
-		const menuBlock = document.createElement('div');
+		const menuBlock = dom.createElement('div');
 		const block = element.appendChild(menuBlock);
 		block.classList.add('context-view-block');
 		renderDisposables.add(dom.addDisposableListener(block, dom.EventType.MOUSE_DOWN, e => e.stopPropagation()));
 
 		// Invisible div to block mouse interaction with the menu
-		const pointerBlockDiv = document.createElement('div');
+		const pointerBlockDiv = dom.createElement('div');
 		const pointerBlock = element.appendChild(pointerBlockDiv);
 		pointerBlock.classList.add('context-view-pointerBlock');
 
diff --git a/src/vs/workbench/api/browser/mainThreadCodeInsets.ts b/src/vs/workbench/api/browser/mainThreadCodeInsets.ts
index efc220d3c31..c981725b9df 100644
--- a/src/vs/workbench/api/browser/mainThreadCodeInsets.ts
+++ b/src/vs/workbench/api/browser/mainThreadCodeInsets.ts
@@ -3,7 +3,7 @@
  *  Licensed under the MIT License. See License.txt in the project root for license information.
  *--------------------------------------------------------------------------------------------*/
 
-import { getWindow } from '../../../base/browser/dom.js';
+import { createElement, getWindow } from '../../../base/browser/dom.js';
 import { DisposableStore } from '../../../base/common/lifecycle.js';
 import { isEqual } from '../../../base/common/resources.js';
 import { URI, UriComponents } from '../../../base/common/uri.js';
@@ -37,7 +37,7 @@ class EditorWebviewZone implements IViewZone {
 		readonly height: number,
 		readonly webview: IWebviewElement,
 	) {
-		this.domNode = document.createElement('div');
+		this.domNode = createElement('div');
 		this.domNode.style.zIndex = '10'; // without this, the webview is not interactive
 		this.afterLineNumber = line;
 		this.afterColumn = 1;
diff --git a/src/vs/workbench/browser/actions/developerActions.ts b/src/vs/workbench/browser/actions/developerActions.ts
index 468b22e85c8..6d2109e532d 100644
--- a/src/vs/workbench/browser/actions/developerActions.ts
+++ b/src/vs/workbench/browser/actions/developerActions.ts
@@ -11,7 +11,7 @@ import { DomEmitter } from '../../../base/browser/event.js';
 import { Color } from '../../../base/common/color.js';
 import { Emitter, Event } from '../../../base/common/event.js';
 import { IDisposable, toDisposable, dispose, DisposableStore, setDisposableTracker, DisposableTracker, DisposableInfo } from '../../../base/common/lifecycle.js';
-import { getDomNodePagePosition, append, $, getActiveDocument, onDidRegisterWindow, getWindows } from '../../../base/browser/dom.js';
+import { getDomNodePagePosition, append, $, getActiveDocument, onDidRegisterWindow, getWindows, createElement } from '../../../base/browser/dom.js';
 import { createCSSRule, createStyleSheet } from '../../../base/browser/domStylesheets.js';
 import { IConfigurationService } from '../../../platform/configuration/common/configuration.js';
 import { ContextKeyExpr, IContextKeyService, RawContextKey } from '../../../platform/contextkey/common/contextkey.js';
@@ -61,7 +61,7 @@ class InspectContextKeysAction extends Action2 {
 		const stylesheet = createStyleSheet(undefined, undefined, disposables);
 		createCSSRule('*', 'cursor: crosshair !important;', stylesheet);
 
-		const hoverFeedback = document.createElement('div');
+		const hoverFeedback = createElement('div');
 		const activeDocument = getActiveDocument();
 		activeDocument.body.appendChild(hoverFeedback);
 		disposables.add(toDisposable(() => hoverFeedback.remove()));
diff --git a/src/vs/workbench/browser/layout.ts b/src/vs/workbench/browser/layout.ts
index 4c9b67f9b0c..8ecf498e797 100644
--- a/src/vs/workbench/browser/layout.ts
+++ b/src/vs/workbench/browser/layout.ts
@@ -5,7 +5,7 @@
 
 import { Disposable, DisposableMap, DisposableStore, IDisposable, toDisposable } from '../../base/common/lifecycle.js';
 import { Event, Emitter } from '../../base/common/event.js';
-import { EventType, addDisposableListener, getClientArea, position, size, IDimension, isAncestorUsingFlowTo, computeScreenAwareSize, getActiveDocument, getWindows, getActiveWindow, isActiveDocument, getWindow, getWindowId, getActiveElement, Dimension } from '../../base/browser/dom.js';
+import { EventType, addDisposableListener, getClientArea, position, size, IDimension, isAncestorUsingFlowTo, computeScreenAwareSize, getActiveDocument, getWindows, getActiveWindow, isActiveDocument, getWindow, getWindowId, getActiveElement, Dimension, createElement } from '../../base/browser/dom.js';
 import { onDidChangeFullscreen, isFullscreen, isWCOEnabled } from '../../base/browser/browser.js';
 import { IWorkingCopyBackupService } from '../services/workingCopy/common/workingCopyBackup.js';
 import { isWindows, isLinux, isMacintosh, isWeb, isIOS } from '../../base/common/platform.js';
@@ -187,7 +187,7 @@ export abstract class Layout extends Disposable implements IWorkbenchLayoutServi
 
 	//#region Properties
 
-	readonly mainContainer = document.createElement('div');
+	readonly mainContainer = createElement('div');
 	get activeContainer() { return this.getContainerFromDocument(getActiveDocument()); }
 	get containers(): Iterable<HTMLElement> {
 		const containers: HTMLElement[] = [];
diff --git a/src/vs/workbench/browser/parts/editor/breadcrumbsControl.ts b/src/vs/workbench/browser/parts/editor/breadcrumbsControl.ts
index a023234c80a..0bb02e35dbd 100644
--- a/src/vs/workbench/browser/parts/editor/breadcrumbsControl.ts
+++ b/src/vs/workbench/browser/parts/editor/breadcrumbsControl.ts
@@ -260,7 +260,7 @@ export class BreadcrumbsControl {
 		@IConfigurationService configurationService: IConfigurationService,
 		@IBreadcrumbsService breadcrumbsService: IBreadcrumbsService
 	) {
-		this.domNode = document.createElement('div');
+		this.domNode = dom.createElement('div');
 		this.domNode.classList.add('breadcrumbs-control');
 		dom.append(container, this.domNode);
 
diff --git a/src/vs/workbench/browser/parts/editor/breadcrumbsPicker.ts b/src/vs/workbench/browser/parts/editor/breadcrumbsPicker.ts
index fd784e6f69b..e46dd940d8f 100644
--- a/src/vs/workbench/browser/parts/editor/breadcrumbsPicker.ts
+++ b/src/vs/workbench/browser/parts/editor/breadcrumbsPicker.ts
@@ -31,6 +31,7 @@ import { IOutline, IOutlineComparator } from '../../../services/outline/browser/
 import { IEditorOptions } from '../../../../platform/editor/common/editor.js';
 import { IEditorService, SIDE_GROUP } from '../../../services/editor/common/editorService.js';
 import { ITextResourceConfigurationService } from '../../../../editor/common/services/textResourceConfiguration.js';
+import { createElement } from '../../../../base/browser/dom.js';
 
 interface ILayoutInfo {
 	maxHeight: number;
@@ -69,7 +70,7 @@ export abstract class BreadcrumbsPicker {
 		@IThemeService protected readonly _themeService: IThemeService,
 		@IConfigurationService protected readonly _configurationService: IConfigurationService,
 	) {
-		this._domNode = document.createElement('div');
+		this._domNode = createElement('div');
 		this._domNode.className = 'monaco-breadcrumbs-picker show-file-icons';
 		parent.appendChild(this._domNode);
 	}
@@ -87,12 +88,12 @@ export abstract class BreadcrumbsPicker {
 		const theme = this._themeService.getColorTheme();
 		const color = theme.getColor(breadcrumbsPickerBackground);
 
-		this._arrow = document.createElement('div');
+		this._arrow = createElement('div');
 		this._arrow.className = 'arrow';
 		this._arrow.style.borderColor = `transparent transparent ${color ? color.toString() : ''}`;
 		this._domNode.appendChild(this._arrow);
 
-		this._treeContainer = document.createElement('div');
+		this._treeContainer = createElement('div');
 		this._treeContainer.style.background = color ? color.toString() : '';
 		this._treeContainer.style.paddingTop = '2px';
 		this._treeContainer.style.borderRadius = '3px';
diff --git a/src/vs/workbench/browser/parts/titlebar/commandCenterControl.ts b/src/vs/workbench/browser/parts/titlebar/commandCenterControl.ts
index 3202bfacf34..f0fb293d034 100644
--- a/src/vs/workbench/browser/parts/titlebar/commandCenterControl.ts
+++ b/src/vs/workbench/browser/parts/titlebar/commandCenterControl.ts
@@ -3,7 +3,7 @@
  *  Licensed under the MIT License. See License.txt in the project root for license information.
  *--------------------------------------------------------------------------------------------*/
 
-import { isActiveDocument, reset } from '../../../../base/browser/dom.js';
+import { createElement, isActiveDocument, reset } from '../../../../base/browser/dom.js';
 import { BaseActionViewItem, IBaseActionViewItemOptions } from '../../../../base/browser/ui/actionbar/actionViewItems.js';
 import { getDefaultHoverDelegate } from '../../../../base/browser/ui/hover/hoverDelegateFactory.js';
 import { IHoverDelegate } from '../../../../base/browser/ui/hover/hoverDelegate.js';
@@ -30,7 +30,7 @@ export class CommandCenterControl {
 	private readonly _onDidChangeVisibility = this._disposables.add(new Emitter<void>());
 	readonly onDidChangeVisibility: Event<void> = this._onDidChangeVisibility.event;
 
-	readonly element: HTMLElement = document.createElement('div');
+	readonly element: HTMLElement = createElement('div');
 
 	constructor(
 		windowTitle: WindowTitle,
@@ -145,14 +145,14 @@ class CommandCenterCenterViewItem extends BaseActionViewItem {
 							const action = this.action;
 
 							// icon (search)
-							const searchIcon = document.createElement('span');
+							const searchIcon = createElement('span');
 							searchIcon.ariaHidden = 'true';
 							searchIcon.className = action.class ?? '';
 							searchIcon.classList.add('search-icon');
 
 							// label: just workspace name and optional decorations
 							const label = this._getLabel();
-							const labelElement = document.createElement('span');
+							const labelElement = createElement('span');
 							labelElement.classList.add('search-label');
 							labelElement.innerText = label;
 							reset(container, searchIcon, labelElement);
diff --git a/src/vs/workbench/browser/parts/views/treeView.ts b/src/vs/workbench/browser/parts/views/treeView.ts
index 2e4f8009d33..26e3b1b5b75 100644
--- a/src/vs/workbench/browser/parts/views/treeView.ts
+++ b/src/vs/workbench/browser/parts/views/treeView.ts
@@ -900,7 +900,7 @@ abstract class AbstractTreeView extends Disposable implements ITreeView {
 
 			if (linkedText.nodes.length === 1 && typeof linkedText.nodes[0] !== 'string') {
 				const node = linkedText.nodes[0];
-				const buttonContainer = document.createElement('div');
+				const buttonContainer = DOM.createElement('div');
 				buttonContainer.classList.add('button-container');
 				const button = new Button(buttonContainer, { title: node.title, secondary: hasFoundButton, supportIcons: true, ...defaultButtonStyles });
 				button.label = node.label;
@@ -932,7 +932,7 @@ abstract class AbstractTreeView extends Disposable implements ITreeView {
 			}
 		}
 
-		const container = document.createElement('div');
+		const container = DOM.createElement('div');
 		container.classList.add('rendered-message');
 		for (const child of result) {
 			if (DOM.isHTMLElement(child)) {
diff --git a/src/vs/workbench/browser/workbench.ts b/src/vs/workbench/browser/workbench.ts
index 40238c1a6ec..591299041ab 100644
--- a/src/vs/workbench/browser/workbench.ts
+++ b/src/vs/workbench/browser/workbench.ts
@@ -4,7 +4,7 @@
  *--------------------------------------------------------------------------------------------*/
 
 import './style.js';
-import { runWhenWindowIdle } from '../../base/browser/dom.js';
+import { createElement, runWhenWindowIdle } from '../../base/browser/dom.js';
 import { Event, Emitter, setGlobalLeakWarningThreshold } from '../../base/common/event.js';
 import { RunOnceScheduler, timeout } from '../../base/common/async.js';
 import { isFirefox, isSafari, isChrome } from '../../base/browser/browser.js';
@@ -337,7 +337,7 @@ export class Workbench extends Layout {
 	}
 
 	private createPart(id: string, role: string, classes: string[]): HTMLElement {
-		const part = document.createElement(role === 'status' ? 'footer' /* Use footer element for status bar #98376 */ : 'div');
+		const part = createElement(role === 'status' ? 'footer' /* Use footer element for status bar #98376 */ : 'div');
 		part.classList.add('part', ...classes);
 		part.id = id;
 		part.setAttribute('role', role);
diff --git a/src/vs/workbench/contrib/accessibility/browser/accessibleView.ts b/src/vs/workbench/contrib/accessibility/browser/accessibleView.ts
index 21be375a627..ec1641f99d7 100644
--- a/src/vs/workbench/contrib/accessibility/browser/accessibleView.ts
+++ b/src/vs/workbench/contrib/accessibility/browser/accessibleView.ts
@@ -3,7 +3,7 @@
  *  Licensed under the MIT License. See License.txt in the project root for license information.
  *--------------------------------------------------------------------------------------------*/
 
-import { EventType, addDisposableListener, getActiveWindow, isActiveElement } from '../../../../base/browser/dom.js';
+import { EventType, addDisposableListener, createElement, getActiveWindow, isActiveElement } from '../../../../base/browser/dom.js';
 import { IKeyboardEvent, StandardKeyboardEvent } from '../../../../base/browser/keyboardEvent.js';
 import { ActionsOrientation } from '../../../../base/browser/ui/actionbar/actionbar.js';
 import { alert } from '../../../../base/browser/ui/aria/aria.js';
@@ -128,7 +128,7 @@ export class AccessibleView extends Disposable implements ITextModelContentProvi
 		this._hasUnassignedKeybindings = accessibleViewHasUnassignedKeybindings.bindTo(this._contextKeyService);
 		this._hasAssignedKeybindings = accessibleViewHasAssignedKeybindings.bindTo(this._contextKeyService);
 
-		this._container = document.createElement('div');
+		this._container = createElement('div');
 		this._container.classList.add('accessible-view');
 		if (this._configurationService.getValue(AccessibilityWorkbenchSettingId.HideAccessibleView)) {
 			this._container.classList.add('hide');
@@ -136,12 +136,12 @@ export class AccessibleView extends Disposable implements ITextModelContentProvi
 		const codeEditorWidgetOptions: ICodeEditorWidgetOptions = {
 			contributions: EditorExtensionsRegistry.getEditorContributions().filter(c => c.id !== CodeActionController.ID && c.id !== FloatingEditorClickMenu.ID)
 		};
-		const titleBar = document.createElement('div');
+		const titleBar = createElement('div');
 		titleBar.classList.add('accessible-view-title-bar');
-		this._title = document.createElement('div');
+		this._title = createElement('div');
 		this._title.classList.add('accessible-view-title');
 		titleBar.appendChild(this._title);
-		const actionBar = document.createElement('div');
+		const actionBar = createElement('div');
 		actionBar.classList.add('accessible-view-action-bar');
 		titleBar.appendChild(actionBar);
 		this._container.appendChild(titleBar);
diff --git a/src/vs/workbench/contrib/bulkEdit/browser/preview/bulkEditPane.ts b/src/vs/workbench/contrib/bulkEdit/browser/preview/bulkEditPane.ts
index 267b9be32f5..f1e12f9a9e3 100644
--- a/src/vs/workbench/contrib/bulkEdit/browser/preview/bulkEditPane.ts
+++ b/src/vs/workbench/contrib/bulkEdit/browser/preview/bulkEditPane.ts
@@ -40,6 +40,7 @@ import { IViewDescriptorService } from '../../../../common/views.js';
 import { BulkEditPreviewProvider, BulkFileOperation, BulkFileOperations, BulkFileOperationType } from './bulkEditPreview.js';
 import { BulkEditAccessibilityProvider, BulkEditDataSource, BulkEditDelegate, BulkEditElement, BulkEditIdentityProvider, BulkEditNaviLabelProvider, BulkEditSorter, CategoryElement, CategoryElementRenderer, compareBulkFileOperations, FileElement, FileElementRenderer, TextEditElement, TextEditElementRenderer } from './bulkEditTree.js';
 import { ACTIVE_GROUP, IEditorService, SIDE_GROUP } from '../../../../services/editor/common/editorService.js';
+import { createElement } from '../../../../../base/browser/dom.js';
 
 const enum State {
 	Data = 'data',
@@ -116,12 +117,12 @@ export class BulkEditPane extends ViewPane {
 		);
 		this._disposables.add(resourceLabels);
 
-		const contentContainer = document.createElement('div');
+		const contentContainer = createElement('div');
 		contentContainer.className = 'content';
 		parent.appendChild(contentContainer);
 
 		// tree
-		const treeContainer = document.createElement('div');
+		const treeContainer = createElement('div');
 		contentContainer.appendChild(treeContainer);
 
 		this._treeDataSource = this._instaService.createInstance(BulkEditDataSource);
@@ -148,7 +149,7 @@ export class BulkEditPane extends ViewPane {
 		this._disposables.add(this._tree.onDidOpen(e => this._openElementInMultiDiffEditor(e)));
 
 		// buttons
-		const buttonsContainer = document.createElement('div');
+		const buttonsContainer = createElement('div');
 		buttonsContainer.className = 'buttons';
 		contentContainer.appendChild(buttonsContainer);
 		const buttonBar = new ButtonBar(buttonsContainer);
@@ -163,7 +164,7 @@ export class BulkEditPane extends ViewPane {
 		btnCancel.onDidClick(() => this.discard(), this, this._disposables);
 
 		// message
-		this._message = document.createElement('span');
+		this._message = createElement('span');
 		this._message.className = 'message';
 		this._message.innerText = localize('empty.msg', "Invoke a code action, like rename, to see a preview of its changes here.");
 		parent.appendChild(this._message);
diff --git a/src/vs/workbench/contrib/bulkEdit/browser/preview/bulkEditTree.ts b/src/vs/workbench/contrib/bulkEdit/browser/preview/bulkEditTree.ts
index 6c78277c3d6..cb0bd49deae 100644
--- a/src/vs/workbench/contrib/bulkEdit/browser/preview/bulkEditTree.ts
+++ b/src/vs/workbench/contrib/bulkEdit/browser/preview/bulkEditTree.ts
@@ -402,7 +402,7 @@ class CategoryElementTemplate {
 
 	constructor(container: HTMLElement) {
 		container.classList.add('category');
-		this.icon = document.createElement('div');
+		this.icon = dom.createElement('div');
 		container.appendChild(this.icon);
 		this.label = new IconLabel(container);
 	}
@@ -472,7 +472,7 @@ class FileElementTemplate {
 		@ILabelService private readonly _labelService: ILabelService,
 	) {
 
-		this._checkbox = document.createElement('input');
+		this._checkbox = dom.createElement('input');
 		this._checkbox.className = 'edit-checkbox';
 		this._checkbox.type = 'checkbox';
 		this._checkbox.setAttribute('role', 'checkbox');
@@ -480,7 +480,7 @@ class FileElementTemplate {
 
 		this._label = resourceLabels.create(container, { supportHighlights: true });
 
-		this._details = document.createElement('span');
+		this._details = dom.createElement('span');
 		this._details.className = 'details';
 		container.appendChild(this._details);
 	}
@@ -568,13 +568,13 @@ class TextEditElementTemplate {
 	constructor(container: HTMLElement, @IThemeService private readonly _themeService: IThemeService) {
 		container.classList.add('textedit');
 
-		this._checkbox = document.createElement('input');
+		this._checkbox = dom.createElement('input');
 		this._checkbox.className = 'edit-checkbox';
 		this._checkbox.type = 'checkbox';
 		this._checkbox.setAttribute('role', 'checkbox');
 		container.appendChild(this._checkbox);
 
-		this._icon = document.createElement('div');
+		this._icon = dom.createElement('div');
 		container.appendChild(this._icon);
 
 		this._label = this._disposables.add(new HighlightedLabel(container));
diff --git a/src/vs/workbench/contrib/callHierarchy/browser/callHierarchyPeek.ts b/src/vs/workbench/contrib/callHierarchy/browser/callHierarchyPeek.ts
index 0b6eb76e2cc..a28d41da868 100644
--- a/src/vs/workbench/contrib/callHierarchy/browser/callHierarchyPeek.ts
+++ b/src/vs/workbench/contrib/callHierarchy/browser/callHierarchyPeek.ts
@@ -14,7 +14,7 @@ import { localize } from '../../../../nls.js';
 import { ScrollType } from '../../../../editor/common/editorCommon.js';
 import { IRange, Range } from '../../../../editor/common/core/range.js';
 import { SplitView, Orientation, Sizing } from '../../../../base/browser/ui/splitview/splitview.js';
-import { Dimension, isKeyboardEvent } from '../../../../base/browser/dom.js';
+import { createElement, Dimension, isKeyboardEvent } from '../../../../base/browser/dom.js';
 import { Event } from '../../../../base/common/event.js';
 import { IEditorService } from '../../../services/editor/common/editorService.js';
 import { EmbeddedCodeEditorWidget } from '../../../../editor/browser/widget/codeEditor/embeddedCodeEditorWidget.js';
@@ -145,20 +145,20 @@ export class CallHierarchyTreePeekWidget extends PeekViewWidget {
 		this._parent = parent;
 		parent.classList.add('call-hierarchy');
 
-		const message = document.createElement('div');
+		const message = createElement('div');
 		message.classList.add('message');
 		parent.appendChild(message);
 		this._message = message;
 		this._message.tabIndex = 0;
 
-		const container = document.createElement('div');
+		const container = createElement('div');
 		container.classList.add('results');
 		parent.appendChild(container);
 
 		this._splitView = new SplitView(container, { orientation: Orientation.HORIZONTAL });
 
 		// editor stuff
-		const editorContainer = document.createElement('div');
+		const editorContainer = createElement('div');
 		editorContainer.classList.add('editor');
 		container.appendChild(editorContainer);
 		const editorOptions: IEditorOptions = {
@@ -186,7 +186,7 @@ export class CallHierarchyTreePeekWidget extends PeekViewWidget {
 		);
 
 		// tree stuff
-		const treeContainer = document.createElement('div');
+		const treeContainer = createElement('div');
 		treeContainer.classList.add('tree');
 		container.appendChild(treeContainer);
 		const options: IWorkbenchAsyncDataTreeOptions<Call, FuzzyScore> = {
diff --git a/src/vs/workbench/contrib/callHierarchy/browser/callHierarchyTree.ts b/src/vs/workbench/contrib/callHierarchy/browser/callHierarchyTree.ts
index 160d73e72b8..422719e1ff5 100644
--- a/src/vs/workbench/contrib/callHierarchy/browser/callHierarchyTree.ts
+++ b/src/vs/workbench/contrib/callHierarchy/browser/callHierarchyTree.ts
@@ -15,6 +15,7 @@ import { Range } from '../../../../editor/common/core/range.js';
 import { IListAccessibilityProvider } from '../../../../base/browser/ui/list/listWidget.js';
 import { localize } from '../../../../nls.js';
 import { ThemeIcon } from '../../../../base/common/themables.js';
+import { createElement } from '../../../../base/browser/dom.js';
 
 export class Call {
 	constructor(
@@ -110,7 +111,7 @@ export class CallRenderer implements ITreeRenderer<Call, FuzzyScore, CallRenderi
 
 	renderTemplate(container: HTMLElement): CallRenderingTemplate {
 		container.classList.add('callhierarchy-element');
-		const icon = document.createElement('div');
+		const icon = createElement('div');
 		container.appendChild(icon);
 		const label = new IconLabel(container, { supportHighlights: true });
 		return new CallRenderingTemplate(icon, label);
diff --git a/src/vs/workbench/contrib/chat/browser/chatContentParts/chatAgentCommandContentPart.ts b/src/vs/workbench/contrib/chat/browser/chatContentParts/chatAgentCommandContentPart.ts
index 5f3e0a44fb7..1b3e7d2f00a 100644
--- a/src/vs/workbench/contrib/chat/browser/chatContentParts/chatAgentCommandContentPart.ts
+++ b/src/vs/workbench/contrib/chat/browser/chatContentParts/chatAgentCommandContentPart.ts
@@ -15,11 +15,12 @@ import { Codicon } from '../../../../../base/common/codicons.js';
 import { localize } from '../../../../../nls.js';
 import { Button } from '../../../../../base/browser/ui/button/button.js';
 import { generateUuid } from '../../../../../base/common/uuid.js';
+import { createElement } from '../../../../../base/browser/dom.js';
 
 
 export class ChatAgentCommandContentPart extends Disposable implements IChatContentPart {
 
-	readonly domNode: HTMLElement = document.createElement('span');
+	readonly domNode: HTMLElement = createElement('span');
 
 	constructor(
 		cmd: IChatAgentCommand,
@@ -33,7 +34,7 @@ export class ChatAgentCommandContentPart extends Disposable implements IChatCont
 
 		const groupId = generateUuid();
 
-		const commandSpan = document.createElement('span');
+		const commandSpan = createElement('span');
 		this.domNode.appendChild(commandSpan);
 		commandSpan.innerText = chatSubcommandLeader + cmd.name;
 		this._store.add(this._hoverService.setupDelayedHover(commandSpan, { content: cmd.description, appearance: { showPointer: true } }, { groupId }));
diff --git a/src/vs/workbench/contrib/chat/browser/chatContentParts/chatConfirmationWidget.ts b/src/vs/workbench/contrib/chat/browser/chatContentParts/chatConfirmationWidget.ts
index ccbbbc304cf..1a6db1ab6a9 100644
--- a/src/vs/workbench/contrib/chat/browser/chatContentParts/chatConfirmationWidget.ts
+++ b/src/vs/workbench/contrib/chat/browser/chatContentParts/chatConfirmationWidget.ts
@@ -76,7 +76,7 @@ export class ChatQueryTitlePart extends Disposable {
 				asyncRenderCallback: () => this._onDidChangeHeight.fire(),
 				actionHandler: { callback: link => openLinkFromMarkdown(this._openerService, link, str.isTrusted), disposables: this._store },
 			}));
-			const wrapper = document.createElement('small');
+			const wrapper = dom.createElement('small');
 			wrapper.appendChild(renderedTitle.element);
 			element.append(wrapper);
 		}
diff --git a/src/vs/workbench/contrib/chat/browser/chatContentParts/chatToolInputOutputContentPart.ts b/src/vs/workbench/contrib/chat/browser/chatContentParts/chatToolInputOutputContentPart.ts
index 873796c8a59..aac64d94d16 100644
--- a/src/vs/workbench/contrib/chat/browser/chatContentParts/chatToolInputOutputContentPart.ts
+++ b/src/vs/workbench/contrib/chat/browser/chatContentParts/chatToolInputOutputContentPart.ts
@@ -120,7 +120,7 @@ export class ChatCollapsibleInputOutputContentPart extends Disposable {
 		));
 		this._register(titlePart.onDidChangeHeight(() => this._onDidChangeHeight.fire()));
 
-		const spacer = document.createElement('span');
+		const spacer = dom.createElement('span');
 		spacer.style.flexGrow = '1';
 
 		const btn = this._register(new ButtonWithIcon(elements.root, {}));
diff --git a/src/vs/workbench/contrib/chat/browser/chatContentParts/toolInvocationParts/chatToolConfirmationSubPart.ts b/src/vs/workbench/contrib/chat/browser/chatContentParts/toolInvocationParts/chatToolConfirmationSubPart.ts
index ba9a030d903..fb21f0f59a8 100644
--- a/src/vs/workbench/contrib/chat/browser/chatContentParts/toolInvocationParts/chatToolConfirmationSubPart.ts
+++ b/src/vs/workbench/contrib/chat/browser/chatContentParts/toolInvocationParts/chatToolConfirmationSubPart.ts
@@ -134,7 +134,7 @@ export class ToolConfirmationSubPart extends BaseChatToolInvocationSubPart {
 
 			if (toolInvocation.toolSpecificData?.kind === 'input' && toolInvocation.toolSpecificData.rawInput && !isEmptyObject(toolInvocation.toolSpecificData.rawInput)) {
 
-				const title = document.createElement('h3');
+				const title = dom.createElement('h3');
 				title.textContent = localize('chat.input', "Input");
 				elements.editor.appendChild(title);
 
diff --git a/src/vs/workbench/contrib/chat/browser/chatContentParts/toolInvocationParts/chatToolProgressPart.ts b/src/vs/workbench/contrib/chat/browser/chatContentParts/toolInvocationParts/chatToolProgressPart.ts
index 89d07da2a06..fe1a7ad9e08 100644
--- a/src/vs/workbench/contrib/chat/browser/chatContentParts/toolInvocationParts/chatToolProgressPart.ts
+++ b/src/vs/workbench/contrib/chat/browser/chatContentParts/toolInvocationParts/chatToolProgressPart.ts
@@ -37,7 +37,7 @@ export class ChatToolProgressSubPart extends BaseChatToolInvocationSubPart {
 			this._register(part);
 			return part.domNode;
 		} else {
-			const container = document.createElement('div');
+			const container = dom.createElement('div');
 			const progressObservable = this.toolInvocation.kind === 'toolInvocation' ? this.toolInvocation.progress : undefined;
 			this._register(autorun(reader => {
 				const progress = progressObservable?.read(reader);
diff --git a/src/vs/workbench/contrib/chat/browser/chatDragAndDrop.ts b/src/vs/workbench/contrib/chat/browser/chatDragAndDrop.ts
index 3e405f2c949..86bcf120b8b 100644
--- a/src/vs/workbench/contrib/chat/browser/chatDragAndDrop.ts
+++ b/src/vs/workbench/contrib/chat/browser/chatDragAndDrop.ts
@@ -4,7 +4,7 @@
  *--------------------------------------------------------------------------------------------*/
 
 import { DataTransfers } from '../../../../base/browser/dnd.js';
-import { $, DragAndDropObserver } from '../../../../base/browser/dom.js';
+import { $, createElement, DragAndDropObserver } from '../../../../base/browser/dom.js';
 import { renderLabelWithIcons } from '../../../../base/browser/ui/iconLabel/iconLabels.js';
 import { coalesce } from '../../../../base/common/arrays.js';
 import { CancellationToken } from '../../../../base/common/cancellation.js';
@@ -88,7 +88,7 @@ export class ChatDragAndDrop extends Themable {
 
 	private currentActiveTarget: HTMLElement | undefined = undefined;
 	private createOverlay(target: HTMLElement, overlayContainer: HTMLElement): { overlay: HTMLElement; disposable: IDisposable } {
-		const overlay = document.createElement('div');
+		const overlay = createElement('div');
 		overlay.classList.add('chat-dnd-overlay');
 		this.updateOverlayStyles(overlay);
 		overlayContainer.appendChild(overlay);
diff --git a/src/vs/workbench/contrib/chat/browser/chatEditing/chatEditingCodeEditorIntegration.ts b/src/vs/workbench/contrib/chat/browser/chatEditing/chatEditingCodeEditorIntegration.ts
index f8d12d6a5a4..fd35a642952 100644
--- a/src/vs/workbench/contrib/chat/browser/chatEditing/chatEditingCodeEditorIntegration.ts
+++ b/src/vs/workbench/contrib/chat/browser/chatEditing/chatEditingCodeEditorIntegration.ts
@@ -5,7 +5,7 @@
 
 import '../media/chatEditorController.css';
 
-import { getTotalWidth } from '../../../../../base/browser/dom.js';
+import { createElement, getTotalWidth } from '../../../../../base/browser/dom.js';
 import { Event } from '../../../../../base/common/event.js';
 import { DisposableStore, dispose, toDisposable } from '../../../../../base/common/lifecycle.js';
 import { autorun, constObservable, derived, IObservable, observableFromEvent, observableValue } from '../../../../../base/common/observable.js';
@@ -368,7 +368,7 @@ export class ChatEditingCodeEditorIntegration implements IModifiedFileEntryEdito
 
 				let extraLines = 0;
 				if (reviewMode && !diffMode) {
-					const domNode = document.createElement('div');
+					const domNode = createElement('div');
 					domNode.className = 'chat-editing-original-zone view-lines line-delete monaco-mouse-cursor-text';
 					const result = renderLines(source, renderOptions, decorations, domNode);
 					extraLines = result.heightInLines;
@@ -679,7 +679,7 @@ class DiffHunkWidget implements IOverlayWidget, IModifiedFileEntryChangeHunk {
 		private readonly _lineDelta: number,
 		@IInstantiationService instaService: IInstantiationService,
 	) {
-		this._domNode = document.createElement('div');
+		this._domNode = createElement('div');
 		this._domNode.className = 'chat-diff-change-content-widget';
 
 		const toolbar = instaService.createInstance(MenuWorkbenchToolBar, this._domNode, MenuId.ChatEditingEditorHunk, {
@@ -766,7 +766,7 @@ class AccessibleDiffViewContainer implements IOverlayWidget {
 	private readonly _domNode: HTMLElement;
 
 	constructor() {
-		this._domNode = document.createElement('div');
+		this._domNode = createElement('div');
 		this._domNode.className = 'accessible-diff-view';
 		this._domNode.style.width = '100%';
 		this._domNode.style.position = 'absolute';
diff --git a/src/vs/workbench/contrib/chat/browser/chatEditing/chatEditingEditorOverlay.ts b/src/vs/workbench/contrib/chat/browser/chatEditing/chatEditingEditorOverlay.ts
index ce1a59573c5..213a6a570c2 100644
--- a/src/vs/workbench/contrib/chat/browser/chatEditing/chatEditingEditorOverlay.ts
+++ b/src/vs/workbench/contrib/chat/browser/chatEditing/chatEditingEditorOverlay.ts
@@ -12,7 +12,7 @@ import { IChatEditingService, IChatEditingSession, IModifiedFileEntry, ModifiedF
 import { MenuId } from '../../../../../platform/actions/common/actions.js';
 import { ActionViewItem } from '../../../../../base/browser/ui/actionbar/actionViewItems.js';
 import { IActionRunner } from '../../../../../base/common/actions.js';
-import { $, addDisposableGenericMouseMoveListener, append } from '../../../../../base/browser/dom.js';
+import { $, addDisposableGenericMouseMoveListener, append, createElement } from '../../../../../base/browser/dom.js';
 import { assertType } from '../../../../../base/common/types.js';
 import { localize } from '../../../../../nls.js';
 import { AcceptAction, navigationBearingFakeActionId, RejectAction } from './chatEditingEditorActions.js';
@@ -54,7 +54,7 @@ class ChatEditorOverlayWidget extends Disposable {
 		@IInstantiationService private readonly _instaService: IInstantiationService,
 	) {
 		super();
-		this._domNode = document.createElement('div');
+		this._domNode = createElement('div');
 		this._domNode.classList.add('chat-editor-overlay-widget');
 
 		this._isBusy = derived(r => {
@@ -97,7 +97,7 @@ class ChatEditorOverlayWidget extends Disposable {
 		});
 
 
-		const progressNode = document.createElement('div');
+		const progressNode = createElement('div');
 		progressNode.classList.add('chat-editor-overlay-progress');
 		append(progressNode, renderIcon(ThemeIcon.modify(Codicon.loading, 'spin')));
 		const textProgress = append(progressNode, $('span.progress-message'));
@@ -116,7 +116,7 @@ class ChatEditorOverlayWidget extends Disposable {
 			}
 		}));
 
-		this._toolbarNode = document.createElement('div');
+		this._toolbarNode = createElement('div');
 		this._toolbarNode.classList.add('chat-editor-overlay-toolbar');
 
 	}
@@ -313,7 +313,7 @@ class ChatEditingOverlayController {
 
 	private readonly _store = new DisposableStore();
 
-	private readonly _domNode = document.createElement('div');
+	private readonly _domNode = createElement('div');
 
 	constructor(
 		container: HTMLElement,
diff --git a/src/vs/workbench/contrib/chat/browser/chatEditing/notebook/overlayToolbarDecorator.ts b/src/vs/workbench/contrib/chat/browser/chatEditing/notebook/overlayToolbarDecorator.ts
index 9e6acbd4fb4..8cced6c40c3 100644
--- a/src/vs/workbench/contrib/chat/browser/chatEditing/notebook/overlayToolbarDecorator.ts
+++ b/src/vs/workbench/contrib/chat/browser/chatEditing/notebook/overlayToolbarDecorator.ts
@@ -3,6 +3,7 @@
  *  Licensed under the MIT License. See License.txt in the project root for license information.
  *--------------------------------------------------------------------------------------------*/
 
+import { createElement } from '../../../../../../base/browser/dom.js';
 import { Disposable, DisposableStore } from '../../../../../../base/common/lifecycle.js';
 import { AccessibilitySignal, IAccessibilitySignalService } from '../../../../../../platform/accessibilitySignal/browser/accessibilitySignalService.js';
 import { MenuWorkbenchToolBar, HiddenItemStrategy } from '../../../../../../platform/actions/browser/toolbar.js';
@@ -52,7 +53,7 @@ export class OverlayToolbarDecorator extends Disposable {
 			if (!cellViewModel || cellViewModel.cellKind !== CellKind.Markup) {
 				continue;
 			}
-			const toolbarContainer = document.createElement('div');
+			const toolbarContainer = createElement('div');
 
 			let overlayId: string | undefined = undefined;
 			editor.changeCellOverlays((accessor) => {
@@ -73,7 +74,7 @@ export class OverlayToolbarDecorator extends Disposable {
 
 			this.overlayDisposables.add({ dispose: removeOverlay });
 
-			const toolbar = document.createElement('div');
+			const toolbar = createElement('div');
 			toolbarContainer.appendChild(toolbar);
 			toolbar.className = 'chat-diff-change-content-widget';
 			toolbar.classList.add('hover'); // Show by default
diff --git a/src/vs/workbench/contrib/chat/browser/chatEditing/simpleBrowserEditorOverlay.ts b/src/vs/workbench/contrib/chat/browser/chatEditing/simpleBrowserEditorOverlay.ts
index 5015b2af65c..e6144ec6266 100644
--- a/src/vs/workbench/contrib/chat/browser/chatEditing/simpleBrowserEditorOverlay.ts
+++ b/src/vs/workbench/contrib/chat/browser/chatEditing/simpleBrowserEditorOverlay.ts
@@ -24,7 +24,7 @@ import { IChatWidgetService, showChatView } from '../chat.js';
 import { IViewsService } from '../../../../services/views/common/viewsService.js';
 import { Button, ButtonWithDropdown } from '../../../../../base/browser/ui/button/button.js';
 import { defaultButtonStyles } from '../../../../../platform/theme/browser/defaultStyles.js';
-import { addDisposableListener } from '../../../../../base/browser/dom.js';
+import { addDisposableListener, createElement } from '../../../../../base/browser/dom.js';
 import { IConfigurationService } from '../../../../../platform/configuration/common/configuration.js';
 import { cleanupOldImages, createFileForMedia } from '../imageUtils.js';
 import { IFileService } from '../../../../../platform/files/common/files.js';
@@ -77,10 +77,10 @@ class SimpleBrowserOverlayWidget {
 		this.imagesFolder = joinPath(this.environmentService.workspaceStorageHome, 'vscode-chat-images');
 		cleanupOldImages(this.fileService, this.logService, this.imagesFolder);
 
-		this._domNode = document.createElement('div');
+		this._domNode = createElement('div');
 		this._domNode.className = 'element-selection-message';
 
-		const message = document.createElement('span');
+		const message = createElement('span');
 		const startSelectionMessage = localize('elementSelectionMessage', 'Add element to chat');
 		message.textContent = startSelectionMessage;
 		this._domNode.appendChild(message);
@@ -153,7 +153,7 @@ class SimpleBrowserOverlayWidget {
 		// shown if the overlay is collapsed
 		const expandOverlay = this._showStore.add(new Button(this._domNode, { supportIcons: true, title: localize('chat.expandOverlay', "Expand Overlay") }));
 		expandOverlay.icon = Codicon.layout;
-		const expandContainer = document.createElement('div');
+		const expandContainer = createElement('div');
 		expandContainer.className = 'element-expand-container hidden';
 		expandContainer.appendChild(expandOverlay.element);
 		this._container.appendChild(expandContainer);
@@ -322,7 +322,7 @@ class SimpleBrowserOverlayController {
 
 	private readonly _store = new DisposableStore();
 
-	private readonly _domNode = document.createElement('div');
+	private readonly _domNode = createElement('div');
 
 	constructor(
 		container: HTMLElement,
@@ -347,7 +347,7 @@ class SimpleBrowserOverlayController {
 		this._store.add(toDisposable(() => this._domNode.remove()));
 		this._store.add(widget);
 
-		const connectingWebviewElement = document.createElement('div');
+		const connectingWebviewElement = createElement('div');
 		connectingWebviewElement.className = 'connecting-webview-element';
 
 
diff --git a/src/vs/workbench/contrib/chat/browser/chatInputPart.ts b/src/vs/workbench/contrib/chat/browser/chatInputPart.ts
index 472f0fa10f9..b8145e2fd77 100644
--- a/src/vs/workbench/contrib/chat/browser/chatInputPart.ts
+++ b/src/vs/workbench/contrib/chat/browser/chatInputPart.ts
@@ -1585,10 +1585,10 @@ export class ChatInputPart extends Disposable implements IHistoryNavigationWidge
 				this.relatedFiles?.remove(uri);
 			}));
 
-			const sep = document.createElement('div');
+			const sep = dom.createElement('div');
 			sep.classList.add('separator');
 
-			const group = document.createElement('span');
+			const group = dom.createElement('span');
 			group.classList.add('monaco-button-dropdown', 'sidebyside-button');
 			group.appendChild(addButton.element);
 			group.appendChild(sep);
diff --git a/src/vs/workbench/contrib/chat/browser/chatWidget.ts b/src/vs/workbench/contrib/chat/browser/chatWidget.ts
index 0d794a806a6..39ddecb48a5 100644
--- a/src/vs/workbench/contrib/chat/browser/chatWidget.ts
+++ b/src/vs/workbench/contrib/chat/browser/chatWidget.ts
@@ -915,7 +915,7 @@ export class ChatWidget extends Disposable implements IChatWidget {
 		};
 
 		// Create a dom element to hold UI from editor widgets embedded in chat messages
-		const overflowWidgetsContainer = document.createElement('div');
+		const overflowWidgetsContainer = dom.createElement('div');
 		overflowWidgetsContainer.classList.add('chat-overflow-widget-container', 'monaco-editor');
 		listContainer.append(overflowWidgetsContainer);
 
diff --git a/src/vs/workbench/contrib/chat/browser/imageUtils.ts b/src/vs/workbench/contrib/chat/browser/imageUtils.ts
index 73cc3642c88..d6831662c57 100644
--- a/src/vs/workbench/contrib/chat/browser/imageUtils.ts
+++ b/src/vs/workbench/contrib/chat/browser/imageUtils.ts
@@ -3,6 +3,7 @@
  *  Licensed under the MIT License. See License.txt in the project root for license information.
  *--------------------------------------------------------------------------------------------*/
 
+import { createElement } from '../../../../base/browser/dom.js';
 import { VSBuffer } from '../../../../base/common/buffer.js';
 import { joinPath } from '../../../../base/common/resources.js';
 import { URI } from '../../../../base/common/uri.js';
@@ -49,7 +50,7 @@ export async function resizeImage(data: Uint8Array | string, mimeType?: string):
 			width = Math.round(width * scaleFactor);
 			height = Math.round(height * scaleFactor);
 
-			const canvas = document.createElement('canvas');
+			const canvas = createElement('canvas');
 			canvas.width = width;
 			canvas.height = height;
 			const ctx = canvas.getContext('2d');
diff --git a/src/vs/workbench/contrib/codeEditor/browser/dictation/editorDictation.ts b/src/vs/workbench/contrib/codeEditor/browser/dictation/editorDictation.ts
index 12178f16a0f..d7d3df2aff8 100644
--- a/src/vs/workbench/contrib/codeEditor/browser/dictation/editorDictation.ts
+++ b/src/vs/workbench/contrib/codeEditor/browser/dictation/editorDictation.ts
@@ -5,7 +5,7 @@
 
 import './editorDictation.css';
 import { localize, localize2 } from '../../../../../nls.js';
-import { IDimension } from '../../../../../base/browser/dom.js';
+import { createElement, IDimension } from '../../../../../base/browser/dom.js';
 import { CancellationTokenSource } from '../../../../../base/common/cancellation.js';
 import { Disposable, DisposableStore, MutableDisposable, toDisposable } from '../../../../../base/common/lifecycle.js';
 import { ContentWidgetPositionPreference, ICodeEditor, IContentWidget, IContentWidgetPosition } from '../../../../../editor/browser/editorBrowser.js';
@@ -109,7 +109,7 @@ export class DictationWidget extends Disposable implements IContentWidget {
 	readonly suppressMouseDown = true;
 	readonly allowEditorOverflow = true;
 
-	private readonly domNode = document.createElement('div');
+	private readonly domNode = createElement('div');
 
 	constructor(private readonly editor: ICodeEditor, keybindingService: IKeybindingService) {
 		super();
diff --git a/src/vs/workbench/contrib/codeEditor/browser/find/simpleFindWidget.ts b/src/vs/workbench/contrib/codeEditor/browser/find/simpleFindWidget.ts
index cba6e7cd9fe..62cee8e06f1 100644
--- a/src/vs/workbench/contrib/codeEditor/browser/find/simpleFindWidget.ts
+++ b/src/vs/workbench/contrib/codeEditor/browser/find/simpleFindWidget.ts
@@ -164,7 +164,7 @@ export abstract class SimpleFindWidget extends Widget implements IVerticalSashLa
 			}
 		}, hoverService));
 
-		this._innerDomNode = document.createElement('div');
+		this._innerDomNode = dom.createElement('div');
 		this._innerDomNode.classList.add('simple-find-part');
 		this._innerDomNode.appendChild(this._findInput.domNode);
 		this._innerDomNode.appendChild(this.prevBtn.domNode);
@@ -172,7 +172,7 @@ export abstract class SimpleFindWidget extends Widget implements IVerticalSashLa
 		this._innerDomNode.appendChild(closeBtn.domNode);
 
 		// _domNode wraps _innerDomNode, ensuring that
-		this._domNode = document.createElement('div');
+		this._domNode = dom.createElement('div');
 		this._domNode.classList.add('simple-find-part-wrapper');
 		this._domNode.appendChild(this._innerDomNode);
 
@@ -198,7 +198,7 @@ export abstract class SimpleFindWidget extends Widget implements IVerticalSashLa
 
 		if (options?.showResultCount) {
 			this._domNode.classList.add('result-count');
-			this._matchesCount = document.createElement('div');
+			this._matchesCount = dom.createElement('div');
 			this._matchesCount.className = 'matchesCount';
 			this._findInput.domNode.insertAdjacentElement('afterend', this._matchesCount);
 			this._register(this._findInput.onDidChange(async () => {
diff --git a/src/vs/workbench/contrib/codeEditor/browser/inspectEditorTokens/inspectEditorTokens.ts b/src/vs/workbench/contrib/codeEditor/browser/inspectEditorTokens/inspectEditorTokens.ts
index e785920549d..b7a60ef0136 100644
--- a/src/vs/workbench/contrib/codeEditor/browser/inspectEditorTokens/inspectEditorTokens.ts
+++ b/src/vs/workbench/contrib/codeEditor/browser/inspectEditorTokens/inspectEditorTokens.ts
@@ -217,7 +217,7 @@ class InspectEditorTokensWidget extends Disposable implements IContentWidget {
 		this._configurationService = configurationService;
 		this._languageFeaturesService = languageFeaturesService;
 		this._model = this._editor.getModel();
-		this._domNode = document.createElement('div');
+		this._domNode = dom.createElement('div');
 		this._domNode.className = 'token-inspect-widget';
 		this._currentRequestCancellationTokenSource = new CancellationTokenSource();
 		this._beginCompute(this._editor.getPosition());
diff --git a/src/vs/workbench/contrib/comments/browser/commentNode.ts b/src/vs/workbench/contrib/comments/browser/commentNode.ts
index 6292feecf74..04efa832cea 100644
--- a/src/vs/workbench/contrib/comments/browser/commentNode.ts
+++ b/src/vs/workbench/contrib/comments/browser/commentNode.ts
@@ -134,7 +134,7 @@ export class CommentNode<T extends IRange | ICellRange> extends Disposable {
 		this._commentDetailsContainer = dom.append(this._domNode, dom.$('.review-comment-contents'));
 
 		this.createHeader(this._commentDetailsContainer);
-		this._body = document.createElement(`div`);
+		this._body = dom.createElement(`div`);
 		this._body.classList.add('comment-body', MOUSE_CURSOR_TEXT_CSS_CLASS_NAME);
 		if (configurationService.getValue<ICommentsConfiguration | undefined>(COMMENTS_SECTION)?.maxHeight !== false) {
 			this._body.classList.add('comment-body-max-height');
diff --git a/src/vs/workbench/contrib/debug/browser/debugANSIHandling.ts b/src/vs/workbench/contrib/debug/browser/debugANSIHandling.ts
index 4db2d7eb8c7..46dc1abef65 100644
--- a/src/vs/workbench/contrib/debug/browser/debugANSIHandling.ts
+++ b/src/vs/workbench/contrib/debug/browser/debugANSIHandling.ts
@@ -3,6 +3,7 @@
  *  Licensed under the MIT License. See License.txt in the project root for license information.
  *--------------------------------------------------------------------------------------------*/
 
+import { createElement } from '../../../../base/browser/dom.js';
 import { IHighlight } from '../../../../base/browser/ui/highlightedlabel/highlightedLabel.js';
 import { Color, RGBA } from '../../../../base/common/color.js';
 import { isDefined } from '../../../../base/common/types.js';
@@ -19,7 +20,7 @@ import { ILinkDetector } from './linkDetector.js';
  */
 export function handleANSIOutput(text: string, linkDetector: ILinkDetector, workspaceFolder: IWorkspaceFolder | undefined, highlights: IHighlight[] | undefined): HTMLSpanElement {
 
-	const root: HTMLSpanElement = document.createElement('span');
+	const root: HTMLSpanElement = createElement('span');
 	const textLength: number = text.length;
 
 	let styleNames: string[] = [];
diff --git a/src/vs/workbench/contrib/debug/browser/linkDetector.ts b/src/vs/workbench/contrib/debug/browser/linkDetector.ts
index 6e365eabb52..bc7757b8608 100644
--- a/src/vs/workbench/contrib/debug/browser/linkDetector.ts
+++ b/src/vs/workbench/contrib/debug/browser/linkDetector.ts
@@ -3,7 +3,7 @@
  *  Licensed under the MIT License. See License.txt in the project root for license information.
  *--------------------------------------------------------------------------------------------*/
 
-import { getWindow, isHTMLElement, reset } from '../../../../base/browser/dom.js';
+import { createElement, getWindow, isHTMLElement, reset } from '../../../../base/browser/dom.js';
 import { StandardKeyboardEvent } from '../../../../base/browser/keyboardEvent.js';
 import { getDefaultHoverDelegate } from '../../../../base/browser/ui/hover/hoverDelegateFactory.js';
 import { KeyCode } from '../../../../base/common/keyCodes.js';
@@ -110,12 +110,12 @@ export class LinkDetector implements ILinkDetector {
 				// Do not wrap single line with extra span.
 				return elements[0];
 			}
-			const container = document.createElement('span');
+			const container = createElement('span');
 			elements.forEach(e => container.appendChild(e));
 			return container;
 		}
 
-		const container = document.createElement('span');
+		const container = createElement('span');
 		for (const part of this.detectLinks(text)) {
 			try {
 				let node: Node;
@@ -162,7 +162,7 @@ export class LinkDetector implements ILinkDetector {
 
 			const highlightEnd = Math.min(highlight.end, endIndex);
 			const highlightedText = node.textContent!.substring(currentIndex - startIndex, highlightEnd - startIndex);
-			const highlightSpan = document.createElement('span');
+			const highlightSpan = createElement('span');
 			highlightSpan.classList.add('highlight');
 			if (highlight.extraClasses) {
 				highlightSpan.classList.add(...highlight.extraClasses);
@@ -302,7 +302,7 @@ export class LinkDetector implements ILinkDetector {
 	}
 
 	private createLink(text: string): HTMLElement {
-		const link = document.createElement('a');
+		const link = createElement('a');
 		link.textContent = text;
 		return link;
 	}
diff --git a/src/vs/workbench/contrib/inlayHints/browser/inlayHintsAccessibilty.ts b/src/vs/workbench/contrib/inlayHints/browser/inlayHintsAccessibilty.ts
index 2bed6276108..352925e667b 100644
--- a/src/vs/workbench/contrib/inlayHints/browser/inlayHintsAccessibilty.ts
+++ b/src/vs/workbench/contrib/inlayHints/browser/inlayHintsAccessibilty.ts
@@ -43,7 +43,7 @@ export class InlayHintsAccessibility implements IEditorContribution {
 		@IAccessibilitySignalService private readonly _accessibilitySignalService: IAccessibilitySignalService,
 		@IInstantiationService private readonly _instaService: IInstantiationService,
 	) {
-		this._ariaElement = document.createElement('span');
+		this._ariaElement = dom.createElement('span');
 		this._ariaElement.style.position = 'fixed';
 		this._ariaElement.className = 'inlayhint-accessibility-element';
 		this._ariaElement.tabIndex = 0;
@@ -111,7 +111,7 @@ export class InlayHintsAccessibility implements IEditorContribution {
 			}
 
 			// hint
-			const em = document.createElement('em');
+			const em = dom.createElement('em');
 			const { label } = item.hint;
 			if (typeof label === 'string') {
 				em.innerText = label;
diff --git a/src/vs/workbench/contrib/inlineChat/browser/inlineChatStrategies.ts b/src/vs/workbench/contrib/inlineChat/browser/inlineChatStrategies.ts
index a2bcfa14a33..8aaa6cfd3fc 100644
--- a/src/vs/workbench/contrib/inlineChat/browser/inlineChatStrategies.ts
+++ b/src/vs/workbench/contrib/inlineChat/browser/inlineChatStrategies.ts
@@ -3,7 +3,7 @@
  *  Licensed under the MIT License. See License.txt in the project root for license information.
  *--------------------------------------------------------------------------------------------*/
 
-import { WindowIntervalTimer } from '../../../../base/browser/dom.js';
+import { createElement, WindowIntervalTimer } from '../../../../base/browser/dom.js';
 import { CancellationToken } from '../../../../base/common/cancellation.js';
 import { Emitter, Event } from '../../../../base/common/event.js';
 import { DisposableStore } from '../../../../base/common/lifecycle.js';
@@ -314,7 +314,7 @@ export class LiveStrategy {
 							mightContainNonBasicASCII,
 							mightContainRTL,
 						);
-						const domNode = document.createElement('div');
+						const domNode = createElement('div');
 						domNode.className = 'inline-chat-original-zone2';
 						const result = renderLines(source, renderOptions, [new InlineDecoration(new Range(originalRange.startLineNumber, 1, originalRange.startLineNumber, 1), '', InlineDecorationType.Regular)], domNode);
 						const viewZoneData: IViewZone = {
diff --git a/src/vs/workbench/contrib/issue/browser/baseIssueReporterService.ts b/src/vs/workbench/contrib/issue/browser/baseIssueReporterService.ts
index efe806111b9..45c3674ea04 100644
--- a/src/vs/workbench/contrib/issue/browser/baseIssueReporterService.ts
+++ b/src/vs/workbench/contrib/issue/browser/baseIssueReporterService.ts
@@ -2,7 +2,7 @@
  *  Copyright (c) Microsoft Corporation. All rights reserved.
  *  Licensed under the MIT License. See License.txt in the project root for license information.
  *--------------------------------------------------------------------------------------------*/
-import { $, isHTMLInputElement, isHTMLTextAreaElement, reset, windowOpenNoOpener } from '../../../../base/browser/dom.js';
+import { $, createElement, isHTMLInputElement, isHTMLTextAreaElement, reset, windowOpenNoOpener } from '../../../../base/browser/dom.js';
 import { createStyleSheet } from '../../../../base/browser/domStylesheets.js';
 import { Button, unthemedButtonStyles } from '../../../../base/browser/ui/button/button.js';
 import { renderIcon } from '../../../../base/browser/ui/iconLabel/iconLabels.js';
@@ -106,7 +106,7 @@ export class BaseIssueReporterService extends Disposable {
 		const issueReporterElement = this.getElementById('issue-reporter');
 		if (issueReporterElement) {
 			this.previewButton = this._register(new Button(issueReporterElement, unthemedButtonStyles));
-			const issueRepoName = document.createElement('a');
+			const issueRepoName = createElement('a');
 			issueReporterElement.appendChild(issueRepoName);
 			issueRepoName.id = 'show-repo-name';
 			issueRepoName.classList.add('hidden');
@@ -252,7 +252,7 @@ export class BaseIssueReporterService extends Disposable {
 					this.issueReporterModel.update({ selectedExtension: matches[0] });
 					const selectedExtension = this.issueReporterModel.getData().selectedExtension;
 					if (selectedExtension) {
-						const iconElement = document.createElement('span');
+						const iconElement = createElement('span');
 						iconElement.classList.add(...ThemeIcon.asClassNameArray(Codicon.loading), 'codicon-modifier-spin');
 						this.setLoading(iconElement);
 						const openReporterData = await this.sendReporterMenu(selectedExtension);
@@ -758,7 +758,7 @@ export class BaseIssueReporterService extends Disposable {
 	}
 
 	public makeOption(value: string, description: string, disabled: boolean): HTMLOptionElement {
-		const option: HTMLOptionElement = document.createElement('option');
+		const option: HTMLOptionElement = createElement('option');
 		option.disabled = disabled;
 		option.value = value;
 		option.textContent = description;
diff --git a/src/vs/workbench/contrib/issue/browser/issueFormService.ts b/src/vs/workbench/contrib/issue/browser/issueFormService.ts
index c587880a09c..045465b9718 100644
--- a/src/vs/workbench/contrib/issue/browser/issueFormService.ts
+++ b/src/vs/workbench/contrib/issue/browser/issueFormService.ts
@@ -2,7 +2,7 @@
  *  Copyright (c) Microsoft Corporation. All rights reserved.
  *  Licensed under the MIT License. See License.txt in the project root for license information.
  *--------------------------------------------------------------------------------------------*/
-import { safeInnerHtml } from '../../../../base/browser/dom.js';
+import { createElement, safeInnerHtml } from '../../../../base/browser/dom.js';
 import { DisposableStore } from '../../../../base/common/lifecycle.js';
 import { isLinux, isWindows } from '../../../../base/common/platform.js';
 import Severity from '../../../../base/common/severity.js';
@@ -87,7 +87,7 @@ export class IssueFormService implements IIssueFormService {
 			auxiliaryWindow.window.document.body.classList.add('issue-reporter-body', 'monaco-workbench', platformClass);
 
 			// custom issue reporter wrapper
-			const div = document.createElement('div');
+			const div = createElement('div');
 			div.classList.add('monaco-workbench');
 
 			// removes preset monaco-workbench
diff --git a/src/vs/workbench/contrib/languageStatus/browser/languageStatus.ts b/src/vs/workbench/contrib/languageStatus/browser/languageStatus.ts
index 329707002d5..f6fe593a719 100644
--- a/src/vs/workbench/contrib/languageStatus/browser/languageStatus.ts
+++ b/src/vs/workbench/contrib/languageStatus/browser/languageStatus.ts
@@ -102,7 +102,7 @@ class LanguageStatus {
 	private _dedicatedEntries = new Map<string, IStatusbarEntryAccessor>();
 	private readonly _renderDisposables = new DisposableStore();
 
-	private readonly _combinedEntryTooltip = document.createElement('div');
+	private readonly _combinedEntryTooltip = dom.createElement('div');
 
 	constructor(
 		@ILanguageStatusService private readonly _languageStatusService: ILanguageStatusService,
@@ -287,24 +287,24 @@ class LanguageStatus {
 
 	private _renderStatus(container: HTMLElement, status: ILanguageStatus, showSeverity: boolean, isPinned: boolean, store: DisposableStore): HTMLElement {
 
-		const parent = document.createElement('div');
+		const parent = dom.createElement('div');
 		parent.classList.add('hover-language-status');
 
 		container.appendChild(parent);
 		store.add(toDisposable(() => parent.remove()));
 
-		const severity = document.createElement('div');
+		const severity = dom.createElement('div');
 		severity.classList.add('severity', `sev${status.severity}`);
 		severity.classList.toggle('show', showSeverity);
 		const severityText = LanguageStatus._severityToSingleCodicon(status.severity);
 		dom.append(severity, ...renderLabelWithIcons(severityText));
 		parent.appendChild(severity);
 
-		const element = document.createElement('div');
+		const element = dom.createElement('div');
 		element.classList.add('element');
 		parent.appendChild(element);
 
-		const left = document.createElement('div');
+		const left = dom.createElement('div');
 		left.classList.add('left');
 		element.appendChild(left);
 
@@ -313,7 +313,7 @@ class LanguageStatus {
 
 		this._renderTextPlus(left, status.detail, store);
 
-		const right = document.createElement('div');
+		const right = dom.createElement('div');
 		right.classList.add('right');
 		element.appendChild(right);
 
diff --git a/src/vs/workbench/contrib/mergeEditor/browser/view/editorGutter.ts b/src/vs/workbench/contrib/mergeEditor/browser/view/editorGutter.ts
index 7f92d3f354c..369847caa0d 100644
--- a/src/vs/workbench/contrib/mergeEditor/browser/view/editorGutter.ts
+++ b/src/vs/workbench/contrib/mergeEditor/browser/view/editorGutter.ts
@@ -3,7 +3,7 @@
  *  Licensed under the MIT License. See License.txt in the project root for license information.
  *--------------------------------------------------------------------------------------------*/
 
-import { h, reset } from '../../../../../base/browser/dom.js';
+import { createElement, h, reset } from '../../../../../base/browser/dom.js';
 import { Disposable, IDisposable, toDisposable } from '../../../../../base/common/lifecycle.js';
 import { autorun, IReader, observableFromEvent, observableSignal, observableSignalFromEvent, transaction } from '../../../../../base/common/observable.js';
 import { CodeEditorWidget } from '../../../../../editor/browser/widget/codeEditor/codeEditorWidget.js';
@@ -103,7 +103,7 @@ export class EditorGutter<T extends IGutterItemInfo = IGutterItemInfo> extends D
 				unusedIds.delete(gutterItem.id);
 				let view = this.views.get(gutterItem.id);
 				if (!view) {
-					const viewDomNode = document.createElement('div');
+					const viewDomNode = createElement('div');
 					this._domNode.appendChild(viewDomNode);
 					const itemView = this.itemProvider.createView(
 						gutterItem,
diff --git a/src/vs/workbench/contrib/mergeEditor/browser/view/fixedZoneWidget.ts b/src/vs/workbench/contrib/mergeEditor/browser/view/fixedZoneWidget.ts
index 6d36ed7ac14..fa708165965 100644
--- a/src/vs/workbench/contrib/mergeEditor/browser/view/fixedZoneWidget.ts
+++ b/src/vs/workbench/contrib/mergeEditor/browser/view/fixedZoneWidget.ts
@@ -3,7 +3,7 @@
  *  Licensed under the MIT License. See License.txt in the project root for license information.
  *--------------------------------------------------------------------------------------------*/
 
-import { h } from '../../../../../base/browser/dom.js';
+import { createElement, h } from '../../../../../base/browser/dom.js';
 import { Disposable } from '../../../../../base/common/lifecycle.js';
 import { ICodeEditor, IOverlayWidget, IViewZoneChangeAccessor } from '../../../../../editor/browser/editorBrowser.js';
 import { Event } from '../../../../../base/common/event.js';
@@ -30,7 +30,7 @@ export abstract class FixedZoneWidget extends Disposable {
 		super();
 
 		this.viewZoneId = viewZoneAccessor.addZone({
-			domNode: document.createElement('div'),
+			domNode: createElement('div'),
 			afterLineNumber: afterLineNumber,
 			heightInPx: height,
 			ordinal: 50000 + 1,
diff --git a/src/vs/workbench/contrib/notebook/browser/contrib/find/notebookFindReplaceWidget.ts b/src/vs/workbench/contrib/notebook/browser/contrib/find/notebookFindReplaceWidget.ts
index 64a78fe594a..e7b959f60b8 100644
--- a/src/vs/workbench/contrib/notebook/browser/contrib/find/notebookFindReplaceWidget.ts
+++ b/src/vs/workbench/contrib/notebook/browser/contrib/find/notebookFindReplaceWidget.ts
@@ -354,7 +354,7 @@ export abstract class SimpleFindReplaceWidget extends Widget {
 			this._state.change({ filters: this._filters }, false);
 		});
 
-		this._domNode = document.createElement('div');
+		this._domNode = dom.createElement('div');
 		this._domNode.classList.add('simple-fr-find-part-wrapper');
 
 		this._register(Event.runAndSubscribe(this._configurationService.onDidChangeConfiguration, e => {
@@ -392,7 +392,7 @@ export abstract class SimpleFindReplaceWidget extends Widget {
 
 
 
-		this._innerFindDomNode = document.createElement('div');
+		this._innerFindDomNode = dom.createElement('div');
 		this._innerFindDomNode.classList.add('simple-fr-find-part');
 
 		this._findInput = this._register(new NotebookFindInput(
@@ -459,7 +459,7 @@ export abstract class SimpleFindReplaceWidget extends Widget {
 			this._replaceInput.setPreserveCase(this._state.preserveCase);
 		}));
 
-		this._matchesCount = document.createElement('div');
+		this._matchesCount = dom.createElement('div');
 		this._matchesCount.className = 'matchesCount';
 		this._updateMatchesCount();
 
@@ -571,7 +571,7 @@ export abstract class SimpleFindReplaceWidget extends Widget {
 		}));
 
 		// Replace
-		this._innerReplaceDomNode = document.createElement('div');
+		this._innerReplaceDomNode = dom.createElement('div');
 		this._innerReplaceDomNode.classList.add('simple-fr-replace-part');
 
 		this._replaceInput = this._register(new ContextScopedReplaceInput(null, undefined, {
diff --git a/src/vs/workbench/contrib/notebook/browser/contrib/outline/notebookOutline.ts b/src/vs/workbench/contrib/notebook/browser/contrib/outline/notebookOutline.ts
index 786603a18fb..a608d49ef17 100644
--- a/src/vs/workbench/contrib/notebook/browser/contrib/outline/notebookOutline.ts
+++ b/src/vs/workbench/contrib/notebook/browser/contrib/outline/notebookOutline.ts
@@ -88,13 +88,13 @@ class NotebookOutlineRenderer implements ITreeRenderer<OutlineEntry, FuzzyScore,
 		const elementDisposables = new DisposableStore();
 
 		container.classList.add('notebook-outline-element', 'show-file-icons');
-		const iconClass = document.createElement('div');
+		const iconClass = DOM.createElement('div');
 		container.append(iconClass);
 		const iconLabel = new IconLabel(container, { supportHighlights: true });
-		const decoration = document.createElement('div');
+		const decoration = DOM.createElement('div');
 		decoration.className = 'element-decoration';
 		container.append(decoration);
-		const actionMenu = document.createElement('div');
+		const actionMenu = DOM.createElement('div');
 		actionMenu.className = 'action-menu';
 		container.append(actionMenu);
 
diff --git a/src/vs/workbench/contrib/notebook/browser/contrib/troubleshoot/layout.ts b/src/vs/workbench/contrib/notebook/browser/contrib/troubleshoot/layout.ts
index 2748815fe1a..e27af70ddc7 100644
--- a/src/vs/workbench/contrib/notebook/browser/contrib/troubleshoot/layout.ts
+++ b/src/vs/workbench/contrib/notebook/browser/contrib/troubleshoot/layout.ts
@@ -14,7 +14,7 @@ import { NotebookEditorWidget } from '../../notebookEditorWidget.js';
 import { CellStatusbarAlignment, INotebookCellStatusBarItem } from '../../../common/notebookCommon.js';
 import { INotebookService } from '../../../common/notebookService.js';
 import { IEditorService } from '../../../../../services/editor/common/editorService.js';
-import { n } from '../../../../../../base/browser/dom.js';
+import { createElement, n } from '../../../../../../base/browser/dom.js';
 
 export class TroubleshootController extends Disposable implements INotebookEditorContribution {
 	static id: string = 'workbench.notebook.troubleshoot';
@@ -165,7 +165,7 @@ export class TroubleshootController extends Disposable implements INotebookEdito
 	}
 
 	private _createCellOverlay(cell: ICellViewModel, index: number) {
-		const overlayContainer = document.createElement('div');
+		const overlayContainer = createElement('div');
 		overlayContainer.style.position = 'absolute';
 		overlayContainer.style.top = '0';
 		overlayContainer.style.left = '0';
@@ -173,7 +173,7 @@ export class TroubleshootController extends Disposable implements INotebookEdito
 		overlayContainer.style.height = '100%';
 		overlayContainer.style.pointerEvents = 'none';
 		overlayContainer.style.zIndex = '1000';
-		const topLine = document.createElement('div');
+		const topLine = createElement('div');
 		topLine.style.position = 'absolute';
 		topLine.style.top = '0';
 		topLine.style.left = '0';
@@ -184,7 +184,7 @@ export class TroubleshootController extends Disposable implements INotebookEdito
 
 		const cellTop = this._notebookEditor.getAbsoluteTopOfElement(cell);
 
-		const label = document.createElement('div');
+		const label = createElement('div');
 		label.textContent = `cell #${index} (handle: ${cell.handle}) | AbsoluteTopOfElement: ${cellTop}px`;
 		label.style.position = 'absolute';
 		label.style.top = '0px';
diff --git a/src/vs/workbench/contrib/notebook/browser/controller/chat/notebookChatController.ts b/src/vs/workbench/contrib/notebook/browser/controller/chat/notebookChatController.ts
index 2296896d9d9..e2cc77d1b96 100644
--- a/src/vs/workbench/contrib/notebook/browser/controller/chat/notebookChatController.ts
+++ b/src/vs/workbench/contrib/notebook/browser/controller/chat/notebookChatController.ts
@@ -3,7 +3,7 @@
  *  Licensed under the MIT License. See License.txt in the project root for license information.
  *--------------------------------------------------------------------------------------------*/
 
-import { Dimension, IFocusTracker, WindowIntervalTimer, getWindow, scheduleAtNextAnimationFrame, trackFocus } from '../../../../../../base/browser/dom.js';
+import { Dimension, IFocusTracker, WindowIntervalTimer, createElement, getWindow, scheduleAtNextAnimationFrame, trackFocus } from '../../../../../../base/browser/dom.js';
 import { CancelablePromise, DeferredPromise, Queue, createCancelablePromise, disposableTimeout } from '../../../../../../base/common/async.js';
 import { CancellationToken, CancellationTokenSource } from '../../../../../../base/common/cancellation.js';
 import { Emitter } from '../../../../../../base/common/event.js';
@@ -381,9 +381,9 @@ export class NotebookChatController extends Disposable implements INotebookEdito
 		// Clear the widget if it's already there
 		this._widgetDisposableStore.clear();
 
-		const viewZoneContainer = document.createElement('div');
+		const viewZoneContainer = createElement('div');
 		viewZoneContainer.classList.add('monaco-editor');
-		const widgetContainer = document.createElement('div');
+		const widgetContainer = createElement('div');
 		widgetContainer.style.position = 'absolute';
 		viewZoneContainer.appendChild(widgetContainer);
 
@@ -392,7 +392,7 @@ export class NotebookChatController extends Disposable implements INotebookEdito
 			this._updateNotebookEditorFocusNSelections();
 		}));
 
-		const fakeParentEditorElement = document.createElement('div');
+		const fakeParentEditorElement = createElement('div');
 
 		const fakeParentEditor = this._widgetDisposableStore.add(this._instantiationService.createInstance(
 			CodeEditorWidget,
diff --git a/src/vs/workbench/contrib/notebook/browser/diff/diffElementOutputs.ts b/src/vs/workbench/contrib/notebook/browser/diff/diffElementOutputs.ts
index 0120e349600..5fe847255bd 100644
--- a/src/vs/workbench/contrib/notebook/browser/diff/diffElementOutputs.ts
+++ b/src/vs/workbench/contrib/notebook/browser/diff/diffElementOutputs.ts
@@ -43,7 +43,7 @@ export class OutputElement extends Disposable {
 	}
 
 	render(index: number, beforeElement?: HTMLElement) {
-		const outputItemDiv = document.createElement('div');
+		const outputItemDiv = DOM.createElement('div');
 		let result: IInsetRenderOutput | undefined = undefined;
 
 		const [mimeTypes, pick] = this.output.resolveMimeTypes(this._notebookTextModel, undefined);
diff --git a/src/vs/workbench/contrib/notebook/browser/diff/inlineDiff/notebookCellDiffDecorator.ts b/src/vs/workbench/contrib/notebook/browser/diff/inlineDiff/notebookCellDiffDecorator.ts
index 8da4d2c230d..e343edcc4d2 100644
--- a/src/vs/workbench/contrib/notebook/browser/diff/inlineDiff/notebookCellDiffDecorator.ts
+++ b/src/vs/workbench/contrib/notebook/browser/diff/inlineDiff/notebookCellDiffDecorator.ts
@@ -22,6 +22,7 @@ import { NotebookCellTextModel } from '../../../common/model/notebookCellTextMod
 import { DetailedLineRangeMapping } from '../../../../../../editor/common/diff/rangeMapping.js';
 import { minimapGutterAddedBackground, minimapGutterDeletedBackground, minimapGutterModifiedBackground, overviewRulerAddedForeground, overviewRulerDeletedForeground, overviewRulerModifiedForeground } from '../../../../scm/common/quickDiff.js';
 import { INotebookOriginalCellModelFactory } from './notebookOriginalCellModelFactory.js';
+import { createElement } from '../../../../../../base/browser/dom.js';
 
 //TODO: allow client to set read-only - chateditsession should set read-only while making changes
 export class NotebookCellDiffDecorator extends DisposableStore {
@@ -238,7 +239,7 @@ export class NotebookCellDiffDecorator extends DisposableStore {
 					});
 				}
 
-				const domNode = document.createElement('div');
+				const domNode = createElement('div');
 				domNode.className = 'chat-editing-original-zone view-lines line-delete monaco-mouse-cursor-text';
 				const result = renderLines(source, renderOptions, decorations, domNode);
 
diff --git a/src/vs/workbench/contrib/notebook/browser/diff/inlineDiff/notebookDeletedCellDecorator.ts b/src/vs/workbench/contrib/notebook/browser/diff/inlineDiff/notebookDeletedCellDecorator.ts
index 9666f98016a..3014ca5ef3c 100644
--- a/src/vs/workbench/contrib/notebook/browser/diff/inlineDiff/notebookDeletedCellDecorator.ts
+++ b/src/vs/workbench/contrib/notebook/browser/diff/inlineDiff/notebookDeletedCellDecorator.ts
@@ -112,7 +112,7 @@ export class NotebookDeletedCellDecorator extends Disposable implements INoteboo
 		this._createWidgetImpl(index, cells);
 	}
 	private async _createWidgetImpl(index: number, cells: { cell: NotebookCellTextModel; originalIndex: number; previousIndex: number }[]) {
-		const rootContainer = document.createElement('div');
+		const rootContainer = DOM.createElement('div');
 		const widgets: NotebookDeletedCellWidget[] = [];
 		const heights = await Promise.all(cells.map(async cell => {
 			const widget = new NotebookDeletedCellWidget(this._notebookEditor, this.toolbar, cell.cell.getValue(), cell.cell.language, rootContainer, cell.originalIndex, this.languageService, this.instantiationService);
@@ -187,7 +187,7 @@ export class NotebookDeletedCellWidget extends Disposable {
 		@IInstantiationService private readonly instantiationService: IInstantiationService,
 	) {
 		super();
-		this.container = DOM.append(container, document.createElement('div'));
+		this.container = DOM.append(container, DOM.createElement('div'));
 		this._register(toDisposable(() => {
 			container.removeChild(this.container);
 		}));
@@ -219,7 +219,7 @@ export class NotebookDeletedCellWidget extends Disposable {
 		rootContainer.classList.add('code-cell-row');
 
 		if (this._toolbarOptions) {
-			const toolbar = document.createElement('div');
+			const toolbar = DOM.createElement('div');
 			toolbar.className = this._toolbarOptions.className;
 			rootContainer.appendChild(toolbar);
 
diff --git a/src/vs/workbench/contrib/notebook/browser/diff/notebookDiffEditor.ts b/src/vs/workbench/contrib/notebook/browser/diff/notebookDiffEditor.ts
index c6521e1675f..915965efd0e 100644
--- a/src/vs/workbench/contrib/notebook/browser/diff/notebookDiffEditor.ts
+++ b/src/vs/workbench/contrib/notebook/browser/diff/notebookDiffEditor.ts
@@ -311,7 +311,7 @@ export class NotebookTextDiffEditor extends EditorPane implements INotebookTextD
 
 	protected createEditor(parent: HTMLElement): void {
 		this._rootElement = DOM.append(parent, DOM.$('.notebook-text-diff-editor'));
-		this._overflowContainer = document.createElement('div');
+		this._overflowContainer = DOM.createElement('div');
 		this._overflowContainer.classList.add('notebook-overflow-widget-container', 'monaco-editor');
 		DOM.append(parent, this._overflowContainer);
 
@@ -391,7 +391,7 @@ export class NotebookTextDiffEditor extends EditorPane implements INotebookTextD
 
 		this._register(this._list.onDidChangeFocus(() => this._onDidChangeSelection.fire({ reason: EditorPaneSelectionChangeReason.USER })));
 
-		this._overviewRulerContainer = document.createElement('div');
+		this._overviewRulerContainer = DOM.createElement('div');
 		this._overviewRulerContainer.classList.add('notebook-overview-ruler-container');
 		this._rootElement.appendChild(this._overviewRulerContainer);
 		this._registerOverviewRuler();
diff --git a/src/vs/workbench/contrib/notebook/browser/diff/notebookDiffOverviewRuler.ts b/src/vs/workbench/contrib/notebook/browser/diff/notebookDiffOverviewRuler.ts
index f24aabe73b4..87a87564d8c 100644
--- a/src/vs/workbench/contrib/notebook/browser/diff/notebookDiffOverviewRuler.ts
+++ b/src/vs/workbench/contrib/notebook/browser/diff/notebookDiffOverviewRuler.ts
@@ -39,14 +39,14 @@ export class NotebookDiffOverviewRuler extends Themable {
 		this._removeColorHex = null;
 		this._disposables = this._register(new DisposableStore());
 		this._renderAnimationFrame = null;
-		this._domNode = createFastDomNode(document.createElement('canvas'));
+		this._domNode = createFastDomNode(DOM.createElement('canvas'));
 		this._domNode.setPosition('relative');
 		this._domNode.setLayerHinting(true);
 		this._domNode.setContain('strict');
 
 		container.appendChild(this._domNode.domNode);
 
-		this._overviewViewportDomElement = createFastDomNode(document.createElement('div'));
+		this._overviewViewportDomElement = createFastDomNode(DOM.createElement('div'));
 		this._overviewViewportDomElement.setClassName('diffViewport');
 		this._overviewViewportDomElement.setPosition('absolute');
 		this._overviewViewportDomElement.setWidth(width);
diff --git a/src/vs/workbench/contrib/notebook/browser/notebookEditorWidget.ts b/src/vs/workbench/contrib/notebook/browser/notebookEditorWidget.ts
index 28078a39457..10ec77eb286 100644
--- a/src/vs/workbench/contrib/notebook/browser/notebookEditorWidget.ts
+++ b/src/vs/workbench/contrib/notebook/browser/notebookEditorWidget.ts
@@ -326,7 +326,7 @@ export class NotebookEditorWidget extends Disposable implements INotebookEditorD
 		this.isReplHistory = creationOptions.isReplHistory ?? false;
 		this._readOnly = creationOptions.isReadOnly ?? false;
 
-		this._overlayContainer = document.createElement('div');
+		this._overlayContainer = DOM.createElement('div');
 		this.scopedContextKeyService = this._register(contextKeyService.createScoped(this._overlayContainer));
 		this.instantiationService = this._register(instantiationService.createChild(new ServiceCollection([IContextKeyService, this.scopedContextKeyService])));
 
@@ -607,30 +607,30 @@ export class NotebookEditorWidget extends Disposable implements INotebookEditorD
 	}
 
 	private _createBody(parent: HTMLElement): void {
-		this._notebookTopToolbarContainer = document.createElement('div');
+		this._notebookTopToolbarContainer = DOM.createElement('div');
 		this._notebookTopToolbarContainer.classList.add('notebook-toolbar-container');
 		this._notebookTopToolbarContainer.style.display = 'none';
 		DOM.append(parent, this._notebookTopToolbarContainer);
 
-		this._notebookStickyScrollContainer = document.createElement('div');
+		this._notebookStickyScrollContainer = DOM.createElement('div');
 		this._notebookStickyScrollContainer.classList.add('notebook-sticky-scroll-container');
 		DOM.append(parent, this._notebookStickyScrollContainer);
 
-		this._body = document.createElement('div');
+		this._body = DOM.createElement('div');
 		DOM.append(parent, this._body);
 
 		this._body.classList.add('cell-list-container');
 		this._createLayoutStyles();
 		this._createCellList();
 
-		this._notebookOverviewRulerContainer = document.createElement('div');
+		this._notebookOverviewRulerContainer = DOM.createElement('div');
 		this._notebookOverviewRulerContainer.classList.add('notebook-overview-ruler-container');
 		this._list.scrollableElement.appendChild(this._notebookOverviewRulerContainer);
 		this._registerNotebookOverviewRuler();
 
 		this._register(this.instantiationService.createInstance(NotebookHorizontalTracker, this, this._list.scrollableElement));
 
-		this._overflowContainer = document.createElement('div');
+		this._overflowContainer = DOM.createElement('div');
 		this._overflowContainer.classList.add('notebook-overflow-widget-container', 'monaco-editor');
 		DOM.append(parent, this._overflowContainer);
 	}
diff --git a/src/vs/workbench/contrib/notebook/browser/view/cellParts/cellActionView.ts b/src/vs/workbench/contrib/notebook/browser/view/cellParts/cellActionView.ts
index 6e742fa265e..c5367d813e4 100644
--- a/src/vs/workbench/contrib/notebook/browser/view/cellParts/cellActionView.ts
+++ b/src/vs/workbench/contrib/notebook/browser/view/cellParts/cellActionView.ts
@@ -35,7 +35,7 @@ export class ActionViewWithLabel extends MenuEntryActionViewItem {
 	override render(container: HTMLElement): void {
 		super.render(container);
 		container.classList.add('notebook-action-view-item');
-		this._actionLabel = document.createElement('a');
+		this._actionLabel = DOM.createElement('a');
 		container.appendChild(this._actionLabel);
 		this.updateLabel();
 	}
@@ -70,7 +70,7 @@ export class UnifiedSubmenuActionView extends SubmenuEntryActionViewItem {
 		super.render(container);
 		container.classList.add('notebook-action-view-item');
 		container.classList.add('notebook-action-view-item-unified');
-		this._actionLabel = document.createElement('a');
+		this._actionLabel = DOM.createElement('a');
 		container.appendChild(this._actionLabel);
 
 		this._hover = this._register(this._hoverService.setupManagedHover(this.options.hoverDelegate ?? getDefaultHoverDelegate('element'), this._actionLabel, ''));
diff --git a/src/vs/workbench/contrib/notebook/browser/view/cellParts/cellDragRenderer.ts b/src/vs/workbench/contrib/notebook/browser/view/cellParts/cellDragRenderer.ts
index b02c85371d4..fc71e132406 100644
--- a/src/vs/workbench/contrib/notebook/browser/view/cellParts/cellDragRenderer.ts
+++ b/src/vs/workbench/contrib/notebook/browser/view/cellParts/cellDragRenderer.ts
@@ -99,7 +99,7 @@ export class CodeCellDragImageRenderer {
 		let dragImage = this.getDragImageImpl(templateData, editor, type);
 		if (!dragImage) {
 			// TODO@roblourens I don't think this can happen
-			dragImage = document.createElement('div');
+			dragImage = DOM.createElement('div');
 			dragImage.textContent = '1 cell';
 		}
 
diff --git a/src/vs/workbench/contrib/notebook/browser/view/cellParts/codeCellRunToolbar.ts b/src/vs/workbench/contrib/notebook/browser/view/cellParts/codeCellRunToolbar.ts
index e5cb2273734..13578a3c497 100644
--- a/src/vs/workbench/contrib/notebook/browser/view/cellParts/codeCellRunToolbar.ts
+++ b/src/vs/workbench/contrib/notebook/browser/view/cellParts/codeCellRunToolbar.ts
@@ -22,6 +22,7 @@ import { ICellViewModel, INotebookEditorDelegate } from '../../notebookBrowser.j
 import { CellContentPart } from '../cellPart.js';
 import { registerCellToolbarStickyScroll } from './cellToolbarStickyScroll.js';
 import { NOTEBOOK_CELL_EXECUTION_STATE, NOTEBOOK_CELL_LIST_FOCUSED, NOTEBOOK_CELL_TYPE, NOTEBOOK_EDITOR_FOCUSED } from '../../../common/notebookContextKeys.js';
+import { createElement } from '../../../../../../base/browser/dom.js';
 
 export class RunToolbar extends CellContentPart {
 	private toolbar!: ToolBar;
@@ -118,7 +119,7 @@ export class RunToolbar extends CellContentPart {
 
 export function getCodeCellExecutionContextKeyService(contextKeyService: IContextKeyService): IScopedContextKeyService {
 	// Create a fake ContextKeyService, and look up the keybindings within this context.
-	const executionContextKeyService = contextKeyService.createScoped(document.createElement('div'));
+	const executionContextKeyService = contextKeyService.createScoped(createElement('div'));
 	InputFocusedContext.bindTo(executionContextKeyService).set(true);
 	EditorContextKeys.editorTextFocus.bindTo(executionContextKeyService).set(true);
 	EditorContextKeys.focus.bindTo(executionContextKeyService).set(true);
diff --git a/src/vs/workbench/contrib/notebook/browser/view/renderers/backLayerWebView.ts b/src/vs/workbench/contrib/notebook/browser/view/renderers/backLayerWebView.ts
index 72c4be0b817..81d80d4078d 100644
--- a/src/vs/workbench/contrib/notebook/browser/view/renderers/backLayerWebView.ts
+++ b/src/vs/workbench/contrib/notebook/browser/view/renderers/backLayerWebView.ts
@@ -3,7 +3,7 @@
  *  Licensed under the MIT License. See License.txt in the project root for license information.
  *--------------------------------------------------------------------------------------------*/
 
-import { getWindow } from '../../../../../../base/browser/dom.js';
+import { createElement, getWindow } from '../../../../../../base/browser/dom.js';
 import { IMouseWheelEvent } from '../../../../../../base/browser/mouseEvent.js';
 import { CodeWindow } from '../../../../../../base/browser/window.js';
 import { WorkbenchActionExecutedClassification, WorkbenchActionExecutedEvent } from '../../../../../../base/common/actions.js';
@@ -188,7 +188,7 @@ export class BackLayerWebView<T extends ICommonCellInfo> extends Themable {
 
 		this._logRendererDebugMessage('Creating backlayer webview for notebook');
 
-		this.element = document.createElement('div');
+		this.element = createElement('div');
 
 		this.element.style.height = '1400px';
 		this.element.style.position = 'absolute';
diff --git a/src/vs/workbench/contrib/notebook/browser/view/renderers/webviewPreloads.ts b/src/vs/workbench/contrib/notebook/browser/view/renderers/webviewPreloads.ts
index b9753110764..d6f7b079652 100644
--- a/src/vs/workbench/contrib/notebook/browser/view/renderers/webviewPreloads.ts
+++ b/src/vs/workbench/contrib/notebook/browser/view/renderers/webviewPreloads.ts
@@ -10,7 +10,7 @@ import type { NotebookCellMetadata } from '../../../common/notebookCommon.js';
 import type * as rendererApi from 'vscode-notebook-renderer';
 import type { NotebookCellOutputTransferData } from '../../../../../../platform/dnd/browser/dnd.js';
 // eslint-disable-next-line local/code-no-runtime-import
-import { isShadowRoot } from '../../../../../../base/browser/dom.js';
+import { createElement, isElement, isHTMLElement, isShadowRoot } from '../../../../../../base/browser/dom.js';
 
 // !! IMPORTANT !! ----------------------------------------------------------------------------------
 // import { RenderOutputType } from 'vs/workbench/contrib/notebook/browser/notebookBrowser';
@@ -165,7 +165,7 @@ async function webviewPreloads(ctx: PreloadContext) {
 		};
 	function getOutputContainer(event: FocusEvent | MouseEvent) {
 		for (const node of event.composedPath()) {
-			if (node instanceof HTMLElement && node.classList.contains('output')) {
+			if (isHTMLElement(node) && node.classList.contains('output')) {
 				return {
 					id: node.id
 				};
@@ -632,7 +632,7 @@ async function webviewPreloads(ctx: PreloadContext) {
 
 	function eventTargetShouldHandleScroll(event: WheelEvent) {
 		for (let node = event.target as Node | null; node; node = node.parentNode) {
-			if (!(node instanceof Element) || node.id === 'container' || node.classList.contains('cell_container') || node.classList.contains('markup') || node.classList.contains('output_container')) {
+			if (!isElement(node) || node.id === 'container' || node.classList.contains('cell_container') || node.classList.contains('markup') || node.classList.contains('output_container')) {
 				return false;
 			}
 
@@ -715,7 +715,7 @@ async function webviewPreloads(ctx: PreloadContext) {
 	}
 
 	function createFocusSink(cellId: string, focusNext?: boolean) {
-		const element = document.createElement('div');
+		const element = createElement('div');
 		element.id = `focus-sink-${cellId}`;
 		element.tabIndex = 0;
 		element.addEventListener('focus', () => {
@@ -984,10 +984,10 @@ async function webviewPreloads(ctx: PreloadContext) {
 
 	function showRenderError(errorText: string, outputNode: HTMLElement, errors: readonly Error[]) {
 		outputNode.innerText = errorText;
-		const errList = document.createElement('ul');
+		const errList = createElement('ul');
 		for (const result of errors) {
 			console.error(result);
-			const item = document.createElement('li');
+			const item = createElement('li');
 			item.innerText = result.message;
 			errList.appendChild(item);
 		}
@@ -1530,7 +1530,7 @@ async function webviewPreloads(ctx: PreloadContext) {
 						} else {
 							// Traverse up the DOM to find the container
 							for (let node = anchorNode as Element | null; node; node = node.parentElement) {
-								if (!(node instanceof Element)) {
+								if (!isElement(node)) {
 									break;
 								}
 
@@ -1617,7 +1617,7 @@ async function webviewPreloads(ctx: PreloadContext) {
 				// Build clipboard data with both image and text formats
 				const clipboardData: Record<string, any> = {
 					'image/png': new Promise((resolve) => {
-						const canvas = document.createElement('canvas');
+						const canvas = createElement('canvas');
 						canvas.width = imageToCopy.naturalWidth;
 						canvas.height = imageToCopy.naturalHeight;
 						const context = canvas.getContext('2d');
@@ -2268,13 +2268,13 @@ async function webviewPreloads(ctx: PreloadContext) {
 		}
 
 		private showRenderError(info: rendererApi.OutputItem, element: HTMLElement, errorMessage: string) {
-			const errorContainer = document.createElement('div');
+			const errorContainer = createElement('div');
 
-			const error = document.createElement('div');
+			const error = createElement('div');
 			error.className = 'no-renderer-error';
 			error.innerText = errorMessage;
 
-			const cellText = document.createElement('div');
+			const cellText = createElement('div');
 			cellText.innerText = info.text();
 
 			errorContainer.appendChild(error);
@@ -2543,12 +2543,12 @@ async function webviewPreloads(ctx: PreloadContext) {
 			});
 
 			const root = window.document.getElementById('container')!;
-			const markupCell = document.createElement('div');
+			const markupCell = createElement('div');
 			markupCell.className = 'markup';
 			markupCell.style.position = 'absolute';
 			markupCell.style.width = '100%';
 
-			this.element = document.createElement('div');
+			this.element = createElement('div');
 			this.element.id = this.id;
 			this.element.classList.add('preview');
 			this.element.style.position = 'absolute';
@@ -2715,7 +2715,7 @@ async function webviewPreloads(ctx: PreloadContext) {
 			const upperWrapperElement = createFocusSink(cellId);
 			container.appendChild(upperWrapperElement);
 
-			this.element = document.createElement('div');
+			this.element = createElement('div');
 			this.element.style.position = 'absolute';
 			this.element.style.outline = '0';
 
@@ -2836,7 +2836,7 @@ async function webviewPreloads(ctx: PreloadContext) {
 		constructor(
 			private readonly outputId: string,
 		) {
-			this.element = document.createElement('div');
+			this.element = createElement('div');
 			this.element.classList.add('output_container');
 			this.element.setAttribute('data-vscode-context', JSON.stringify({ 'preventDefaultContextMenuItems': true }));
 			this.element.style.position = 'absolute';
@@ -2915,7 +2915,7 @@ async function webviewPreloads(ctx: PreloadContext) {
 			left: number,
 			public readonly cellId: string
 		) {
-			this.element = document.createElement('div');
+			this.element = createElement('div');
 			this.element.id = outputId;
 			this.element.classList.add('output');
 			this.element.style.position = 'absolute';
@@ -3095,7 +3095,7 @@ async function webviewPreloads(ctx: PreloadContext) {
 
 			const overlayZIndex = 9999;
 			if (!this.dragOverlay) {
-				this.dragOverlay = document.createElement('div');
+				this.dragOverlay = createElement('div');
 				this.dragOverlay.style.position = 'absolute';
 				this.dragOverlay.style.top = '0';
 				this.dragOverlay.style.left = '0';
diff --git a/src/vs/workbench/contrib/notebook/browser/viewParts/notebookCellOverlays.ts b/src/vs/workbench/contrib/notebook/browser/viewParts/notebookCellOverlays.ts
index ebaa07e37dd..5516707f620 100644
--- a/src/vs/workbench/contrib/notebook/browser/viewParts/notebookCellOverlays.ts
+++ b/src/vs/workbench/contrib/notebook/browser/viewParts/notebookCellOverlays.ts
@@ -3,6 +3,7 @@
  *  Licensed under the MIT License. See License.txt in the project root for license information.
  *--------------------------------------------------------------------------------------------*/
 
+import { createElement } from '../../../../../base/browser/dom.js';
 import { createFastDomNode, FastDomNode } from '../../../../../base/browser/fastDomNode.js';
 import { Disposable } from '../../../../../base/common/lifecycle.js';
 import { INotebookCellOverlay, INotebookCellOverlayChangeAccessor, INotebookViewCellsUpdateEvent } from '../notebookBrowser.js';
@@ -24,7 +25,7 @@ export class NotebookCellOverlays extends Disposable {
 		private readonly listView: NotebookCellListView<CellViewModel>
 	) {
 		super();
-		this.domNode = createFastDomNode(document.createElement('div'));
+		this.domNode = createFastDomNode(createElement('div'));
 		this.domNode.setClassName('cell-overlays');
 		this.domNode.setPosition('absolute');
 		this.domNode.setAttribute('role', 'presentation');
diff --git a/src/vs/workbench/contrib/notebook/browser/viewParts/notebookEditorStickyScroll.ts b/src/vs/workbench/contrib/notebook/browser/viewParts/notebookEditorStickyScroll.ts
index 813faae9352..f51c9c9a30d 100644
--- a/src/vs/workbench/contrib/notebook/browser/viewParts/notebookEditorStickyScroll.ts
+++ b/src/vs/workbench/contrib/notebook/browser/viewParts/notebookEditorStickyScroll.ts
@@ -86,7 +86,7 @@ class StickyFoldingIcon {
 		public isCollapsed: boolean,
 		public dimension: number
 	) {
-		this.domNode = document.createElement('div');
+		this.domNode = DOM.createElement('div');
 		this.domNode.style.width = `${dimension}px`;
 		this.domNode.style.height = `${dimension}px`;
 		this.domNode.className = ThemeIcon.asClassName(isCollapsed ? foldingCollapsedIcon : foldingExpandedIcon);
@@ -380,7 +380,7 @@ export class NotebookStickyScroll extends Disposable {
 	}
 
 	static createStickyElement(entry: OutlineEntry, notebookEditor: INotebookEditor) {
-		const stickyElement = document.createElement('div');
+		const stickyElement = DOM.createElement('div');
 		stickyElement.classList.add('notebook-sticky-scroll-element');
 
 		const indentMode = notebookEditor.notebookOptions.getLayoutConfiguration().stickyScrollMode;
@@ -397,7 +397,7 @@ export class NotebookStickyScroll extends Disposable {
 		stickyFoldingIcon.domNode.classList.add('notebook-sticky-scroll-folding-icon');
 		stickyFoldingIcon.setVisible(true);
 
-		const stickyHeader = document.createElement('div');
+		const stickyHeader = DOM.createElement('div');
 		stickyHeader.classList.add('notebook-sticky-scroll-header');
 		stickyHeader.innerText = entry.label;
 
diff --git a/src/vs/workbench/contrib/notebook/browser/viewParts/notebookEditorToolbar.ts b/src/vs/workbench/contrib/notebook/browser/viewParts/notebookEditorToolbar.ts
index f1c80959c87..f419d30fc5d 100644
--- a/src/vs/workbench/contrib/notebook/browser/viewParts/notebookEditorToolbar.ts
+++ b/src/vs/workbench/contrib/notebook/browser/viewParts/notebookEditorToolbar.ts
@@ -291,7 +291,7 @@ export class NotebookEditorWorkbenchToolbar extends Disposable {
 	}
 
 	private _buildBody() {
-		this._notebookTopLeftToolbarContainer = document.createElement('div');
+		this._notebookTopLeftToolbarContainer = DOM.createElement('div');
 		this._notebookTopLeftToolbarContainer.classList.add('notebook-toolbar-left');
 		this._leftToolbarScrollable = new DomScrollableElement(this._notebookTopLeftToolbarContainer, {
 			vertical: ScrollbarVisibility.Hidden,
@@ -303,7 +303,7 @@ export class NotebookEditorWorkbenchToolbar extends Disposable {
 		this._register(this._leftToolbarScrollable);
 
 		DOM.append(this.domNode, this._leftToolbarScrollable.getDomNode());
-		this._notebookTopRightToolbarContainer = document.createElement('div');
+		this._notebookTopRightToolbarContainer = DOM.createElement('div');
 		this._notebookTopRightToolbarContainer.classList.add('notebook-toolbar-right');
 		DOM.append(this.domNode, this._notebookTopRightToolbarContainer);
 	}
diff --git a/src/vs/workbench/contrib/notebook/browser/viewParts/notebookKernelView.ts b/src/vs/workbench/contrib/notebook/browser/viewParts/notebookKernelView.ts
index 582e967c67c..d66c9ba9262 100644
--- a/src/vs/workbench/contrib/notebook/browser/viewParts/notebookKernelView.ts
+++ b/src/vs/workbench/contrib/notebook/browser/viewParts/notebookKernelView.ts
@@ -20,6 +20,7 @@ import { NotebookTextModel } from '../../common/model/notebookTextModel.js';
 import { NOTEBOOK_IS_ACTIVE_EDITOR, NOTEBOOK_KERNEL_COUNT } from '../../common/notebookContextKeys.js';
 import { INotebookKernel, INotebookKernelHistoryService, INotebookKernelService } from '../../common/notebookKernelService.js';
 import { IEditorService } from '../../../../services/editor/common/editorService.js';
+import { createElement } from '../../../../../base/browser/dom.js';
 
 function getEditorFromContext(editorService: IEditorService, context?: KernelQuickPickContext): INotebookEditor | undefined {
 	let editor: INotebookEditor | undefined;
@@ -171,7 +172,7 @@ export class NotebooKernelActionViewItem extends ActionViewItem {
 		this._update();
 		super.render(container);
 		container.classList.add('kernel-action-view-item');
-		this._kernelLabel = document.createElement('a');
+		this._kernelLabel = createElement('a');
 		container.appendChild(this._kernelLabel);
 		this.updateLabel();
 	}
diff --git a/src/vs/workbench/contrib/notebook/browser/viewParts/notebookOverviewRuler.ts b/src/vs/workbench/contrib/notebook/browser/viewParts/notebookOverviewRuler.ts
index 1bab34e9d38..92e75266fdd 100644
--- a/src/vs/workbench/contrib/notebook/browser/viewParts/notebookOverviewRuler.ts
+++ b/src/vs/workbench/contrib/notebook/browser/viewParts/notebookOverviewRuler.ts
@@ -3,7 +3,7 @@
  *  Licensed under the MIT License. See License.txt in the project root for license information.
  *--------------------------------------------------------------------------------------------*/
 
-import { getWindow } from '../../../../../base/browser/dom.js';
+import { createElement, getWindow } from '../../../../../base/browser/dom.js';
 import { createFastDomNode, FastDomNode } from '../../../../../base/browser/fastDomNode.js';
 import { PixelRatio } from '../../../../../base/browser/pixelRatio.js';
 import { IThemeService, Themable } from '../../../../../platform/theme/common/themeService.js';
@@ -15,7 +15,7 @@ export class NotebookOverviewRuler extends Themable {
 
 	constructor(readonly notebookEditor: INotebookEditorDelegate, container: HTMLElement, @IThemeService themeService: IThemeService) {
 		super(themeService);
-		this._domNode = createFastDomNode(document.createElement('canvas'));
+		this._domNode = createFastDomNode(createElement('canvas'));
 		this._domNode.setPosition('relative');
 		this._domNode.setLayerHinting(true);
 		this._domNode.setContain('strict');
diff --git a/src/vs/workbench/contrib/notebook/browser/viewParts/notebookViewZones.ts b/src/vs/workbench/contrib/notebook/browser/viewParts/notebookViewZones.ts
index b0ade6276a4..dd5efec974d 100644
--- a/src/vs/workbench/contrib/notebook/browser/viewParts/notebookViewZones.ts
+++ b/src/vs/workbench/contrib/notebook/browser/viewParts/notebookViewZones.ts
@@ -3,6 +3,7 @@
  *  Licensed under the MIT License. See License.txt in the project root for license information.
  *--------------------------------------------------------------------------------------------*/
 
+import { createElement } from '../../../../../base/browser/dom.js';
 import { FastDomNode, createFastDomNode } from '../../../../../base/browser/fastDomNode.js';
 import { onUnexpectedError } from '../../../../../base/common/errors.js';
 import { Disposable } from '../../../../../base/common/lifecycle.js';
@@ -32,7 +33,7 @@ export class NotebookViewZones extends Disposable {
 
 	constructor(private readonly listView: NotebookCellListView<CellViewModel>, private readonly coordinator: ICoordinatesConverter) {
 		super();
-		this.domNode = createFastDomNode(document.createElement('div'));
+		this.domNode = createFastDomNode(createElement('div'));
 		this.domNode.setClassName('view-zones');
 		this.domNode.setPosition('absolute');
 		this.domNode.setAttribute('role', 'presentation');
@@ -251,7 +252,7 @@ class ToggleNotebookViewZoneDeveloperAction extends Action2 {
 
 				const viewZoneIds: string[] = [];
 				for (let i = 0; i < cells.length; i++) {
-					const domNode = document.createElement('div');
+					const domNode = createElement('div');
 					domNode.innerText = `View Zone ${i}`;
 					domNode.style.backgroundColor = 'rgba(0, 255, 0, 0.5)';
 					const viewZoneId = accessor.addZone({
diff --git a/src/vs/workbench/contrib/preferences/browser/keybindingWidgets.ts b/src/vs/workbench/contrib/preferences/browser/keybindingWidgets.ts
index 9c476d5c609..a6267a47a4c 100644
--- a/src/vs/workbench/contrib/preferences/browser/keybindingWidgets.ts
+++ b/src/vs/workbench/contrib/preferences/browser/keybindingWidgets.ts
@@ -160,7 +160,7 @@ export class DefineKeybindingWidget extends Widget {
 	) {
 		super();
 
-		this._domNode = createFastDomNode(document.createElement('div'));
+		this._domNode = createFastDomNode(dom.createElement('div'));
 		this._domNode.setDisplay('none');
 		this._domNode.setClassName('defineKeybindingWidget');
 		this._domNode.setWidth(DefineKeybindingWidget.WIDTH);
diff --git a/src/vs/workbench/contrib/remote/browser/remote.ts b/src/vs/workbench/contrib/remote/browser/remote.ts
index f391f5d1979..8c3f313dd99 100644
--- a/src/vs/workbench/contrib/remote/browser/remote.ts
+++ b/src/vs/workbench/contrib/remote/browser/remote.ts
@@ -473,7 +473,7 @@ class HelpPanel extends ViewPane {
 		super.renderBody(container);
 
 		container.classList.add('remote-help');
-		const treeContainer = document.createElement('div');
+		const treeContainer = dom.createElement('div');
 		treeContainer.classList.add('remote-help-content');
 		container.appendChild(treeContainer);
 
diff --git a/src/vs/workbench/contrib/scm/browser/scmHistory.ts b/src/vs/workbench/contrib/scm/browser/scmHistory.ts
index 71faef70db0..1242f784ab0 100644
--- a/src/vs/workbench/contrib/scm/browser/scmHistory.ts
+++ b/src/vs/workbench/contrib/scm/browser/scmHistory.ts
@@ -9,7 +9,7 @@ import { badgeBackground, buttonForeground, chartsBlue, chartsPurple, foreground
 import { asCssVariable, ColorIdentifier, registerColor } from '../../../../platform/theme/common/colorUtils.js';
 import { ISCMHistoryItem, ISCMHistoryItemGraphNode, ISCMHistoryItemRef, ISCMHistoryItemViewModel } from '../common/history.js';
 import { rot } from '../../../../base/common/numbers.js';
-import { svgElem } from '../../../../base/browser/dom.js';
+import { createElementNS, svgElem } from '../../../../base/browser/dom.js';
 
 export const SWIMLANE_HEIGHT = 22;
 export const SWIMLANE_WIDTH = 11;
@@ -56,7 +56,7 @@ function getLabelColorIdentifier(historyItem: ISCMHistoryItem, colorMap: Map<str
 }
 
 function createPath(colorIdentifier: string, strokeWidth = 1): SVGPathElement {
-	const path = document.createElementNS('http://www.w3.org/2000/svg', 'path');
+	const path = createElementNS('http://www.w3.org/2000/svg', 'path');
 	path.setAttribute('fill', 'none');
 	path.setAttribute('stroke-width', `${strokeWidth}px`);
 	path.setAttribute('stroke-linecap', 'round');
@@ -66,7 +66,7 @@ function createPath(colorIdentifier: string, strokeWidth = 1): SVGPathElement {
 }
 
 function drawCircle(index: number, radius: number, strokeWidth: number, colorIdentifier?: string): SVGCircleElement {
-	const circle = document.createElementNS('http://www.w3.org/2000/svg', 'circle');
+	const circle = createElementNS('http://www.w3.org/2000/svg', 'circle');
 	circle.setAttribute('cx', `${SWIMLANE_WIDTH * (index + 1)}`);
 	circle.setAttribute('cy', `${SWIMLANE_WIDTH}`);
 	circle.setAttribute('r', `${radius}`);
@@ -97,7 +97,7 @@ function findLastIndex(nodes: ISCMHistoryItemGraphNode[], id: string): number {
 }
 
 export function renderSCMHistoryItemGraph(historyItemViewModel: ISCMHistoryItemViewModel): SVGElement {
-	const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
+	const svg = createElementNS('http://www.w3.org/2000/svg', 'svg');
 	svg.classList.add('graph');
 
 	const historyItem = historyItemViewModel.historyItem;
diff --git a/src/vs/workbench/contrib/search/browser/patternInputWidget.ts b/src/vs/workbench/contrib/search/browser/patternInputWidget.ts
index f3402feca05..e971287510e 100644
--- a/src/vs/workbench/contrib/search/browser/patternInputWidget.ts
+++ b/src/vs/workbench/contrib/search/browser/patternInputWidget.ts
@@ -138,7 +138,7 @@ export class PatternInputWidget extends Widget {
 	}
 
 	private render(options: IOptions): void {
-		this.domNode = document.createElement('div');
+		this.domNode = dom.createElement('div');
 		this.domNode.classList.add('monaco-findInput');
 		const history = options.history || [];
 
@@ -159,7 +159,7 @@ export class PatternInputWidget extends Widget {
 		this.inputFocusTracker = dom.trackFocus(this.inputBox.inputElement);
 		this.onkeyup(this.inputBox.inputElement, (keyboardEvent) => this.onInputKeyUp(keyboardEvent));
 
-		const controls = document.createElement('div');
+		const controls = dom.createElement('div');
 		controls.className = 'controls';
 		this.renderSubcontrols(controls);
 
diff --git a/src/vs/workbench/contrib/terminal/browser/terminalConfigurationService.ts b/src/vs/workbench/contrib/terminal/browser/terminalConfigurationService.ts
index 538d9982983..c03f7096388 100644
--- a/src/vs/workbench/contrib/terminal/browser/terminalConfigurationService.ts
+++ b/src/vs/workbench/contrib/terminal/browser/terminalConfigurationService.ts
@@ -11,6 +11,7 @@ import { ITerminalConfigurationService, LinuxDistro } from './terminal.js';
 import type { IXtermCore } from './xterm-private.js';
 import { DEFAULT_BOLD_FONT_WEIGHT, DEFAULT_FONT_WEIGHT, DEFAULT_LETTER_SPACING, DEFAULT_LINE_HEIGHT, FontWeight, ITerminalConfiguration, MAXIMUM_FONT_WEIGHT, MINIMUM_FONT_WEIGHT, MINIMUM_LETTER_SPACING, TERMINAL_CONFIG_SECTION, type ITerminalFont } from '../common/terminal.js';
 import { isMacintosh } from '../../../../base/common/platform.js';
+import { createElement } from '../../../../base/browser/dom.js';
 
 // #region TerminalConfigurationService
 
@@ -171,7 +172,7 @@ export class TerminalFontMetrics extends Disposable {
 		}
 		// Create charMeasureElement if it hasn't been created or if it was orphaned by its parent
 		if (!this._charMeasureElement || !this._charMeasureElement.parentElement) {
-			this._charMeasureElement = document.createElement('div');
+			this._charMeasureElement = createElement('div');
 			this._panelContainer.appendChild(this._charMeasureElement);
 		}
 		return this._charMeasureElement;
diff --git a/src/vs/workbench/contrib/terminal/browser/terminalGroup.ts b/src/vs/workbench/contrib/terminal/browser/terminalGroup.ts
index 2a3613c910e..495365af5c1 100644
--- a/src/vs/workbench/contrib/terminal/browser/terminalGroup.ts
+++ b/src/vs/workbench/contrib/terminal/browser/terminalGroup.ts
@@ -13,7 +13,7 @@ import { ITerminalInstance, Direction, ITerminalGroup, ITerminalInstanceService,
 import { ViewContainerLocation, IViewDescriptorService } from '../../../common/views.js';
 import { IShellLaunchConfig, ITerminalTabLayoutInfoById, TerminalLocation } from '../../../../platform/terminal/common/terminal.js';
 import { TerminalStatus } from './terminalStatusList.js';
-import { getWindow } from '../../../../base/browser/dom.js';
+import { createElement, getWindow } from '../../../../base/browser/dom.js';
 import { getPartByLocation } from '../../../services/views/browser/viewsService.js';
 import { asArray } from '../../../../base/common/arrays.js';
 
@@ -216,7 +216,7 @@ class SplitPane implements IView {
 		readonly instance: ITerminalInstance,
 		public orthogonalSize: number
 	) {
-		this.element = document.createElement('div');
+		this.element = createElement('div');
 		this.element.className = 'terminal-split-pane';
 		this.instance.attachToElement(this.element);
 	}
@@ -471,7 +471,7 @@ export class TerminalGroup extends Disposable implements ITerminalGroup {
 
 		// If we already have a group element, we can reparent it
 		if (!this._groupElement) {
-			this._groupElement = document.createElement('div');
+			this._groupElement = createElement('div');
 			this._groupElement.classList.add('terminal-group');
 		}
 
diff --git a/src/vs/workbench/contrib/terminal/browser/terminalInstance.ts b/src/vs/workbench/contrib/terminal/browser/terminalInstance.ts
index 3e082238c48..967c1b23f78 100644
--- a/src/vs/workbench/contrib/terminal/browser/terminalInstance.ts
+++ b/src/vs/workbench/contrib/terminal/browser/terminalInstance.ts
@@ -397,7 +397,7 @@ export class TerminalInstance extends Disposable implements ITerminalInstance {
 	) {
 		super();
 
-		this._wrapperElement = document.createElement('div');
+		this._wrapperElement = dom.createElement('div');
 		this._wrapperElement.classList.add('terminal-wrapper');
 
 		this._widgetManager = this._register(instantiationService.createInstance(TerminalWidgetManager));
@@ -999,7 +999,7 @@ export class TerminalInstance extends Disposable implements ITerminalInstance {
 			throw new Error('A container element needs to be set with `attachToElement` and be part of the DOM before calling `_open`');
 		}
 
-		const xtermElement = document.createElement('div');
+		const xtermElement = dom.createElement('div');
 		this._wrapperElement.appendChild(xtermElement);
 
 		this._container.appendChild(this._wrapperElement);
@@ -2423,7 +2423,7 @@ class TerminalInstanceDragAndDropController extends Disposable implements dom.ID
 		}
 
 		if (!this._dropOverlay) {
-			this._dropOverlay = document.createElement('div');
+			this._dropOverlay = dom.createElement('div');
 			this._dropOverlay.classList.add('terminal-drop-overlay');
 		}
 
diff --git a/src/vs/workbench/contrib/terminal/browser/terminalTabbedView.ts b/src/vs/workbench/contrib/terminal/browser/terminalTabbedView.ts
index 5fe7f6ab42c..bb7eab803cc 100644
--- a/src/vs/workbench/contrib/terminal/browser/terminalTabbedView.ts
+++ b/src/vs/workbench/contrib/terminal/browser/terminalTabbedView.ts
@@ -191,7 +191,7 @@ export class TerminalTabbedView extends Disposable {
 	private _handleOnDidSashReset(): void {
 		// Calculate ideal size of list to display all text based on its contents
 		let idealWidth = TerminalTabsListSizes.WideViewMinimumWidth;
-		const offscreenCanvas = document.createElement('canvas');
+		const offscreenCanvas = dom.createElement('canvas');
 		offscreenCanvas.width = 1;
 		offscreenCanvas.height = 1;
 		const ctx = offscreenCanvas.getContext('2d');
diff --git a/src/vs/workbench/contrib/terminal/browser/widgets/widgetManager.ts b/src/vs/workbench/contrib/terminal/browser/widgets/widgetManager.ts
index 8a4d8d35bd9..459284c6745 100644
--- a/src/vs/workbench/contrib/terminal/browser/widgets/widgetManager.ts
+++ b/src/vs/workbench/contrib/terminal/browser/widgets/widgetManager.ts
@@ -3,6 +3,7 @@
  *  Licensed under the MIT License. See License.txt in the project root for license information.
  *--------------------------------------------------------------------------------------------*/
 
+import { createElement } from '../../../../../base/browser/dom.js';
 import { IDisposable } from '../../../../../base/common/lifecycle.js';
 import { ITerminalWidget } from './widgets.js';
 
@@ -12,7 +13,7 @@ export class TerminalWidgetManager implements IDisposable {
 
 	attachToElement(terminalWrapper: HTMLElement) {
 		if (!this._container) {
-			this._container = document.createElement('div');
+			this._container = createElement('div');
 			this._container.classList.add('terminal-widget-container');
 			terminalWrapper.appendChild(this._container);
 		}
diff --git a/src/vs/workbench/contrib/terminalContrib/chat/browser/terminalChatWidget.ts b/src/vs/workbench/contrib/terminalContrib/chat/browser/terminalChatWidget.ts
index acad1225d79..3b974a02c26 100644
--- a/src/vs/workbench/contrib/terminalContrib/chat/browser/terminalChatWidget.ts
+++ b/src/vs/workbench/contrib/terminalContrib/chat/browser/terminalChatWidget.ts
@@ -4,7 +4,7 @@
  *--------------------------------------------------------------------------------------------*/
 
 import type { Terminal as RawXtermTerminal } from '@xterm/xterm';
-import { Dimension, getActiveWindow, IFocusTracker, trackFocus } from '../../../../../base/browser/dom.js';
+import { createElement, Dimension, getActiveWindow, IFocusTracker, trackFocus } from '../../../../../base/browser/dom.js';
 import { CancelablePromise, createCancelablePromise, DeferredPromise } from '../../../../../base/common/async.js';
 import { CancellationTokenSource } from '../../../../../base/common/cancellation.js';
 import { Emitter, Event } from '../../../../../base/common/event.js';
@@ -111,7 +111,7 @@ export class TerminalChatWidget extends Disposable {
 		this._responseContainsCodeBlockContextKey = TerminalChatContextKeys.responseContainsCodeBlock.bindTo(contextKeyService);
 		this._responseContainsMulitpleCodeBlocksContextKey = TerminalChatContextKeys.responseContainsMultipleCodeBlocks.bindTo(contextKeyService);
 
-		this._container = document.createElement('div');
+		this._container = createElement('div');
 		this._container.classList.add('terminal-inline-chat');
 		this._terminalElement.appendChild(this._container);
 
diff --git a/src/vs/workbench/contrib/terminalContrib/developer/browser/terminal.developer.contribution.ts b/src/vs/workbench/contrib/terminalContrib/developer/browser/terminal.developer.contribution.ts
index 0ad81a5b126..c5b28c66714 100644
--- a/src/vs/workbench/contrib/terminalContrib/developer/browser/terminal.developer.contribution.ts
+++ b/src/vs/workbench/contrib/terminalContrib/developer/browser/terminal.developer.contribution.ts
@@ -28,6 +28,7 @@ import { registerTerminalContribution, type ITerminalContributionContext } from
 import { TerminalContextKeys } from '../../../terminal/common/terminalContextKey.js';
 import { TerminalDeveloperCommandId } from '../common/terminal.developer.js';
 import './media/developer.css';
+import { createElement } from '../../../../../base/browser/dom.js';
 
 registerTerminalAction({
 	id: TerminalDeveloperCommandId.ShowTextureAtlas,
@@ -44,7 +45,7 @@ registerTerminalAction({
 		}
 		const cwdUri = workspaceContextService.getWorkspace().folders[0].uri;
 		const fileUri = URI.joinPath(cwdUri, 'textureAtlas.png');
-		const canvas = document.createElement('canvas');
+		const canvas = createElement('canvas');
 		canvas.width = bitmap.width;
 		canvas.height = bitmap.height;
 		const ctx = canvas.getContext('bitmaprenderer');
diff --git a/src/vs/workbench/contrib/testing/browser/codeCoverageDecorations.ts b/src/vs/workbench/contrib/testing/browser/codeCoverageDecorations.ts
index 6d0c07ae2e3..f52c4e12e4e 100644
--- a/src/vs/workbench/contrib/testing/browser/codeCoverageDecorations.ts
+++ b/src/vs/workbench/contrib/testing/browser/codeCoverageDecorations.ts
@@ -667,7 +667,7 @@ class CoverageToolbarWidget extends Disposable implements IOverlayWidget {
 			viewZoneId = accessor.addZone({ // make space for the widget
 				afterLineNumber: 0,
 				afterColumn: 0,
-				domNode: document.createElement('div'),
+				domNode: dom.createElement('div'),
 				heightInPx: 30,
 				ordinal: -1, // show before code lenses
 			});
diff --git a/src/vs/workbench/contrib/testing/browser/testResultsView/testResultsViewContent.ts b/src/vs/workbench/contrib/testing/browser/testResultsView/testResultsViewContent.ts
index d507557bcb8..31fedb33449 100644
--- a/src/vs/workbench/contrib/testing/browser/testResultsView/testResultsViewContent.ts
+++ b/src/vs/workbench/contrib/testing/browser/testResultsView/testResultsViewContent.ts
@@ -546,7 +546,7 @@ class FollowupActionWidget extends Disposable {
 	}
 
 	private makeLink(onClick: () => void) {
-		const link = document.createElement('a');
+		const link = dom.createElement('a');
 		link.tabIndex = 0;
 		this.visibleStore.add(dom.addDisposableListener(link, 'click', onClick));
 		this.visibleStore.add(dom.addDisposableListener(link, 'keydown', e => {
diff --git a/src/vs/workbench/contrib/testing/browser/testingDecorations.ts b/src/vs/workbench/contrib/testing/browser/testingDecorations.ts
index 3c3a2f50f35..85c9e76bff2 100644
--- a/src/vs/workbench/contrib/testing/browser/testingDecorations.ts
+++ b/src/vs/workbench/contrib/testing/browser/testingDecorations.ts
@@ -825,7 +825,7 @@ abstract class TitleLensContentWidget {
 			this.viewZoneId = accessor.addZone({
 				afterLineNumber: 0,
 				afterColumn: Constants.MAX_SAFE_SMALL_INTEGER,
-				domNode: document.createElement('div'),
+				domNode: dom.createElement('div'),
 				heightInPx: 20,
 			});
 		});
@@ -1409,13 +1409,13 @@ class TestErrorContentWidget extends Disposable implements IContentWidget {
 
 		this.node.name.innerText = text || 'Test Failed';
 
-		const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
+		const svg = dom.createElementNS('http://www.w3.org/2000/svg', 'svg');
 		svg.setAttribute('width', '15');
 		svg.setAttribute('height', '10');
 		svg.setAttribute('preserveAspectRatio', 'none');
 		svg.setAttribute('viewBox', '0 0 15 10');
 
-		const leftArrow = document.createElementNS('http://www.w3.org/2000/svg', 'path');
+		const leftArrow = dom.createElementNS('http://www.w3.org/2000/svg', 'path');
 		leftArrow.setAttribute('d', 'M15 0 L10 0 L0 5 L10 10 L15 10 Z');
 		svg.append(leftArrow);
 
diff --git a/src/vs/workbench/contrib/testing/test/browser/testObjectTree.ts b/src/vs/workbench/contrib/testing/test/browser/testObjectTree.ts
index 74601edb73d..c38d98b31e9 100644
--- a/src/vs/workbench/contrib/testing/test/browser/testObjectTree.ts
+++ b/src/vs/workbench/contrib/testing/test/browser/testObjectTree.ts
@@ -13,10 +13,11 @@ import { TestsDiff, TestsDiffOp } from '../../common/testTypes.js';
 import { ITestService } from '../../common/testService.js';
 import { testStubs } from '../common/testStubs.js';
 import { ITreeRenderer, ITreeSorter } from '../../../../../base/browser/ui/tree/tree.js';
+import { createElement } from '../../../../../base/browser/dom.js';
 
 type SerializedTree = { e: string; children?: SerializedTree[]; data?: string };
 
-const element = document.createElement('div');
+const element = createElement('div');
 element.style.height = '1000px';
 element.style.width = '200px';
 
diff --git a/src/vs/workbench/contrib/timeline/browser/timelinePane.ts b/src/vs/workbench/contrib/timeline/browser/timelinePane.ts
index 0fc7adb151f..b91a3b5289a 100644
--- a/src/vs/workbench/contrib/timeline/browser/timelinePane.ts
+++ b/src/vs/workbench/contrib/timeline/browser/timelinePane.ts
@@ -921,7 +921,7 @@ export class TimelinePane extends ViewPane {
 
 		this.message = localize('timeline.editorCannotProvideTimeline', "The active editor cannot provide timeline information.");
 
-		this.$tree = document.createElement('div');
+		this.$tree = DOM.createElement('div');
 		this.$tree.classList.add('customview-tree', 'file-icon-themable-tree', 'hide-arrows');
 		// this.treeElement.classList.add('show-file-icons');
 		container.appendChild(this.$tree);
diff --git a/src/vs/workbench/contrib/typeHierarchy/browser/typeHierarchyPeek.ts b/src/vs/workbench/contrib/typeHierarchy/browser/typeHierarchyPeek.ts
index 38173483a96..0df81c0150a 100644
--- a/src/vs/workbench/contrib/typeHierarchy/browser/typeHierarchyPeek.ts
+++ b/src/vs/workbench/contrib/typeHierarchy/browser/typeHierarchyPeek.ts
@@ -4,7 +4,7 @@
  *--------------------------------------------------------------------------------------------*/
 
 import './media/typeHierarchy.css';
-import { Dimension, isKeyboardEvent } from '../../../../base/browser/dom.js';
+import { createElement, Dimension, isKeyboardEvent } from '../../../../base/browser/dom.js';
 import { Orientation, Sizing, SplitView } from '../../../../base/browser/ui/splitview/splitview.js';
 import { IAsyncDataTreeViewState } from '../../../../base/browser/ui/tree/asyncDataTree.js';
 import { ITreeNode, TreeMouseEventTarget } from '../../../../base/browser/ui/tree/tree.js';
@@ -146,20 +146,20 @@ export class TypeHierarchyTreePeekWidget extends PeekViewWidget {
 		this._parent = parent;
 		parent.classList.add('type-hierarchy');
 
-		const message = document.createElement('div');
+		const message = createElement('div');
 		message.classList.add('message');
 		parent.appendChild(message);
 		this._message = message;
 		this._message.tabIndex = 0;
 
-		const container = document.createElement('div');
+		const container = createElement('div');
 		container.classList.add('results');
 		parent.appendChild(container);
 
 		this._splitView = new SplitView(container, { orientation: Orientation.HORIZONTAL });
 
 		// editor stuff
-		const editorContainer = document.createElement('div');
+		const editorContainer = createElement('div');
 		editorContainer.classList.add('editor');
 		container.appendChild(editorContainer);
 		const editorOptions: IEditorOptions = {
@@ -187,7 +187,7 @@ export class TypeHierarchyTreePeekWidget extends PeekViewWidget {
 		);
 
 		// tree stuff
-		const treeContainer = document.createElement('div');
+		const treeContainer = createElement('div');
 		treeContainer.classList.add('tree');
 		container.appendChild(treeContainer);
 		const options: IWorkbenchAsyncDataTreeOptions<typeHTree.Type, FuzzyScore> = {
diff --git a/src/vs/workbench/contrib/typeHierarchy/browser/typeHierarchyTree.ts b/src/vs/workbench/contrib/typeHierarchy/browser/typeHierarchyTree.ts
index 253fb35cc9c..b878dae8acb 100644
--- a/src/vs/workbench/contrib/typeHierarchy/browser/typeHierarchyTree.ts
+++ b/src/vs/workbench/contrib/typeHierarchy/browser/typeHierarchyTree.ts
@@ -15,6 +15,7 @@ import { Range } from '../../../../editor/common/core/range.js';
 import { IListAccessibilityProvider } from '../../../../base/browser/ui/list/listWidget.js';
 import { localize } from '../../../../nls.js';
 import { ThemeIcon } from '../../../../base/common/themables.js';
+import { createElement } from '../../../../base/browser/dom.js';
 
 export class Type {
 	constructor(
@@ -106,7 +107,7 @@ export class TypeRenderer implements ITreeRenderer<Type, FuzzyScore, TypeRenderi
 
 	renderTemplate(container: HTMLElement): TypeRenderingTemplate {
 		container.classList.add('typehierarchy-element');
-		const icon = document.createElement('div');
+		const icon = createElement('div');
 		container.appendChild(icon);
 		const label = new IconLabel(container, { supportHighlights: true });
 		return new TypeRenderingTemplate(icon, label);
diff --git a/src/vs/workbench/contrib/webview/browser/overlayWebview.ts b/src/vs/workbench/contrib/webview/browser/overlayWebview.ts
index 40108569ae9..692f529e39b 100644
--- a/src/vs/workbench/contrib/webview/browser/overlayWebview.ts
+++ b/src/vs/workbench/contrib/webview/browser/overlayWebview.ts
@@ -3,7 +3,7 @@
  *  Licensed under the MIT License. See License.txt in the project root for license information.
  *--------------------------------------------------------------------------------------------*/
 
-import { Dimension, getWindowById } from '../../../../base/browser/dom.js';
+import { createElement, Dimension, getWindowById } from '../../../../base/browser/dom.js';
 import { FastDomNode } from '../../../../base/browser/fastDomNode.js';
 import { IMouseWheelEvent } from '../../../../base/browser/mouseEvent.js';
 import { CodeWindow } from '../../../../base/browser/window.js';
@@ -99,7 +99,7 @@ export class OverlayWebview extends Disposable implements IOverlayWebview {
 		}
 
 		if (!this._container) {
-			const node = document.createElement('div');
+			const node = createElement('div');
 			node.style.position = 'absolute';
 			node.style.overflow = 'hidden';
 			this._container = new FastDomNode(node);
diff --git a/src/vs/workbench/contrib/webview/browser/webviewElement.ts b/src/vs/workbench/contrib/webview/browser/webviewElement.ts
index 33fdaac3ad4..ab6a39f1f7f 100644
--- a/src/vs/workbench/contrib/webview/browser/webviewElement.ts
+++ b/src/vs/workbench/contrib/webview/browser/webviewElement.ts
@@ -4,7 +4,7 @@
  *--------------------------------------------------------------------------------------------*/
 
 import { isFirefox } from '../../../../base/browser/browser.js';
-import { addDisposableListener, EventType, getWindowById } from '../../../../base/browser/dom.js';
+import { addDisposableListener, createElement, EventType, getWindowById } from '../../../../base/browser/dom.js';
 import { parentOriginHash } from '../../../../base/browser/iframe.js';
 import { IMouseWheelEvent } from '../../../../base/browser/mouseEvent.js';
 import { CodeWindow } from '../../../../base/browser/window.js';
@@ -393,7 +393,7 @@ export class WebviewElement extends Disposable implements IWebview, WebviewFindD
 	private _createElement(options: WebviewOptions, _contentOptions: WebviewContentOptions) {
 		// Do not start loading the webview yet.
 		// Wait the end of the ctor when all listeners have been hooked up.
-		const element = document.createElement('iframe');
+		const element = createElement('iframe');
 		element.name = this.id;
 		element.className = `webview ${options.customClasses || ''}`;
 		element.sandbox.add('allow-scripts', 'allow-same-origin', 'allow-forms', 'allow-pointer-lock', 'allow-downloads');
diff --git a/src/vs/workbench/contrib/webviewPanel/browser/webviewEditor.ts b/src/vs/workbench/contrib/webviewPanel/browser/webviewEditor.ts
index 5a7de862a35..b1104cf683e 100644
--- a/src/vs/workbench/contrib/webviewPanel/browser/webviewEditor.ts
+++ b/src/vs/workbench/contrib/webviewPanel/browser/webviewEditor.ts
@@ -81,7 +81,7 @@ export class WebviewEditor extends EditorPane {
 	}
 
 	protected createEditor(parent: HTMLElement): void {
-		const element = document.createElement('div');
+		const element = DOM.createElement('div');
 		this._element = element;
 		this._element.id = `webview-editor-element-${generateUuid()}`;
 		parent.appendChild(element);
diff --git a/src/vs/workbench/contrib/welcomeWalkthrough/browser/walkThroughPart.ts b/src/vs/workbench/contrib/welcomeWalkthrough/browser/walkThroughPart.ts
index 61c2b58dfa4..59536537d36 100644
--- a/src/vs/workbench/contrib/welcomeWalkthrough/browser/walkThroughPart.ts
+++ b/src/vs/workbench/contrib/welcomeWalkthrough/browser/walkThroughPart.ts
@@ -32,7 +32,7 @@ import { UILabelProvider } from '../../../../base/common/keybindingLabels.js';
 import { OS, OperatingSystem } from '../../../../base/common/platform.js';
 import { deepClone } from '../../../../base/common/objects.js';
 import { INotificationService } from '../../../../platform/notification/common/notification.js';
-import { addDisposableListener, Dimension, getActiveElement, isHTMLAnchorElement, isHTMLButtonElement, isHTMLElement, safeInnerHtml, size } from '../../../../base/browser/dom.js';
+import { addDisposableListener, createElement, Dimension, getActiveElement, isHTMLAnchorElement, isHTMLButtonElement, isHTMLElement, safeInnerHtml, size } from '../../../../base/browser/dom.js';
 import { IEditorGroup, IEditorGroupsService } from '../../../services/editor/common/editorGroupsService.js';
 import { CancellationToken } from '../../../../base/common/cancellation.js';
 import { IExtensionService } from '../../../services/extensions/common/extensions.js';
@@ -86,7 +86,7 @@ export class WalkThroughPart extends EditorPane {
 	}
 
 	protected createEditor(container: HTMLElement): void {
-		this.content = document.createElement('div');
+		this.content = createElement('div');
 		this.content.classList.add('welcomePageFocusElement');
 		this.content.tabIndex = 0;
 		this.content.style.outlineStyle = 'none';
@@ -299,7 +299,7 @@ export class WalkThroughPart extends EditorPane {
 					return;
 				}
 
-				const innerContent = document.createElement('div');
+				const innerContent = createElement('div');
 				innerContent.classList.add('walkThroughContent'); // only for markdown files
 				const markdown = this.expandMacros(content);
 				safeInnerHtml(innerContent, markdown, { ALLOW_UNKNOWN_PROTOCOLS: true });
diff --git a/src/vs/workbench/services/extensions/browser/webWorkerExtensionHost.ts b/src/vs/workbench/services/extensions/browser/webWorkerExtensionHost.ts
index e992bf29499..2a1adf9f9c1 100644
--- a/src/vs/workbench/services/extensions/browser/webWorkerExtensionHost.ts
+++ b/src/vs/workbench/services/extensions/browser/webWorkerExtensionHost.ts
@@ -132,7 +132,7 @@ export class WebWorkerExtensionHost extends Disposable implements IExtensionHost
 		const webWorkerExtensionHostIframeSrc = await this._getWebWorkerExtensionHostIframeSrc();
 		const emitter = this._register(new Emitter<VSBuffer>());
 
-		const iframe = document.createElement('iframe');
+		const iframe = dom.createElement('iframe');
 		iframe.setAttribute('class', 'web-worker-ext-host-iframe');
 		iframe.setAttribute('sandbox', 'allow-scripts allow-same-origin');
 		iframe.setAttribute('allow', 'usb; serial; hid; cross-origin-isolated;');
diff --git a/src/vs/workbench/services/host/browser/browserHostService.ts b/src/vs/workbench/services/host/browser/browserHostService.ts
index d34518a241e..4e134b280c2 100644
--- a/src/vs/workbench/services/host/browser/browserHostService.ts
+++ b/src/vs/workbench/services/host/browser/browserHostService.ts
@@ -15,7 +15,7 @@ import { whenEditorClosed } from '../../../browser/editor.js';
 import { IWorkspace, IWorkspaceProvider } from '../../../browser/web.api.js';
 import { IFileService } from '../../../../platform/files/common/files.js';
 import { ILabelService, Verbosity } from '../../../../platform/label/common/label.js';
-import { EventType, ModifierKeyEmitter, addDisposableListener, addDisposableThrottledListener, detectFullscreen, disposableWindowInterval, getActiveDocument, getWindowId, onDidRegisterWindow, trackFocus } from '../../../../base/browser/dom.js';
+import { EventType, ModifierKeyEmitter, addDisposableListener, addDisposableThrottledListener, createElement, detectFullscreen, disposableWindowInterval, getActiveDocument, getWindowId, onDidRegisterWindow, trackFocus } from '../../../../base/browser/dom.js';
 import { Disposable, DisposableStore, toDisposable } from '../../../../base/common/lifecycle.js';
 import { IBrowserWorkbenchEnvironmentService } from '../../environment/browser/environmentService.js';
 import { memoize } from '../../../../base/common/decorators.js';
@@ -617,7 +617,7 @@ export class BrowserHostService extends Disposable implements IHostService {
 		const store = new DisposableStore();
 
 		// Create a video element to play the captured screen source
-		const video = document.createElement('video');
+		const video = createElement('video');
 		store.add(toDisposable(() => video.remove()));
 		let stream: MediaStream | undefined;
 		try {
@@ -637,7 +637,7 @@ export class BrowserHostService extends Disposable implements IHostService {
 				new Promise<void>(r => store.add(addDisposableListener(video, 'canplaythrough', () => r())))
 			]);
 
-			const canvas = document.createElement('canvas');
+			const canvas = createElement('canvas');
 			canvas.width = video.videoWidth;
 			canvas.height = video.videoHeight;
 
