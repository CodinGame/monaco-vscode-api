From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Lo=C3=AFc=20Mangeonjean?= <loic@coderpad.io>
Date: Mon, 11 Mar 2024 18:24:35 +0100
Subject: [PATCH] fix: only use open model

---
 .../browser/languageDetectionWebWorker.ts     | 61 +------------------
 1 file changed, 3 insertions(+), 58 deletions(-)

diff --git a/src/vs/workbench/services/languageDetection/browser/languageDetectionWebWorker.ts b/src/vs/workbench/services/languageDetection/browser/languageDetectionWebWorker.ts
index 0624f7cc767..24ec7b638b4 100644
--- a/src/vs/workbench/services/languageDetection/browser/languageDetectionWebWorker.ts
+++ b/src/vs/workbench/services/languageDetection/browser/languageDetectionWebWorker.ts
@@ -3,15 +3,12 @@
  *  Licensed under the MIT License. See License.txt in the project root for license information.
  *--------------------------------------------------------------------------------------------*/
 
-import type { ModelOperations, ModelResult } from '@vscode/vscode-languagedetection';
-import { importAMDNodeModule } from '../../../../amdX.js';
+import { ModelOperations, ModelResult } from '@vscode/vscode-languagedetection';
 import { StopWatch } from '../../../../base/common/stopwatch.js';
 import { IWebWorkerServerRequestHandler, IWebWorkerServer } from '../../../../base/common/worker/webWorker.js';
 import { LanguageDetectionWorkerHost, ILanguageDetectionWorker } from './languageDetectionWorker.protocol.js';
 import { WorkerTextModelSyncServer } from '../../../../editor/common/services/textModelSync/textModelSync.impl.js';
 
-type RegexpModel = { detect: (inp: string, langBiases: Record<string, number>, supportedLangs?: string[]) => string | undefined };
-
 export function create(workerServer: IWebWorkerServer): IWebWorkerServerRequestHandler {
 	return new LanguageDetectionWorker(workerServer);
 }
@@ -30,8 +27,6 @@ export class LanguageDetectionWorker implements ILanguageDetectionWorker {
 	private readonly _workerTextModelSyncServer = new WorkerTextModelSyncServer();
 
 	private readonly _host: LanguageDetectionWorkerHost;
-	private _regexpModel: RegexpModel | undefined;
-	private _regexpLoadFailed: boolean = false;
 
 	private _modelOperations: ModelOperations | undefined;
 	private _loadFailed: boolean = false;
@@ -70,19 +65,8 @@ export class LanguageDetectionWorker implements ILanguageDetectionWorker {
 			return undefined;
 		};
 
-		const historicalResolver = async () => this.runRegexpModel(documentTextSample, langBiases ?? {}, supportedLangs);
-
-		if (preferHistory) {
-			const history = await historicalResolver();
-			if (history) { return history; }
-			const neural = await neuralResolver();
-			if (neural) { return neural; }
-		} else {
-			const neural = await neuralResolver();
-			if (neural) { return neural; }
-			const history = await historicalResolver();
-			if (history) { return history; }
-		}
+		const neural = await neuralResolver();
+		if (neural) { return neural; }
 
 		return undefined;
 	}
@@ -101,50 +85,11 @@ export class LanguageDetectionWorker implements ILanguageDetectionWorker {
 		return content;
 	}
 
-	private async getRegexpModel(): Promise<RegexpModel | undefined> {
-		if (this._regexpLoadFailed) {
-			return;
-		}
-		if (this._regexpModel) {
-			return this._regexpModel;
-		}
-		const uri: string = await this._host.$getRegexpModelUri();
-		try {
-			this._regexpModel = await importAMDNodeModule(uri, '') as RegexpModel;
-			return this._regexpModel;
-		} catch (e) {
-			this._regexpLoadFailed = true;
-			// console.warn('error loading language detection model', e);
-			return;
-		}
-	}
-
-	private async runRegexpModel(content: string, langBiases: Record<string, number>, supportedLangs?: string[]): Promise<string | undefined> {
-		const regexpModel = await this.getRegexpModel();
-		if (!regexpModel) { return; }
-
-		if (supportedLangs?.length) {
-			// When using supportedLangs, normally computed biases are too extreme. Just use a "bitmask" of sorts.
-			for (const lang of Object.keys(langBiases)) {
-				if (supportedLangs.includes(lang)) {
-					langBiases[lang] = 1;
-				} else {
-					langBiases[lang] = 0;
-				}
-			}
-		}
-
-		const detected = regexpModel.detect(content, langBiases, supportedLangs);
-		return detected;
-	}
-
 	private async getModelOperations(): Promise<ModelOperations> {
 		if (this._modelOperations) {
 			return this._modelOperations;
 		}
 
-		const uri: string = await this._host.$getIndexJsUri();
-		const { ModelOperations } = await importAMDNodeModule(uri, '') as typeof import('@vscode/vscode-languagedetection');
 		this._modelOperations = new ModelOperations({
 			modelJsonLoaderFunc: async () => {
 				const response = await fetch(await this._host.$getModelJsonUri());
