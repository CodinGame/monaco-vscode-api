diff --git a/.eslintrc.json b/.eslintrc.json
index 2f52208fa18..0c52cf94757 100644
--- a/.eslintrc.json
+++ b/.eslintrc.json
@@ -264,6 +264,7 @@
 							"v8-inspect-profiler",
 							"vscode-regexpp",
 							"vscode-textmate",
+							"vscode-oniguruma",
 							"worker_threads",
 							"xterm",
 							"xterm-addon-canvas",
diff --git a/build/lib/standalone.js b/build/lib/standalone.js
index 38be1131300..52c3b2b0a82 100644
--- a/build/lib/standalone.js
+++ b/build/lib/standalone.js
@@ -150,6 +150,9 @@ function createESMSourcesAndResources2(options) {
             const info = ts.preProcessFile(fileContents);
             for (let i = info.importedFiles.length - 1; i >= 0; i--) {
                 const importedFilename = info.importedFiles[i].fileName;
+                if (!importedFilename.startsWith('vs/')) {
+                    continue;
+                }
                 const pos = info.importedFiles[i].pos;
                 const end = info.importedFiles[i].end;
                 let importedFilepath;
@@ -172,6 +175,10 @@ function createESMSourcesAndResources2(options) {
                 else {
                     relativePath = path.relative(path.dirname(file), importedFilepath);
                 }
+                if (relativePath.endsWith('..')) {
+                    // When a folder have the same name as a file
+                    relativePath = relativePath + '/../' + path.basename(importedFilepath);
+                }
                 relativePath = relativePath.replace(/\\/g, '/');
                 if (!/(^\.\/)|(^\.\.\/)/.test(relativePath)) {
                     relativePath = './' + relativePath;
@@ -318,4 +325,4 @@ function transportCSS(module, enqueue, write) {
         return haystack.length >= needle.length && haystack.substr(0, needle.length) === needle;
     }
 }
-//# sourceMappingURL=data:application/json;base64,
\ No newline at end of file
+//# sourceMappingURL=data:application/json;base64,
\ No newline at end of file
diff --git a/build/lib/standalone.ts b/build/lib/standalone.ts
index 775a1be5996..ce8435bd920 100644
--- a/build/lib/standalone.ts
+++ b/build/lib/standalone.ts
@@ -180,6 +180,9 @@ export function createESMSourcesAndResources2(options: IOptions2): void {
 
 			for (let i = info.importedFiles.length - 1; i >= 0; i--) {
 				const importedFilename = info.importedFiles[i].fileName;
+				if (!importedFilename.startsWith('vs/')) {
+					continue;
+				}
 				const pos = info.importedFiles[i].pos;
 				const end = info.importedFiles[i].end;
 
@@ -201,6 +204,10 @@ export function createESMSourcesAndResources2(options: IOptions2): void {
 				} else {
 					relativePath = path.relative(path.dirname(file), importedFilepath);
 				}
+				if (relativePath.endsWith('..')) {
+					// When a folder have the same name as a file
+					relativePath = relativePath + '/../' + path.basename(importedFilepath);
+				}
 				relativePath = relativePath.replace(/\\/g, '/');
 				if (!/(^\.\/)|(^\.\.\/)/.test(relativePath)) {
 					relativePath = './' + relativePath;
diff --git a/extensions/typescript-language-features/web/webServer.ts b/extensions/typescript-language-features/web/webServer.ts
index 1688a93fcc0..fb57c8db79e 100644
--- a/extensions/typescript-language-features/web/webServer.ts
+++ b/extensions/typescript-language-features/web/webServer.ts
@@ -44,7 +44,7 @@ function fromResource(extensionUri: URI, uri: URI) {
 		&& uri.path.endsWith('.d.ts')) {
 		return uri.path;
 	}
-	return `/${uri.scheme}/${uri.authority}${uri.path}`;
+	return `/${uri.scheme}/${uri.authority || 'ts-nul-authority'}${uri.path}`;
 }
 
 function updateWatch(event: 'create' | 'change' | 'delete', uri: URI, extensionUri: URI) {
@@ -196,7 +196,7 @@ function createServerHost(extensionUri: URI, logger: ts.server.Logger, apiClient
 
 			const scriptPath = combinePaths(packageRoot, browser);
 			try {
-				const { default: module } = await import(/* webpackIgnore: true */scriptPath);
+				const { default: module } = await new Function('url', 'return importExt(url)')(scriptPath);
 				return { module, error: undefined };
 			} catch (e) {
 				return { module: undefined, error: e };
@@ -438,7 +438,7 @@ function createServerHost(extensionUri: URI, logger: ts.server.Logger, apiClient
 			return URI.from({
 				scheme: extensionUri.scheme,
 				authority: extensionUri.authority,
-				path: extensionUri.path + '/dist/browser/typescript/' + filepath.slice(1)
+				path: extensionUri.path.replace(/\/$/, '') + '/dist/browser/typescript/' + filepath.slice(1)
 			});
 		}
 
diff --git a/src/tsconfig.base.json b/src/tsconfig.base.json
index c0a2e174591..7cc68fbc22b 100644
--- a/src/tsconfig.base.json
+++ b/src/tsconfig.base.json
@@ -1,5 +1,6 @@
 {
 	"compilerOptions": {
+		"esModuleInterop": true,
 		"module": "amd",
 		"moduleResolution": "node",
 		"experimentalDecorators": true,
diff --git a/src/vs/base/browser/defaultWorkerFactory.ts b/src/vs/base/browser/defaultWorkerFactory.ts
index 9cab3604196..b27fc0eb96d 100644
--- a/src/vs/base/browser/defaultWorkerFactory.ts
+++ b/src/vs/base/browser/defaultWorkerFactory.ts
@@ -4,7 +4,9 @@
  *--------------------------------------------------------------------------------------------*/
 
 import { createTrustedTypesPolicy } from 'vs/base/browser/trustedTypes';
+// ESM-comment-begin
 import { COI } from 'vs/base/common/network';
+// ESM-comment-end
 import { IWorker, IWorkerCallback, IWorkerFactory, logOnceWebWorkerWarning } from 'vs/base/common/worker/simpleWorker';
 
 const ttPolicy = createTrustedTypesPolicy('defaultWorkerFactory', { createScriptURL: value => value });
diff --git a/src/vs/base/common/network.ts b/src/vs/base/common/network.ts
index b00899c50db..825c7a073bf 100644
--- a/src/vs/base/common/network.ts
+++ b/src/vs/base/common/network.ts
@@ -4,6 +4,8 @@
  *--------------------------------------------------------------------------------------------*/
 
 import * as errors from 'vs/base/common/errors';
+import { IDisposable, toDisposable } from 'vs/base/common/lifecycle';
+import { ResourceMap } from 'vs/base/common/map';
 import * as platform from 'vs/base/common/platform';
 import { URI } from 'vs/base/common/uri';
 
@@ -195,6 +197,7 @@ export const nodeModulesAsarUnpackedPath: AppResourcePath = 'vs/../../node_modul
 class FileAccessImpl {
 
 	private static readonly FALLBACK_AUTHORITY = 'vscode-app';
+	private staticBrowserUris = new ResourceMap<URI>();
 
 	/**
 	 * Returns a URI to use in contexts where the browser is responsible
@@ -203,7 +206,7 @@ class FileAccessImpl {
 	 * **Note:** use `dom.ts#asCSSUrl` whenever the URL is to be used in CSS context.
 	 */
 	asBrowserUri(resourcePath: AppResourcePath | ''): URI {
-		const uri = this.toUri(resourcePath, require);
+		const uri = this.toUri(resourcePath, (globalThis as any).monacoRequire);
 		return this.uriToBrowserUri(uri);
 	}
 
@@ -242,7 +245,7 @@ class FileAccessImpl {
 			});
 		}
 
-		return uri;
+		return this.staticBrowserUris.get(uri) ?? uri;
 	}
 
 	/**
@@ -250,7 +253,7 @@ class FileAccessImpl {
 	 * is responsible for loading.
 	 */
 	asFileUri(resourcePath: AppResourcePath | ''): URI {
-		const uri = this.toUri(resourcePath, require);
+		const uri = this.toUri(resourcePath, (globalThis as any).monacoRequire);
 		return this.uriToFileUri(uri);
 	}
 
@@ -282,6 +285,19 @@ class FileAccessImpl {
 
 		return URI.parse(moduleIdToUrl.toUrl(uriOrModule));
 	}
+
+	registerStaticBrowserUri(uri: URI, browserUri: URI): IDisposable {
+		this.staticBrowserUris.set(uri, browserUri);
+		return toDisposable(() => {
+			if (this.staticBrowserUris.get(uri) === browserUri) {
+				this.staticBrowserUris.delete(uri);
+			}
+		});
+	}
+
+	getRegisteredBrowserUris(): IterableIterator<URI> {
+		return this.staticBrowserUris.keys();
+	}
 }
 
 export const FileAccess = new FileAccessImpl();
diff --git a/src/vs/base/common/performance.js b/src/vs/base/common/performance.js
index aff4d0734de..ea43e4a2fcc 100644
--- a/src/vs/base/common/performance.js
+++ b/src/vs/base/common/performance.js
@@ -6,7 +6,7 @@
 'use strict';
 
 //@ts-check
-
+// ESM-comment-begin
 (function () {
 
 	/**
@@ -123,3 +123,27 @@
 	}
 
 })();
+// ESM-comment-end
+
+// ESM-uncomment-begin
+// export const mark = (name) => {
+// 	performance.mark(name);
+// };
+
+// export const getMarks = () => {
+// 	let timeOrigin = performance.timeOrigin;
+// 	if (typeof timeOrigin !== 'number') {
+// 		// safari: there is no timerOrigin but in renderers there is the timing-property
+// 		// see https://bugs.webkit.org/show_bug.cgi?id=174862
+// 		timeOrigin = performance.timing.navigationStart || performance.timing.redirectStart || performance.timing.fetchStart;
+// 	}
+// 	const result = [{ name: 'code/timeOrigin', startTime: Math.round(timeOrigin) }];
+// 	for (const entry of performance.getEntriesByType('mark')) {
+// 		result.push({
+// 			name: entry.name,
+// 			startTime: Math.round(timeOrigin + entry.startTime)
+// 		});
+// 	}
+// 	return result;
+// };
+// ESM-uncomment-end
diff --git a/src/vs/editor/browser/config/editorConfiguration.ts b/src/vs/editor/browser/config/editorConfiguration.ts
index fc197da1d57..a4d9573979f 100644
--- a/src/vs/editor/browser/config/editorConfiguration.ts
+++ b/src/vs/editor/browser/config/editorConfiguration.ts
@@ -269,7 +269,7 @@ export class ComputedEditorOptions implements IComputedEditorOptions {
 	}
 }
 
-class EditorOptionsUtil {
+export class EditorOptionsUtil {
 
 	public static validateOptions(options: IEditorOptions): ValidatedEditorOptions {
 		const result = new ValidatedEditorOptions();
diff --git a/src/vs/editor/editor.main.ts b/src/vs/editor/editor.main.ts
index 23d547570e9..31dfb4fd8d4 100644
--- a/src/vs/editor/editor.main.ts
+++ b/src/vs/editor/editor.main.ts
@@ -5,12 +5,5 @@
 
 import 'vs/editor/editor.all';
 import 'vs/editor/standalone/browser/iPadShowKeyboard/iPadShowKeyboard';
-import 'vs/editor/standalone/browser/inspectTokens/inspectTokens';
-import 'vs/editor/standalone/browser/quickAccess/standaloneHelpQuickAccess';
-import 'vs/editor/standalone/browser/quickAccess/standaloneGotoLineQuickAccess';
-import 'vs/editor/standalone/browser/quickAccess/standaloneGotoSymbolQuickAccess';
-import 'vs/editor/standalone/browser/quickAccess/standaloneCommandsQuickAccess';
-import 'vs/editor/standalone/browser/referenceSearch/standaloneReferenceSearch';
-import 'vs/editor/standalone/browser/toggleHighContrast/toggleHighContrast';
 
 export * from 'vs/editor/editor.api';
diff --git a/src/vs/editor/standalone/browser/standaloneServices.ts b/src/vs/editor/standalone/browser/standaloneServices.ts
index f026f61f400..706d3e15da0 100644
--- a/src/vs/editor/standalone/browser/standaloneServices.ts
+++ b/src/vs/editor/standalone/browser/standaloneServices.ts
@@ -517,10 +517,14 @@ export class StandaloneKeybindingService extends AbstractKeybindingService {
 		this._onDidUpdateKeybindings.fire();
 	}
 
+	protected getUserKeybindingItems() {
+		return this._toNormalizedKeybindingItems(this._dynamicKeybindings, false);
+	}
+
 	protected _getResolver(): KeybindingResolver {
 		if (!this._cachedResolver) {
 			const defaults = this._toNormalizedKeybindingItems(KeybindingsRegistry.getDefaultKeybindings(), true);
-			const overrides = this._toNormalizedKeybindingItems(this._dynamicKeybindings, false);
+			const overrides = this.getUserKeybindingItems();
 			this._cachedResolver = new KeybindingResolver(defaults, overrides, (str) => this._log(str));
 		}
 		return this._cachedResolver;
diff --git a/src/vs/platform/assignment/common/assignmentService.ts b/src/vs/platform/assignment/common/assignmentService.ts
index 67e34826627..7c5287d6a32 100644
--- a/src/vs/platform/assignment/common/assignmentService.ts
+++ b/src/vs/platform/assignment/common/assignmentService.ts
@@ -9,7 +9,6 @@ import { IConfigurationService } from 'vs/platform/configuration/common/configur
 import { IProductService } from 'vs/platform/product/common/productService';
 import { getTelemetryLevel } from 'vs/platform/telemetry/common/telemetryUtils';
 import { AssignmentFilterProvider, ASSIGNMENT_REFETCH_INTERVAL, ASSIGNMENT_STORAGE_KEY, IAssignmentService, TargetPopulation } from 'vs/platform/assignment/common/assignment';
-import { importAMDNodeModule } from 'vs/amdX';
 
 export abstract class BaseAssignmentService implements IAssignmentService {
 	_serviceBrand: undefined;
@@ -86,7 +85,7 @@ export abstract class BaseAssignmentService implements IAssignmentService {
 		);
 
 		const tasConfig = this.productService.tasConfig!;
-		const tasClient = new (await importAMDNodeModule<typeof import('tas-client-umd')>('tas-client-umd', 'lib/tas-client-umd.js')).ExperimentationService({
+		const tasClient = new (await import('tas-client-umd')).ExperimentationService({
 			filterProviders: [filterProvider],
 			telemetry: this.telemetry,
 			storageKey: ASSIGNMENT_STORAGE_KEY,
diff --git a/src/vs/platform/environment/node/argv.ts b/src/vs/platform/environment/node/argv.ts
index b3e423e20f9..58045b68058 100644
--- a/src/vs/platform/environment/node/argv.ts
+++ b/src/vs/platform/environment/node/argv.ts
@@ -3,7 +3,7 @@
  *  Licensed under the MIT License. See License.txt in the project root for license information.
  *--------------------------------------------------------------------------------------------*/
 
-import * as minimist from 'minimist';
+import minimist from 'minimist';
 import { isWindows } from 'vs/base/common/platform';
 import { localize } from 'vs/nls';
 import { NativeParsedArgs } from 'vs/platform/environment/common/argv';
diff --git a/src/vs/platform/environment/node/argvHelper.ts b/src/vs/platform/environment/node/argvHelper.ts
index 74a7369225d..26e97cb6681 100644
--- a/src/vs/platform/environment/node/argvHelper.ts
+++ b/src/vs/platform/environment/node/argvHelper.ts
@@ -3,7 +3,7 @@
  *  Licensed under the MIT License. See License.txt in the project root for license information.
  *--------------------------------------------------------------------------------------------*/
 
-import * as assert from 'assert';
+import assert from 'assert';
 import { IProcessEnvironment } from 'vs/base/common/platform';
 import { localize } from 'vs/nls';
 import { NativeParsedArgs } from 'vs/platform/environment/common/argv';
diff --git a/src/vs/platform/files/node/diskFileSystemProvider.ts b/src/vs/platform/files/node/diskFileSystemProvider.ts
index 0142abfb605..a891dd16694 100644
--- a/src/vs/platform/files/node/diskFileSystemProvider.ts
+++ b/src/vs/platform/files/node/diskFileSystemProvider.ts
@@ -4,7 +4,6 @@
  *--------------------------------------------------------------------------------------------*/
 
 import * as fs from 'fs';
-import { gracefulify } from 'graceful-fs';
 import { Barrier, retry } from 'vs/base/common/async';
 import { ResourceMap } from 'vs/base/common/map';
 import { VSBuffer } from 'vs/base/common/buffer';
@@ -24,22 +23,9 @@ import { readFileIntoStream } from 'vs/platform/files/common/io';
 import { AbstractNonRecursiveWatcherClient, AbstractUniversalWatcherClient, IDiskFileChange, ILogMessage } from 'vs/platform/files/common/watcher';
 import { ILogService } from 'vs/platform/log/common/log';
 import { AbstractDiskFileSystemProvider, IDiskFileSystemProviderOptions } from 'vs/platform/files/common/diskFileSystemProvider';
-import { toErrorMessage } from 'vs/base/common/errorMessage';
 import { UniversalWatcherClient } from 'vs/platform/files/node/watcher/watcherClient';
 import { NodeJSWatcherClient } from 'vs/platform/files/node/watcher/nodejs/nodejsClient';
 
-/**
- * Enable graceful-fs very early from here to have it enabled
- * in all contexts that leverage the disk file system provider.
- */
-(() => {
-	try {
-		gracefulify(fs);
-	} catch (error) {
-		console.error(`Error enabling graceful-fs: ${toErrorMessage(error)}`);
-	}
-})();
-
 export class DiskFileSystemProvider extends AbstractDiskFileSystemProvider implements
 	IFileSystemProviderWithFileReadWriteCapability,
 	IFileSystemProviderWithOpenReadWriteCloseCapability,
diff --git a/src/vs/platform/native/electron-main/nativeHostMainService.ts b/src/vs/platform/native/electron-main/nativeHostMainService.ts
index af0e0cfe14c..30b6c87382e 100644
--- a/src/vs/platform/native/electron-main/nativeHostMainService.ts
+++ b/src/vs/platform/native/electron-main/nativeHostMainService.ts
@@ -447,7 +447,7 @@ export class NativeHostMainService extends Disposable implements INativeHostMain
 	async isAdmin(): Promise<boolean> {
 		let isAdmin: boolean;
 		if (isWindows) {
-			isAdmin = (await import('native-is-elevated'))();
+			isAdmin = (await import('native-is-elevated')).default();
 		} else {
 			isAdmin = process.getuid() === 0;
 		}
diff --git a/src/vs/platform/request/node/proxy.ts b/src/vs/platform/request/node/proxy.ts
index ee2aae8814b..7073eb1e548 100644
--- a/src/vs/platform/request/node/proxy.ts
+++ b/src/vs/platform/request/node/proxy.ts
@@ -45,6 +45,6 @@ export async function getProxyAgent(rawRequestURL: string, env: typeof process.e
 	};
 
 	return requestURL.protocol === 'http:'
-		? new (await import('http-proxy-agent'))(opts as any as Url)
-		: new (await import('https-proxy-agent'))(opts);
+		? new (await import('http-proxy-agent')).default(opts as any as Url)
+		: new (await import('https-proxy-agent')).default(opts);
 }
diff --git a/src/vs/platform/telemetry/common/1dsAppender.ts b/src/vs/platform/telemetry/common/1dsAppender.ts
index 02295cc4968..60d72be20b4 100644
--- a/src/vs/platform/telemetry/common/1dsAppender.ts
+++ b/src/vs/platform/telemetry/common/1dsAppender.ts
@@ -5,7 +5,6 @@
 
 import type { IExtendedConfiguration, IExtendedTelemetryItem, ITelemetryItem, ITelemetryUnloadState } from '@microsoft/1ds-core-js';
 import type { IChannelConfiguration, IXHROverride, PostChannel } from '@microsoft/1ds-post-js';
-import { importAMDNodeModule } from 'vs/amdX';
 import { onUnexpectedError } from 'vs/base/common/errors';
 import { mixin } from 'vs/base/common/objects';
 import { ITelemetryAppender, validateTelemetryData } from 'vs/platform/telemetry/common/telemetryUtils';
@@ -22,8 +21,8 @@ const endpointUrl = 'https://mobile.events.data.microsoft.com/OneCollector/1.0';
 const endpointHealthUrl = 'https://mobile.events.data.microsoft.com/ping';
 
 async function getClient(instrumentationKey: string, addInternalFlag?: boolean, xhrOverride?: IXHROverride): Promise<IAppInsightsCore> {
-	const oneDs = await importAMDNodeModule<typeof import('@microsoft/1ds-core-js')>('@microsoft/1ds-core-js', 'dist/ms.core.js');
-	const postPlugin = await importAMDNodeModule<typeof import('@microsoft/1ds-post-js')>('@microsoft/1ds-post-js', 'dist/ms.post.js');
+	const oneDs = await import('@microsoft/1ds-core-js');
+	const postPlugin = await import('@microsoft/1ds-post-js');
 	const appInsightsCore = new oneDs.AppInsightsCore();
 	const collectorChannelPlugin: PostChannel = new postPlugin.PostChannel();
 	// Configure the app insights core to send to collector++ and disable logging of debug info
diff --git a/src/vs/workbench/api/browser/mainThreadExtensionService.ts b/src/vs/workbench/api/browser/mainThreadExtensionService.ts
index cbddc0c233b..931ce877ff6 100644
--- a/src/vs/workbench/api/browser/mainThreadExtensionService.ts
+++ b/src/vs/workbench/api/browser/mainThreadExtensionService.ts
@@ -193,6 +193,13 @@ export class MainThreadExtensionService implements MainThreadExtensionServiceSha
 	async $asBrowserUri(uri: UriComponents): Promise<UriComponents> {
 		return FileAccess.uriToBrowserUri(URI.revive(uri));
 	}
+
+	async $getAllStaticBrowserUris(): Promise<[UriComponents, UriComponents][]> {
+		return Array.from(FileAccess.getRegisteredBrowserUris(), uri => [
+			uri,
+			FileAccess.uriToBrowserUri(uri)
+		]);
+	}
 }
 
 class ExtensionHostProxy implements IExtensionHostProxy {
diff --git a/src/vs/workbench/api/browser/mainThreadMessageService.ts b/src/vs/workbench/api/browser/mainThreadMessageService.ts
index 43ee94f3893..7c265cd7752 100644
--- a/src/vs/workbench/api/browser/mainThreadMessageService.ts
+++ b/src/vs/workbench/api/browser/mainThreadMessageService.ts
@@ -11,7 +11,6 @@ import { extHostNamedCustomer, IExtHostContext } from 'vs/workbench/services/ext
 import { IDialogService, IPromptButton } from 'vs/platform/dialogs/common/dialogs';
 import { INotificationService } from 'vs/platform/notification/common/notification';
 import { Event } from 'vs/base/common/event';
-import { ICommandService } from 'vs/platform/commands/common/commands';
 
 @extHostNamedCustomer(MainContext.MainThreadMessageService)
 export class MainThreadMessageService implements MainThreadMessageServiceShape {
@@ -19,7 +18,6 @@ export class MainThreadMessageService implements MainThreadMessageServiceShape {
 	constructor(
 		extHostContext: IExtHostContext,
 		@INotificationService private readonly _notificationService: INotificationService,
-		@ICommandService private readonly _commandService: ICommandService,
 		@IDialogService private readonly _dialogService: IDialogService
 	) {
 		//
@@ -64,15 +62,6 @@ export class MainThreadMessageService implements MainThreadMessageServiceShape {
 			}
 
 			const secondaryActions: IAction[] = [];
-			if (options.source) {
-				secondaryActions.push(toAction({
-					id: options.source.identifier.value,
-					label: nls.localize('manageExtension', "Manage Extension"),
-					run: () => {
-						return this._commandService.executeCommand('_extensions.manage', options.source!.identifier.value);
-					}
-				}));
-			}
 
 			const messageHandle = this._notificationService.notify({
 				severity,
diff --git a/src/vs/workbench/api/browser/statusBarExtensionPoint.ts b/src/vs/workbench/api/browser/statusBarExtensionPoint.ts
index cd2e439f8f6..fcdc9a28ce2 100644
--- a/src/vs/workbench/api/browser/statusBarExtensionPoint.ts
+++ b/src/vs/workbench/api/browser/statusBarExtensionPoint.ts
@@ -56,7 +56,7 @@ export interface IExtensionStatusBarItemService {
 }
 
 
-class ExtensionStatusBarItemService implements IExtensionStatusBarItemService {
+export class ExtensionStatusBarItemService implements IExtensionStatusBarItemService {
 
 	declare readonly _serviceBrand: undefined;
 
diff --git a/src/vs/workbench/api/common/extHost.protocol.ts b/src/vs/workbench/api/common/extHost.protocol.ts
index ec414fd9269..ebda0de7819 100644
--- a/src/vs/workbench/api/common/extHost.protocol.ts
+++ b/src/vs/workbench/api/common/extHost.protocol.ts
@@ -1305,6 +1305,7 @@ export interface MainThreadExtensionServiceShape extends IDisposable {
 	$onExtensionRuntimeError(extensionId: ExtensionIdentifier, error: SerializedError): void;
 	$setPerformanceMarks(marks: performance.PerformanceMark[]): Promise<void>;
 	$asBrowserUri(uri: UriComponents): Promise<UriComponents>;
+	$getAllStaticBrowserUris(): Promise<[UriComponents, UriComponents][]>;
 }
 
 export interface SCMProviderFeatures {
diff --git a/src/vs/workbench/api/common/extHostExtensionService.ts b/src/vs/workbench/api/common/extHostExtensionService.ts
index 0c35ea254f3..3a913226546 100644
--- a/src/vs/workbench/api/common/extHostExtensionService.ts
+++ b/src/vs/workbench/api/common/extHostExtensionService.ts
@@ -44,7 +44,7 @@ import { Schemas } from 'vs/base/common/network';
 import { IResolveAuthorityResult } from 'vs/workbench/services/extensions/common/extensionHostProxy';
 import { IExtHostLocalizationService } from 'vs/workbench/api/common/extHostLocalizationService';
 import { StopWatch } from 'vs/base/common/stopwatch';
-import { setTimeout0 } from 'vs/base/common/platform';
+import { isWebWorker, setTimeout0 } from 'vs/base/common/platform';
 import { IExtHostManagedSockets } from 'vs/workbench/api/common/extHostManagedSockets';
 import { Dto } from 'vs/workbench/services/extensions/common/proxyIdentifier';
 
@@ -250,9 +250,11 @@ export abstract class AbstractExtHostExtensionService extends Disposable impleme
 		this._extHostTerminalService.dispose();
 		this._activator.dispose();
 
-		errors.setUnexpectedErrorHandler((err) => {
-			this._logService.error(err);
-		});
+		if (isWebWorker) {
+			errors.setUnexpectedErrorHandler((err) => {
+				this._logService.error(err);
+			});
+		}
 
 		// Invalidate all proxies
 		this._extHostContext.dispose();
diff --git a/src/vs/workbench/api/common/extensionHostMain.ts b/src/vs/workbench/api/common/extensionHostMain.ts
index a06c4e93d8f..18c66beee89 100644
--- a/src/vs/workbench/api/common/extensionHostMain.ts
+++ b/src/vs/workbench/api/common/extensionHostMain.ts
@@ -12,7 +12,7 @@ import { MainContext, MainThreadConsoleShape } from 'vs/workbench/api/common/ext
 import { IExtensionHostInitData } from 'vs/workbench/services/extensions/common/extensionHostProtocol';
 import { RPCProtocol } from 'vs/workbench/services/extensions/common/rpcProtocol';
 import { ExtensionIdentifier, IExtensionDescription, IRelaxedExtensionDescription } from 'vs/platform/extensions/common/extensions';
-import { ILogService } from 'vs/platform/log/common/log';
+import { ILogService, ILoggerService } from 'vs/platform/log/common/log';
 import { getSingletonServiceDescriptors } from 'vs/platform/instantiation/common/extensions';
 import { ServiceCollection } from 'vs/platform/instantiation/common/serviceCollection';
 import { IExtHostInitDataService } from 'vs/workbench/api/common/extHostInitDataService';
@@ -23,6 +23,10 @@ import { IURITransformerService, URITransformerService } from 'vs/workbench/api/
 import { IExtHostExtensionService, IHostUtils } from 'vs/workbench/api/common/extHostExtensionService';
 import { IExtHostTelemetry } from 'vs/workbench/api/common/extHostTelemetry';
 import { Mutable } from 'vs/base/common/types';
+import { isWebWorker } from 'vs/base/common/platform';
+import { ExtHostLogService } from 'vs/workbench/api/common/extHostLogService';
+import { SyncDescriptor } from 'vs/platform/instantiation/common/descriptors';
+import { ExtHostLoggerService } from 'vs/workbench/api/common/extHostLoggerService';
 
 export interface IExitFn {
 	(code?: number): any;
@@ -158,10 +162,14 @@ export class ExtensionHostMain {
 		services.set(IExtHostRpcService, new ExtHostRpcService(this._rpcProtocol));
 		services.set(IURITransformerService, new URITransformerService(uriTransformer));
 		services.set(IHostUtils, hostUtils);
+		services.set(ILogService, new SyncDescriptor(ExtHostLogService, [true], true));
+		services.set(ILoggerService, new SyncDescriptor(ExtHostLoggerService, [], true));
 
 		const instaService: IInstantiationService = new InstantiationService(services, true);
 
-		instaService.invokeFunction(ErrorHandler.installEarlyHandler);
+		if (isWebWorker) {
+			instaService.invokeFunction(ErrorHandler.installEarlyHandler);
+		}
 
 		// ugly self - inject
 		this._logService = instaService.invokeFunction(accessor => accessor.get(ILogService));
@@ -180,8 +188,10 @@ export class ExtensionHostMain {
 		this._extensionService = instaService.invokeFunction(accessor => accessor.get(IExtHostExtensionService));
 		this._extensionService.initialize();
 
-		// install error handler that is extension-aware
-		instaService.invokeFunction(ErrorHandler.installFullHandler);
+		if (isWebWorker) {
+			// install error handler that is extension-aware
+			instaService.invokeFunction(ErrorHandler.installFullHandler);
+		}
 	}
 
 	async asBrowserUri(uri: URI): Promise<URI> {
@@ -189,10 +199,19 @@ export class ExtensionHostMain {
 		return URI.revive(await mainThreadExtensionsProxy.$asBrowserUri(uri));
 	}
 
+	async getAllStaticBrowserUris(): Promise<[URI, URI][]> {
+		const mainThreadExtensionsProxy = this._rpcProtocol.getProxy(MainContext.MainThreadExtensionService);
+		return (await mainThreadExtensionsProxy.$getAllStaticBrowserUris()).map(([from, to]) => [URI.revive(from), URI.revive(to)]);
+	}
+
 	terminate(reason: string): void {
 		this._extensionService.terminate(reason);
 	}
 
+	getExtHostExtensionService(): IExtHostExtensionService {
+		return this._extensionService;
+	}
+
 	private static _transform(initData: IExtensionHostInitData, rpcProtocol: RPCProtocol): IExtensionHostInitData {
 		initData.allExtensions.forEach((ext) => {
 			(<Mutable<IRelaxedExtensionDescription>>ext).extensionLocation = URI.revive(rpcProtocol.transformIncomingURIs(ext.extensionLocation));
diff --git a/src/vs/workbench/api/node/extHostExtensionService.ts b/src/vs/workbench/api/node/extHostExtensionService.ts
index 5ac0ddc7ec9..6ea024b237b 100644
--- a/src/vs/workbench/api/node/extHostExtensionService.ts
+++ b/src/vs/workbench/api/node/extHostExtensionService.ts
@@ -19,6 +19,11 @@ import { realpathSync } from 'vs/base/node/extpath';
 import { ExtHostConsoleForwarder } from 'vs/workbench/api/node/extHostConsoleForwarder';
 import { ExtHostDiskFileSystemProvider } from 'vs/workbench/api/node/extHostDiskFileSystemProvider';
 
+// ESM-uncomment-begin
+// import { createRequire } from 'node:module';
+// globalThis.require = createRequire(import.meta.url);
+// ESM-uncomment-end
+
 class NodeModuleRequireInterceptor extends RequireInterceptor {
 
 	protected _installInterceptor(): void {
@@ -109,7 +114,7 @@ export class ExtHostExtensionService extends AbstractExtHostExtensionService {
 			if (extensionId) {
 				performance.mark(`code/extHost/willLoadExtensionCode/${extensionId}`);
 			}
-			r = require.__$__nodeRequire<T>(module.fsPath);
+			r = await <T>require(module.fsPath);
 		} finally {
 			if (extensionId) {
 				performance.mark(`code/extHost/didLoadExtensionCode/${extensionId}`);
diff --git a/src/vs/workbench/api/node/extensionHostProcess.ts b/src/vs/workbench/api/node/extensionHostProcess.ts
index bb3cbfbca7b..b650ff592b1 100644
--- a/src/vs/workbench/api/node/extensionHostProcess.ts
+++ b/src/vs/workbench/api/node/extensionHostProcess.ts
@@ -5,7 +5,7 @@
 
 import * as nativeWatchdog from 'native-watchdog';
 import * as net from 'net';
-import * as minimist from 'minimist';
+import minimist from 'minimist';
 import * as performance from 'vs/base/common/performance';
 import type { MessagePortMain } from 'vs/base/parts/sandbox/node/electronTypes';
 import { isCancellationError, isSigPipeError, onUnexpectedError } from 'vs/base/common/errors';
@@ -56,24 +56,6 @@ const args = minimist(process.argv.slice(2), {
 	]
 }) as ParsedExtHostArgs;
 
-// With Electron 2.x and node.js 8.x the "natives" module
-// can cause a native crash (see https://github.com/nodejs/node/issues/19891 and
-// https://github.com/electron/electron/issues/10905). To prevent this from
-// happening we essentially blocklist this module from getting loaded in any
-// extension by patching the node require() function.
-(function () {
-	const Module = globalThis._VSCODE_NODE_MODULES.module as any;
-	const originalLoad = Module._load;
-
-	Module._load = function (request: string) {
-		if (request === 'natives') {
-			throw new Error('Either the extension or an NPM dependency is using the [unsupported "natives" node module](https://go.microsoft.com/fwlink/?linkid=871887).');
-		}
-
-		return originalLoad.apply(this, arguments);
-	};
-})();
-
 // custom process.exit logic...
 const nativeExit: IExitFn = process.exit.bind(process);
 function patchProcess(allowExit: boolean) {
diff --git a/src/vs/workbench/api/node/proxyResolver.ts b/src/vs/workbench/api/node/proxyResolver.ts
index 6c0cd980ced..04084152187 100644
--- a/src/vs/workbench/api/node/proxyResolver.ts
+++ b/src/vs/workbench/api/node/proxyResolver.ts
@@ -67,10 +67,10 @@ export function connectProxyResolver(
 
 function createPatchedModules(params: ProxyAgentParams, resolveProxy: ReturnType<typeof createProxyResolver>) {
 	return {
-		http: Object.assign(http, createHttpPatch(params, http, resolveProxy)),
-		https: Object.assign(https, createHttpPatch(params, https, resolveProxy)),
-		net: Object.assign(net, createNetPatch(params, net)),
-		tls: Object.assign(tls, createTlsPatch(params, tls))
+		http: Object.assign({ ...http }, createHttpPatch(params, http, resolveProxy)),
+		https: Object.assign({ ...https }, createHttpPatch(params, https, resolveProxy)),
+		net: Object.assign({ ...net }, createNetPatch(params, net)),
+		tls: Object.assign({ ...tls }, createTlsPatch(params, tls))
 	};
 }
 
diff --git a/src/vs/workbench/api/worker/extHost.worker.services.ts b/src/vs/workbench/api/worker/extHost.worker.services.ts
index 20ec7e138a6..e284ed6752b 100644
--- a/src/vs/workbench/api/worker/extHost.worker.services.ts
+++ b/src/vs/workbench/api/worker/extHost.worker.services.ts
@@ -3,11 +3,8 @@
  *  Licensed under the MIT License. See License.txt in the project root for license information.
  *--------------------------------------------------------------------------------------------*/
 
-import { SyncDescriptor } from 'vs/platform/instantiation/common/descriptors';
 import { InstantiationType, registerSingleton } from 'vs/platform/instantiation/common/extensions';
-import { ILogService } from 'vs/platform/log/common/log';
 import { IExtHostExtensionService } from 'vs/workbench/api/common/extHostExtensionService';
-import { ExtHostLogService } from 'vs/workbench/api/common/extHostLogService';
 import { ExtensionStoragePaths, IExtensionStoragePaths } from 'vs/workbench/api/common/extHostStoragePaths';
 import { ExtHostExtensionService } from 'vs/workbench/api/worker/extHostExtensionService';
 
@@ -17,6 +14,5 @@ import { ExtHostExtensionService } from 'vs/workbench/api/worker/extHostExtensio
 // ###                                                                   ###
 // #########################################################################
 
-registerSingleton(ILogService, new SyncDescriptor(ExtHostLogService, [true], true));
 registerSingleton(IExtHostExtensionService, ExtHostExtensionService, InstantiationType.Eager);
 registerSingleton(IExtensionStoragePaths, ExtensionStoragePaths, InstantiationType.Eager);
diff --git a/src/vs/workbench/api/worker/extHostExtensionService.ts b/src/vs/workbench/api/worker/extHostExtensionService.ts
index b83a462131d..5555f431ba0 100644
--- a/src/vs/workbench/api/worker/extHostExtensionService.ts
+++ b/src/vs/workbench/api/worker/extHostExtensionService.ts
@@ -3,7 +3,7 @@
  *  Licensed under the MIT License. See License.txt in the project root for license information.
  *--------------------------------------------------------------------------------------------*/
 
-import { createApiFactoryAndRegisterActors } from 'vs/workbench/api/common/extHost.api.impl';
+import { IExtensionApiFactory, createApiFactoryAndRegisterActors } from 'vs/workbench/api/common/extHost.api.impl';
 import { ExtensionActivationTimesBuilder } from 'vs/workbench/api/common/extHostExtensionActivator';
 import { AbstractExtHostExtensionService } from 'vs/workbench/api/common/extHostExtensionService';
 import { URI } from 'vs/base/common/uri';
@@ -12,6 +12,7 @@ import { IExtensionDescription } from 'vs/platform/extensions/common/extensions'
 import { ExtensionRuntime } from 'vs/workbench/api/common/extHostTypes';
 import { timeout } from 'vs/base/common/async';
 import { ExtHostConsoleForwarder } from 'vs/workbench/api/worker/extHostConsoleForwarder';
+import { isWebWorker } from 'vs/base/common/platform';
 
 class WorkerRequireInterceptor extends RequireInterceptor {
 
@@ -37,14 +38,17 @@ export class ExtHostExtensionService extends AbstractExtHostExtensionService {
 	readonly extensionRuntime = ExtensionRuntime.Webworker;
 
 	private _fakeModules?: WorkerRequireInterceptor;
+	protected _apiFactory?: IExtensionApiFactory;
 
 	protected async _beforeAlmostReadyToRunExtensions(): Promise<void> {
-		// make sure console.log calls make it to the render
-		this._instaService.createInstance(ExtHostConsoleForwarder);
+		if (isWebWorker) {
+			// make sure console.log calls make it to the render
+			this._instaService.createInstance(ExtHostConsoleForwarder);
+		}
 
 		// initialize API and register actors
-		const apiFactory = this._instaService.invokeFunction(createApiFactoryAndRegisterActors);
-		this._fakeModules = this._instaService.createInstance(WorkerRequireInterceptor, apiFactory, { mine: this._myRegistry, all: this._globalRegistry });
+		this._apiFactory = this._instaService.invokeFunction(createApiFactoryAndRegisterActors);
+		this._fakeModules = this._instaService.createInstance(WorkerRequireInterceptor, this._apiFactory, { mine: this._myRegistry, all: this._globalRegistry });
 		await this._fakeModules.install();
 		performance.mark('code/extHost/didInitAPI');
 
diff --git a/src/vs/workbench/api/worker/extensionHostWorker.ts b/src/vs/workbench/api/worker/extensionHostWorker.ts
index 6e6f8845da5..48462781c2a 100644
--- a/src/vs/workbench/api/worker/extensionHostWorker.ts
+++ b/src/vs/workbench/api/worker/extensionHostWorker.ts
@@ -15,7 +15,6 @@ import * as performance from 'vs/base/common/performance';
 
 import 'vs/workbench/api/common/extHost.common.services';
 import 'vs/workbench/api/worker/extHost.worker.services';
-import { FileAccess } from 'vs/base/common/network';
 import { URI } from 'vs/base/common/uri';
 
 //#region --- Define, capture, and override some globals
@@ -35,6 +34,7 @@ declare namespace self {
 	let importScripts: any;
 	let fetch: _Fetch;
 	let XMLHttpRequest: any;
+	let importExt: any;
 }
 
 const nativeClose = self.close.bind(self);
@@ -47,7 +47,7 @@ function shouldTransformUri(uri: string): boolean {
 	// In principle, we could convert any URI, but we have concerns
 	// that parsing https URIs might end up decoding escape characters
 	// and result in an unintended transformation
-	return /^(file|vscode-remote):/i.test(uri);
+	return /^(file|extension|vscode-remote):/i.test(uri);
 }
 
 const nativeFetch = fetch.bind(self);
@@ -89,66 +89,171 @@ self.addEventListener = () => console.trace(`'addEventListener' has been blocked
 (<any>self)['webkitResolveLocalFileSystemSyncURL'] = undefined;
 (<any>self)['webkitResolveLocalFileSystemURL'] = undefined;
 
-if ((<any>self).Worker) {
-
-	// make sure new Worker(...) always uses blob: (to maintain current origin)
-	const _Worker = (<any>self).Worker;
-	Worker = <any>function (stringUrl: string | URL, options?: WorkerOptions) {
-		if (/^file:/i.test(stringUrl.toString())) {
-			stringUrl = FileAccess.uriToBrowserUri(URI.parse(stringUrl.toString())).toString(true);
-		} else if (/^vscode-remote:/i.test(stringUrl.toString())) {
-			// Supporting transformation of vscode-remote URIs requires an async call to the main thread,
-			// but we cannot do this call from within the embedded Worker, and the only way out would be
-			// to use templating instead of a function in the web api (`resourceUriProvider`)
-			throw new Error(`Creating workers from remote extensions is currently not supported.`);
-		}
+function patchWorker(asBrowserUri: (uri: URI) => Promise<URI>, getAllStaticBrowserUris: () => Promise<[URI, URI][]>) {
+	if ((<any>self).Worker) {
+
+		// make sure new Worker(...) always uses blob: (to maintain current origin)
+		const _Worker = (<any>self).Worker;
+		Worker = <any>function (stringUrl: string | URL, options?: WorkerOptions) {
+			if (/^vscode-remote:/i.test(stringUrl.toString())) {
+				// Supporting transformation of vscode-remote URIs requires an async call to the main thread,
+				// but we cannot do this call from within the embedded Worker, and the only way out would be
+				// to use templating instead of a function in the web api (`resourceUriProvider`)
+				throw new Error(`Creating workers from remote extensions is currently not supported.`);
+			}
 
-		// IMPORTANT: bootstrapFn is stringified and injected as worker blob-url. Because of that it CANNOT
-		// have dependencies on other functions or variables. Only constant values are supported. Due to
-		// that logic of FileAccess.asBrowserUri had to be copied, see `asWorkerBrowserUrl` (below).
-		const bootstrapFnSource = (function bootstrapFn(workerUrl: string) {
-			function asWorkerBrowserUrl(url: string | URL | TrustedScriptURL): any {
-				if (typeof url === 'string' || url instanceof URL) {
-					return String(url).replace(/^file:\/\//i, 'vscode-file://vscode-app');
-				}
-				return url;
+			async function getWorkerUri(workerUri: URI): Promise<string> {
+				const [browserUrl, staticBrowserUrls] = await Promise.all([
+					asBrowserUri(workerUri).then(uri => uri.toString(true)),
+					getAllStaticBrowserUris().then(bindings => Object.fromEntries(bindings.map(([from, to]) => [from.toString(true), to.toString(true)])))
+				]);
+
+				// IMPORTANT: bootstrapFn is stringified and injected as worker blob-url. Because of that it CANNOT
+				// have dependencies on other functions or variables. Only constant values are supported. Due to
+				// that logic of FileAccess.asBrowserUri had to be copied, see `asWorkerBrowserUrl` (below).
+				const bootstrapFnSource = (function bootstrapFn(workerUrl: string, staticBrowserUrls: Record<string, string>) {
+					function asWorkerBrowserUrl(url: string | URL | TrustedScriptURL): any {
+						if (typeof url === 'string' || url instanceof URL) {
+							url = String(url).replace(/^file:\/\//i, 'vscode-file://vscode-app');
+							return staticBrowserUrls[url] ?? url;
+						}
+						return url;
+					}
+
+					const nativeFetch = fetch.bind(self);
+					self.fetch = function (input, init) {
+						if (input instanceof Request) {
+							// Request object - massage not supported
+							return nativeFetch(input, init);
+						}
+						return nativeFetch(asWorkerBrowserUrl(input), init);
+					};
+					self.XMLHttpRequest = class extends XMLHttpRequest {
+						private notFound = false;
+						override open(method: string, url: string | URL, async?: boolean, username?: string | null, password?: string | null): void {
+							const transformedUrl = asWorkerBrowserUrl(url);
+							this.notFound = transformedUrl.startsWith('extension:');
+							return super.open(method, transformedUrl, async ?? true, username, password);
+						}
+						override send(body?: Document | XMLHttpRequestBodyInit | null | undefined): void {
+							if (this.notFound) {
+								return;
+							}
+							super.send(body);
+						}
+						override get status() {
+							return this.notFound ? 404 : super.status;
+						}
+					};
+					const nativeImportScripts = importScripts.bind(self);
+					self.importScripts = (...urls: string[]) => {
+						nativeImportScripts(...urls.map(asWorkerBrowserUrl));
+					};
+
+					self.importExt = (url: string) => {
+						// prevent bundler from trying to transform dynamic import
+						return new Function('url', 'return import(url)')(asWorkerBrowserUrl(url));
+					};
+
+					nativeImportScripts(workerUrl);
+				}).toString();
+
+				const js = `(${bootstrapFnSource}('${browserUrl}', ${JSON.stringify(staticBrowserUrls)}))`;
+
+				const blob = new Blob([js], { type: 'application/javascript' });
+				return URL.createObjectURL(blob);
 			}
 
-			const nativeFetch = fetch.bind(self);
-			self.fetch = function (input, init) {
-				if (input instanceof Request) {
-					// Request object - massage not supported
-					return nativeFetch(input, init);
+			options = options || {};
+			options.name = options.name || path.basename(stringUrl.toString());
+			class ExtensionWorker implements Worker {
+				private workerPromise: Promise<Worker>;
+				constructor(scriptURL: string | URL, options?: WorkerOptions) {
+					this.workerPromise = getWorkerUri(URI.parse(scriptURL instanceof URL ? scriptURL.toString() : scriptURL)).then(url => {
+						return new _Worker(url, options);
+					});
 				}
-				return nativeFetch(asWorkerBrowserUrl(input), init);
-			};
-			self.XMLHttpRequest = class extends XMLHttpRequest {
-				override open(method: string, url: string | URL, async?: boolean, username?: string | null, password?: string | null): void {
-					return super.open(method, asWorkerBrowserUrl(url), async ?? true, username, password);
+
+				private _onmessage: Worker['onmessage'] = null;
+				set onmessage(cb: Worker['onmessage']) {
+					this._onmessage = cb;
+					this.workerPromise.then(worker => {
+						worker.onmessage = cb;
+					}, console.error);
 				}
-			};
-			const nativeImportScripts = importScripts.bind(self);
-			self.importScripts = (...urls: string[]) => {
-				nativeImportScripts(...urls.map(asWorkerBrowserUrl));
-			};
-
-			nativeImportScripts(workerUrl);
-		}).toString();
-
-		const js = `(${bootstrapFnSource}('${stringUrl}'))`;
-		options = options || {};
-		options.name = options.name || path.basename(stringUrl.toString());
-		const blob = new Blob([js], { type: 'application/javascript' });
-		const blobUrl = URL.createObjectURL(blob);
-		return new _Worker(blobUrl, options);
-	};
 
-} else {
-	(<any>self).Worker = class extends NestedWorker {
-		constructor(stringOrUrl: string | URL, options?: WorkerOptions) {
-			super(nativePostMessage, stringOrUrl, { name: path.basename(stringOrUrl.toString()), ...options });
-		}
-	};
+				get onmessage(): Worker['onmessage'] {
+					return this._onmessage;
+				}
+
+				private _onmessageerror: Worker['onmessageerror'] = null;
+				set onmessageerror(cb: Worker['onmessageerror']) {
+					this._onmessageerror = cb;
+					this.workerPromise.then(worker => {
+						worker.onmessageerror = cb;
+					}, console.error);
+				}
+
+				get onmessageerror(): Worker['onmessageerror'] {
+					return this._onmessageerror;
+				}
+
+				private _onerror: Worker['onerror'] = null;
+				set onerror(cb: Worker['onerror']) {
+					this._onerror = cb;
+					this.workerPromise.then(worker => {
+						worker.onerror = cb;
+					}, console.error);
+				}
+
+				get onerror(): Worker['onerror'] {
+					return this._onerror;
+				}
+
+				// eslint-disable-next-line @typescript-eslint/no-explicit-any
+				postMessage(message: unknown, options?: any): void {
+					this.workerPromise.then(worker => {
+						worker.postMessage(message, options);
+					}, console.error);
+				}
+
+				terminate(): void {
+					this.workerPromise.then(worker => {
+						worker.terminate();
+					}, console.error);
+				}
+
+				// eslint-disable-next-line @typescript-eslint/no-explicit-any
+				addEventListener(type: any, listener: any, options?: any): void {
+					this.workerPromise.then(worker => {
+						worker.addEventListener(type, listener, options);
+					}, console.error);
+				}
+
+				// eslint-disable-next-line @typescript-eslint/no-explicit-any
+				removeEventListener(type: any, listener: any, options?: any): void {
+					this.workerPromise.then(worker => {
+						worker.removeEventListener(type, listener, options);
+					}, console.error);
+				}
+
+				dispatchEvent(event: Event): boolean {
+					this.workerPromise.then(worker => {
+						worker.dispatchEvent(event);
+					}, console.error);
+					return false;
+				}
+			}
+			return new ExtensionWorker(stringUrl, options);
+		};
+
+	} else {
+		(<any>self).Worker = class extends NestedWorker {
+			constructor(stringOrUrl: string | URL, options?: WorkerOptions) {
+				super(nativePostMessage, stringOrUrl, { name: path.basename(stringOrUrl.toString()), ...options });
+			}
+		};
+	}
 }
 
 //#endregion ---
@@ -255,6 +360,7 @@ export function create(): { onmessage: (message: any) => void } {
 				);
 
 				patchFetching(uri => extHostMain.asBrowserUri(uri));
+				patchWorker(uri => extHostMain.asBrowserUri(uri), () => extHostMain.getAllStaticBrowserUris());
 
 				onTerminate = (reason: string) => extHostMain.terminate(reason);
 			});
diff --git a/src/vs/workbench/browser/parts/compositeBar.ts b/src/vs/workbench/browser/parts/compositeBar.ts
index afa384aa88c..bc631450591 100644
--- a/src/vs/workbench/browser/parts/compositeBar.ts
+++ b/src/vs/workbench/browser/parts/compositeBar.ts
@@ -504,7 +504,7 @@ export class CompositeBar extends Widget implements ICompositeBar {
 				// Compute sizes only if visible. Otherwise the size measurment would be computed wrongly.
 				const currentItemsLength = compositeSwitcherBar.viewItems.length;
 				compositeSwitcherBar.push(items.map(composite => composite.activityAction));
-				items.map((composite, index) => this.compositeSizeInBar.set(composite.id, this.options.orientation === ActionsOrientation.VERTICAL
+				items.forEach((composite, index) => this.compositeSizeInBar.set(composite.id, this.options.orientation === ActionsOrientation.VERTICAL
 					? compositeSwitcherBar.getHeight(currentItemsLength + index)
 					: compositeSwitcherBar.getWidth(currentItemsLength + index)
 				));
diff --git a/src/vs/workbench/browser/parts/views/viewPaneContainer.ts b/src/vs/workbench/browser/parts/views/viewPaneContainer.ts
index 1f593cd65c3..3de01b22110 100644
--- a/src/vs/workbench/browser/parts/views/viewPaneContainer.ts
+++ b/src/vs/workbench/browser/parts/views/viewPaneContainer.ts
@@ -671,7 +671,7 @@ export class ViewPaneContainer extends Component implements IViewPaneContainer {
 		}
 
 		this.panes.filter(view => view.isVisible() !== visible)
-			.map((view) => view.setVisible(visible));
+			.forEach((view) => view.setVisible(visible));
 	}
 
 	isVisible(): boolean {
diff --git a/src/vs/workbench/contrib/terminal/browser/terminalInstance.ts b/src/vs/workbench/contrib/terminal/browser/terminalInstance.ts
index f814059bd6d..1e2e43ff3eb 100644
--- a/src/vs/workbench/contrib/terminal/browser/terminalInstance.ts
+++ b/src/vs/workbench/contrib/terminal/browser/terminalInstance.ts
@@ -84,9 +84,8 @@ import { IHistoryService } from 'vs/workbench/services/history/common/history';
 import { IWorkbenchLayoutService, Position } from 'vs/workbench/services/layout/browser/layoutService';
 import { IPathService } from 'vs/workbench/services/path/common/pathService';
 import { IPreferencesService } from 'vs/workbench/services/preferences/common/preferences';
-import { importAMDNodeModule } from 'vs/amdX';
 import { ISimpleSelectedSuggestion } from 'vs/workbench/services/suggest/browser/simpleSuggestWidget';
-import type { IMarker, Terminal as XTermTerminal } from 'xterm';
+import { IMarker, Terminal as XTermTerminal, Terminal } from 'xterm';
 
 const enum Constants {
 	/**
@@ -686,7 +685,6 @@ export class TerminalInstance extends Disposable implements ITerminalInstance {
 			return xtermConstructor;
 		}
 		xtermConstructor = Promises.withAsyncBody<typeof XTermTerminal>(async (resolve) => {
-			const Terminal = (await importAMDNodeModule<typeof import('xterm')>('xterm', 'lib/xterm.js')).Terminal;
 			// Localize strings
 			Terminal.strings.promptLabel = nls.localize('terminal.integrated.a11yPromptLabel', 'Terminal input');
 			Terminal.strings.tooMuchOutput = keybinding ? nls.localize('terminal.integrated.useAccessibleBuffer', 'Use the accessible buffer {0} to manually review output', keybinding.getLabel()) : nls.localize('terminal.integrated.useAccessibleBufferNoKb', 'Use the Terminal: Focus Accessible Buffer command to manually review output');
diff --git a/src/vs/workbench/contrib/terminal/browser/terminalService.ts b/src/vs/workbench/contrib/terminal/browser/terminalService.ts
index 27ff2a40b23..4397c477887 100644
--- a/src/vs/workbench/contrib/terminal/browser/terminalService.ts
+++ b/src/vs/workbench/contrib/terminal/browser/terminalService.ts
@@ -19,7 +19,7 @@ import { IContextKey, IContextKeyService } from 'vs/platform/contextkey/common/c
 import { IDialogService } from 'vs/platform/dialogs/common/dialogs';
 import { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';
 import { INotificationService } from 'vs/platform/notification/common/notification';
-import { ICreateContributedTerminalProfileOptions, IPtyHostAttachTarget, IRawTerminalInstanceLayoutInfo, IRawTerminalTabLayoutInfo, IShellLaunchConfig, ITerminalBackend, ITerminalLaunchError, ITerminalLogService, ITerminalsLayoutInfo, ITerminalsLayoutInfoById, TerminalExitReason, TerminalLocation, TerminalLocationString, TitleEventSource } from 'vs/platform/terminal/common/terminal';
+import { ICreateContributedTerminalProfileOptions, IPtyHostAttachTarget, IRawTerminalInstanceLayoutInfo, IRawTerminalTabLayoutInfo, IShellLaunchConfig, ITerminalBackend, ITerminalBackendRegistry, ITerminalLaunchError, ITerminalLogService, ITerminalsLayoutInfo, ITerminalsLayoutInfoById, TerminalExitReason, TerminalExtensions, TerminalLocation, TerminalLocationString, TitleEventSource } from 'vs/platform/terminal/common/terminal';
 import { formatMessageForTerminal } from 'vs/platform/terminal/common/terminalStrings';
 import { iconForeground } from 'vs/platform/theme/common/colorRegistry';
 import { getIconRegistry } from 'vs/platform/theme/common/iconRegistry';
@@ -52,6 +52,7 @@ import { IKeybindingService } from 'vs/platform/keybinding/common/keybinding';
 import { TerminalCapabilityStore } from 'vs/platform/terminal/common/capabilities/terminalCapabilityStore';
 import { ITimerService } from 'vs/workbench/services/timer/browser/timerService';
 import { mark } from 'vs/base/common/performance';
+import { Registry } from 'vs/platform/registry/common/platform';
 
 export class TerminalService implements ITerminalService {
 	declare _serviceBrand: undefined;
@@ -215,7 +216,7 @@ export class TerminalService implements ITerminalService {
 		this._handleInstanceContextKeys();
 		this._terminalShellTypeContextKey = TerminalContextKeys.shellType.bindTo(this._contextKeyService);
 		this._processSupportContextKey = TerminalContextKeys.processSupported.bindTo(this._contextKeyService);
-		this._processSupportContextKey.set(!isWeb || this._remoteAgentService.getConnection() !== null);
+		this._processSupportContextKey.set(!isWeb || this._remoteAgentService.getConnection() !== null || Registry.as<ITerminalBackendRegistry>(TerminalExtensions.Backend).getTerminalBackend() !== undefined);
 		this._terminalHasBeenCreated = TerminalContextKeys.terminalHasBeenCreated.bindTo(this._contextKeyService);
 		this._terminalCountContextKey = TerminalContextKeys.count.bindTo(this._contextKeyService);
 		this._terminalEditorActive = TerminalContextKeys.terminalEditorActive.bindTo(this._contextKeyService);
diff --git a/src/vs/workbench/contrib/terminal/browser/xterm/xtermTerminal.ts b/src/vs/workbench/contrib/terminal/browser/xterm/xtermTerminal.ts
index 0eb141ad11a..6df7e017272 100644
--- a/src/vs/workbench/contrib/terminal/browser/xterm/xtermTerminal.ts
+++ b/src/vs/workbench/contrib/terminal/browser/xterm/xtermTerminal.ts
@@ -35,7 +35,6 @@ import { DecorationAddon } from 'vs/workbench/contrib/terminal/browser/xterm/dec
 import { ITerminalCapabilityStore, ITerminalCommand, TerminalCapability } from 'vs/platform/terminal/common/capabilities/capabilities';
 import { Emitter } from 'vs/base/common/event';
 import { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';
-import { importAMDNodeModule } from 'vs/amdX';
 import { SuggestAddon } from 'vs/workbench/contrib/terminal/browser/xterm/suggestAddon';
 import { IContextKey, IContextKeyService } from 'vs/platform/contextkey/common/contextkey';
 import { TerminalContextKeys } from 'vs/workbench/contrib/terminal/common/terminalContextKey';
@@ -684,7 +683,7 @@ export class XtermTerminal extends DisposableStore implements IXtermTerminal, ID
 
 	protected async _getCanvasAddonConstructor(): Promise<typeof CanvasAddonType> {
 		if (!CanvasAddon) {
-			CanvasAddon = (await importAMDNodeModule<typeof import('xterm-addon-canvas')>('xterm-addon-canvas', 'lib/xterm-addon-canvas.js')).CanvasAddon;
+			CanvasAddon = (await import('xterm-addon-canvas')).CanvasAddon;
 		}
 		return CanvasAddon;
 	}
@@ -710,35 +709,35 @@ export class XtermTerminal extends DisposableStore implements IXtermTerminal, ID
 
 	protected async _getImageAddonConstructor(): Promise<typeof ImageAddonType> {
 		if (!ImageAddon) {
-			ImageAddon = (await importAMDNodeModule<typeof import('xterm-addon-image')>('xterm-addon-image', 'lib/xterm-addon-image.js')).ImageAddon;
+			ImageAddon = (await import('xterm-addon-image')).ImageAddon;
 		}
 		return ImageAddon;
 	}
 
 	protected async _getSearchAddonConstructor(): Promise<typeof SearchAddonType> {
 		if (!SearchAddon) {
-			SearchAddon = (await importAMDNodeModule<typeof import('xterm-addon-search')>('xterm-addon-search', 'lib/xterm-addon-search.js')).SearchAddon;
+			SearchAddon = (await import('xterm-addon-search')).SearchAddon;
 		}
 		return SearchAddon;
 	}
 
 	protected async _getUnicode11Constructor(): Promise<typeof Unicode11AddonType> {
 		if (!Unicode11Addon) {
-			Unicode11Addon = (await importAMDNodeModule<typeof import('xterm-addon-unicode11')>('xterm-addon-unicode11', 'lib/xterm-addon-unicode11.js')).Unicode11Addon;
+			Unicode11Addon = (await import('xterm-addon-unicode11')).Unicode11Addon;
 		}
 		return Unicode11Addon;
 	}
 
 	protected async _getWebglAddonConstructor(): Promise<typeof WebglAddonType> {
 		if (!WebglAddon) {
-			WebglAddon = (await importAMDNodeModule<typeof import('xterm-addon-webgl')>('xterm-addon-webgl', 'lib/xterm-addon-webgl.js')).WebglAddon;
+			WebglAddon = (await import('xterm-addon-webgl')).WebglAddon;
 		}
 		return WebglAddon;
 	}
 
 	protected async _getSerializeAddonConstructor(): Promise<typeof SerializeAddonType> {
 		if (!SerializeAddon) {
-			SerializeAddon = (await importAMDNodeModule<typeof import('xterm-addon-serialize')>('xterm-addon-serialize', 'lib/xterm-addon-serialize.js')).SerializeAddon;
+			SerializeAddon = (await import('xterm-addon-serialize')).SerializeAddon;
 		}
 		return SerializeAddon;
 	}
diff --git a/src/vs/workbench/contrib/webview/browser/pre/service-worker.js b/src/vs/workbench/contrib/webview/browser/pre/service-worker.js
index a6e9943b866..c470a1c9ed5 100644
--- a/src/vs/workbench/contrib/webview/browser/pre/service-worker.js
+++ b/src/vs/workbench/contrib/webview/browser/pre/service-worker.js
@@ -452,7 +452,6 @@ async function getOuterIframeClient(webviewId) {
 	const allClients = await sw.clients.matchAll({ includeUncontrolled: true });
 	return allClients.filter(client => {
 		const clientUrl = new URL(client.url);
-		const hasExpectedPathName = (clientUrl.pathname === `${rootPath}/` || clientUrl.pathname === `${rootPath}/index.html` || clientUrl.pathname === `${rootPath}/index-no-csp.html`);
-		return hasExpectedPathName && clientUrl.searchParams.get('id') === webviewId;
+		return clientUrl.searchParams.get('id') === webviewId;
 	});
 }
diff --git a/src/vs/workbench/contrib/webview/browser/webviewElement.ts b/src/vs/workbench/contrib/webview/browser/webviewElement.ts
index 535da4b66c8..91a9bca8a36 100644
--- a/src/vs/workbench/contrib/webview/browser/webviewElement.ts
+++ b/src/vs/workbench/contrib/webview/browser/webviewElement.ts
@@ -11,7 +11,7 @@ import { streamToBuffer, VSBufferReadableStream } from 'vs/base/common/buffer';
 import { CancellationTokenSource } from 'vs/base/common/cancellation';
 import { Emitter, Event } from 'vs/base/common/event';
 import { Disposable, IDisposable, toDisposable } from 'vs/base/common/lifecycle';
-import { COI } from 'vs/base/common/network';
+import { COI, FileAccess } from 'vs/base/common/network';
 import { URI } from 'vs/base/common/uri';
 import { generateUuid } from 'vs/base/common/uuid';
 import { localize } from 'vs/nls';
@@ -185,11 +185,6 @@ export class WebviewElement extends Disposable implements IWebview, WebviewFindD
 				return;
 			}
 
-			if (e.origin !== this._webviewContentOrigin(this._encodedWebviewOrigin)) {
-				console.log(`Skipped renderer receiving message due to mismatched origins: ${e.origin} ${this._webviewContentOrigin}`);
-				return;
-			}
-
 			if (e.data.channel === 'webview-ready') {
 				if (this._messagePort) {
 					return;
@@ -476,6 +471,9 @@ export class WebviewElement extends Disposable implements IWebview, WebviewFindD
 			params.purpose = options.purpose;
 		}
 
+		params.serviceWorkerUri = FileAccess.asBrowserUri('vs/workbench/contrib/webview/browser/pre/service-worker.js').toString(true);
+		params.fakeHtmlUri = FileAccess.asBrowserUri('vs/workbench/contrib/webview/browser/pre/fake.html').toString(true);
+
 		COI.addSearchParam(params, true, true);
 
 		const queryString = new URLSearchParams(params).toString();
@@ -483,7 +481,8 @@ export class WebviewElement extends Disposable implements IWebview, WebviewFindD
 		// Workaround for https://bugzilla.mozilla.org/show_bug.cgi?id=1754872
 		const fileName = isFirefox ? 'index-no-csp.html' : 'index.html';
 
-		this.element!.setAttribute('src', `${this.webviewContentEndpoint(encodedWebviewOrigin)}/${fileName}?${queryString}`);
+		const relativeIframeSrc = FileAccess.asBrowserUri(`vs/workbench/contrib/webview/browser/pre/${fileName}`);
+		this.element!.setAttribute('src', `${relativeIframeSrc.toString(true)}?${queryString}`);
 	}
 
 	public mountTo(element: HTMLElement) {
@@ -537,11 +536,6 @@ export class WebviewElement extends Disposable implements IWebview, WebviewFindD
 		return endpoint;
 	}
 
-	private _webviewContentOrigin(encodedWebviewOrigin: string): string {
-		const uri = URI.parse(this.webviewContentEndpoint(encodedWebviewOrigin));
-		return uri.scheme + '://' + uri.authority.toLowerCase();
-	}
-
 	private doPostMessage(channel: string, data?: any, transferable: Transferable[] = []): boolean {
 		if (this.element && this._messagePort) {
 			this._messagePort.postMessage({ channel, args: data }, transferable);
diff --git a/src/vs/workbench/services/extensions/browser/extensionService.ts b/src/vs/workbench/services/extensions/browser/extensionService.ts
index d8652bf5ac0..d0cf61f0983 100644
--- a/src/vs/workbench/services/extensions/browser/extensionService.ts
+++ b/src/vs/workbench/services/extensions/browser/extensionService.ts
@@ -210,16 +210,16 @@ export class ExtensionService extends AbstractExtensionService implements IExten
 	}
 }
 
-class BrowserExtensionHostFactory implements IExtensionHostFactory {
+export class BrowserExtensionHostFactory implements IExtensionHostFactory {
 
 	constructor(
 		private readonly _extensionsProposedApi: ExtensionsProposedApi,
 		private readonly _scanWebExtensions: () => Promise<IExtensionDescription[]>,
 		private readonly _getExtensions: () => Promise<IExtensionDescription[]>,
-		@IInstantiationService private readonly _instantiationService: IInstantiationService,
-		@IRemoteAgentService private readonly _remoteAgentService: IRemoteAgentService,
-		@IRemoteAuthorityResolverService private readonly _remoteAuthorityResolverService: IRemoteAuthorityResolverService,
-		@IWorkbenchExtensionEnablementService private readonly _extensionEnablementService: IWorkbenchExtensionEnablementService,
+		@IInstantiationService protected readonly _instantiationService: IInstantiationService,
+		@IRemoteAgentService protected readonly _remoteAgentService: IRemoteAgentService,
+		@IRemoteAuthorityResolverService protected readonly _remoteAuthorityResolverService: IRemoteAuthorityResolverService,
+		@IWorkbenchExtensionEnablementService protected readonly _extensionEnablementService: IWorkbenchExtensionEnablementService,
 	) { }
 
 	createExtensionHost(runningLocations: ExtensionRunningLocationTracker, runningLocation: ExtensionRunningLocation, isInitialStart: boolean): IExtensionHost | null {
@@ -245,7 +245,7 @@ class BrowserExtensionHostFactory implements IExtensionHostFactory {
 		}
 	}
 
-	private _createLocalExtensionHostDataProvider(runningLocations: ExtensionRunningLocationTracker, desiredRunningLocation: ExtensionRunningLocation, isInitialStart: boolean): IWebWorkerExtensionHostDataProvider {
+	protected _createLocalExtensionHostDataProvider(runningLocations: ExtensionRunningLocationTracker, desiredRunningLocation: ExtensionRunningLocation, isInitialStart: boolean): IWebWorkerExtensionHostDataProvider {
 		return {
 			getInitData: async (): Promise<IWebWorkerExtensionHostInitData> => {
 				if (isInitialStart) {
diff --git a/src/vs/workbench/services/extensions/browser/webWorkerExtensionHost.ts b/src/vs/workbench/services/extensions/browser/webWorkerExtensionHost.ts
index ad66755797e..98d63a5eecf 100644
--- a/src/vs/workbench/services/extensions/browser/webWorkerExtensionHost.ts
+++ b/src/vs/workbench/services/extensions/browser/webWorkerExtensionHost.ts
@@ -76,7 +76,7 @@ export class WebWorkerExtensionHost extends Disposable implements IExtensionHost
 		this._extensionHostLogsLocation = joinPath(this._environmentService.extHostLogsPath, 'webWorker');
 	}
 
-	private async _getWebWorkerExtensionHostIframeSrc(): Promise<string> {
+	protected async _getWebWorkerExtensionHostIframeSrc(): Promise<string> {
 		const suffixSearchParams = new URLSearchParams();
 		if (this._environmentService.debugExtensionHost && this._environmentService.debugRenderer) {
 			suffixSearchParams.set('debugged', '1');
@@ -111,8 +111,6 @@ export class WebWorkerExtensionHost extends Disposable implements IExtensionHost
 				res.searchParams.set('salt', stableOriginUUID);
 				return res.toString();
 			}
-
-			console.warn(`The web worker extension host is started in a same-origin iframe!`);
 		}
 
 		const relativeExtensionHostIframeSrc = FileAccess.asBrowserUri(iframeModulePath);
@@ -128,6 +126,8 @@ export class WebWorkerExtensionHost extends Disposable implements IExtensionHost
 	}
 
 	private async _startInsideIframe(): Promise<IMessagePassingProtocol> {
+		const initDataPromise = this._initDataProvider.getInitData();
+
 		const webWorkerExtensionHostIframeSrc = await this._getWebWorkerExtensionHostIframeSrc();
 		const emitter = this._register(new Emitter<VSBuffer>());
 
@@ -223,10 +223,10 @@ export class WebWorkerExtensionHost extends Disposable implements IExtensionHost
 			}
 		};
 
-		return this._performHandshake(protocol);
+		return this._performHandshake(protocol, initDataPromise);
 	}
 
-	private async _performHandshake(protocol: IMessagePassingProtocol): Promise<IMessagePassingProtocol> {
+	private async _performHandshake(protocol: IMessagePassingProtocol, initDataPromise: Promise<IWebWorkerExtensionHostInitData>): Promise<IMessagePassingProtocol> {
 		// extension host handshake happens below
 		// (1) <== wait for: Ready
 		// (2) ==> send: init data
@@ -236,7 +236,7 @@ export class WebWorkerExtensionHost extends Disposable implements IExtensionHost
 		if (this._isTerminating) {
 			throw canceled();
 		}
-		protocol.send(VSBuffer.fromString(JSON.stringify(await this._createExtHostInitData())));
+		protocol.send(VSBuffer.fromString(JSON.stringify(await this._createExtHostInitData(initDataPromise))));
 		if (this._isTerminating) {
 			throw canceled();
 		}
@@ -265,8 +265,8 @@ export class WebWorkerExtensionHost extends Disposable implements IExtensionHost
 		return Promise.resolve(false);
 	}
 
-	private async _createExtHostInitData(): Promise<IExtensionHostInitData> {
-		const initData = await this._initDataProvider.getInitData();
+	private async _createExtHostInitData(initDataPromise: Promise<IWebWorkerExtensionHostInitData>): Promise<IExtensionHostInitData> {
+		const initData = await initDataPromise;
 		const workspace = this._contextService.getWorkspace();
 		const deltaExtensions = this.extensions.set(initData.allExtensions, initData.myExtensions);
 		const nlsBaseUrl = this._productService.extensionsGallery?.nlsBaseUrl;
diff --git a/src/vs/workbench/services/extensions/common/abstractExtensionService.ts b/src/vs/workbench/services/extensions/common/abstractExtensionService.ts
index c529886ca92..2311e7a0fb5 100644
--- a/src/vs/workbench/services/extensions/common/abstractExtensionService.ts
+++ b/src/vs/workbench/services/extensions/common/abstractExtensionService.ts
@@ -87,9 +87,9 @@ export abstract class AbstractExtensionService extends Disposable implements IEx
 	private _resolveAuthorityAttempt: number = 0;
 
 	constructor(
-		private readonly _extensionsProposedApi: ExtensionsProposedApi,
-		private readonly _extensionHostFactory: IExtensionHostFactory,
-		private readonly _extensionHostKindPicker: IExtensionHostKindPicker,
+		protected readonly _extensionsProposedApi: ExtensionsProposedApi,
+		protected readonly _extensionHostFactory: IExtensionHostFactory,
+		protected readonly _extensionHostKindPicker: IExtensionHostKindPicker,
 		@IInstantiationService protected readonly _instantiationService: IInstantiationService,
 		@INotificationService protected readonly _notificationService: INotificationService,
 		@IWorkbenchEnvironmentService protected readonly _environmentService: IWorkbenchEnvironmentService,
@@ -192,7 +192,7 @@ export abstract class AbstractExtensionService extends Disposable implements IEx
 
 	//#region deltaExtensions
 
-	private async _handleDeltaExtensions(item: DeltaExtensionsQueueItem): Promise<void> {
+	protected async _handleDeltaExtensions(item: DeltaExtensionsQueueItem): Promise<void> {
 		this._deltaExtensionsQueue.push(item);
 		if (this._inHandleDeltaExtensions) {
 			// Let the current item finish, the new one will be picked up
@@ -1156,7 +1156,7 @@ export interface IExtensionHostFactory {
 	createExtensionHost(runningLocations: ExtensionRunningLocationTracker, runningLocation: ExtensionRunningLocation, isInitialStart: boolean): IExtensionHost | null;
 }
 
-class DeltaExtensionsQueueItem {
+export class DeltaExtensionsQueueItem {
 	constructor(
 		public readonly toAdd: IExtension[],
 		public readonly toRemove: string[] | IExtension[]
diff --git a/src/vs/workbench/services/extensions/common/remoteExtensionHost.ts b/src/vs/workbench/services/extensions/common/remoteExtensionHost.ts
index 7ac17418689..fedd15e8fb6 100644
--- a/src/vs/workbench/services/extensions/common/remoteExtensionHost.ts
+++ b/src/vs/workbench/services/extensions/common/remoteExtensionHost.ts
@@ -84,7 +84,7 @@ export class RemoteExtensionHost extends Disposable implements IExtensionHost {
 		this._isExtensionDevHost = devOpts.isExtensionDevHost;
 	}
 
-	public start(): Promise<IMessagePassingProtocol> {
+	public async start(): Promise<IMessagePassingProtocol> {
 		const options: IConnectionOptions = {
 			commit: this._productService.commit,
 			quality: this._productService.quality,
@@ -99,6 +99,8 @@ export class RemoteExtensionHost extends Disposable implements IExtensionHost {
 			logService: this._logService,
 			ipcLogger: null
 		};
+		const initDataPromise = this._initDataProvider.getInitData();
+
 		return this.remoteAuthorityResolverService.resolveAuthority(this._initDataProvider.remoteAuthority).then((resolverResult) => {
 
 			const startParams: IRemoteExtensionHostStartParams = {
@@ -153,7 +155,7 @@ export class RemoteExtensionHost extends Disposable implements IExtensionHost {
 
 						if (isMessageOfType(msg, MessageType.Ready)) {
 							// 1) Extension Host is ready to receive messages, initialize it
-							this._createExtHostInitData(isExtensionDevelopmentDebug).then(data => {
+							this._createExtHostInitData(initDataPromise, isExtensionDevelopmentDebug).then(data => {
 								protocol.send(VSBuffer.fromString(JSON.stringify(data)));
 							});
 							return;
@@ -201,8 +203,8 @@ export class RemoteExtensionHost extends Disposable implements IExtensionHost {
 		this._onExit.fire([0, reconnectionToken]);
 	}
 
-	private async _createExtHostInitData(isExtensionDevelopmentDebug: boolean): Promise<IExtensionHostInitData> {
-		const remoteInitData = await this._initDataProvider.getInitData();
+	private async _createExtHostInitData(initDataPromise: Promise<IRemoteExtensionHostInitData>, isExtensionDevelopmentDebug: boolean): Promise<IExtensionHostInitData> {
+		const remoteInitData = await initDataPromise;
 		const workspace = this._contextService.getWorkspace();
 		const deltaExtensions = this.extensions.set(remoteInitData.allExtensions, remoteInitData.myExtensions);
 		return {
diff --git a/src/vs/workbench/services/extensions/electron-sandbox/localProcessExtensionHost.ts b/src/vs/workbench/services/extensions/electron-sandbox/localProcessExtensionHost.ts
index 6360149dfce..e88ef0b288a 100644
--- a/src/vs/workbench/services/extensions/electron-sandbox/localProcessExtensionHost.ts
+++ b/src/vs/workbench/services/extensions/electron-sandbox/localProcessExtensionHost.ts
@@ -191,6 +191,7 @@ export class NativeLocalProcessExtensionHost implements IExtensionHost {
 	}
 
 	protected async _startWithCommunication<T>(communication: IExtHostCommunication<T>): Promise<IMessagePassingProtocol> {
+		const initDataPromise = this._initDataProvider.getInitData();
 
 		const [extensionHostCreationResult, communicationPreparedData, portNumber, processEnv] = await Promise.all([
 			this._extensionHostStarter.createExtensionHost(),
@@ -323,7 +324,7 @@ export class NativeLocalProcessExtensionHost implements IExtensionHost {
 
 		// Initialize extension host process with hand shakes
 		const protocol = await communication.establishProtocol(communicationPreparedData, this._extensionHostProcess, opts);
-		await this._performHandshake(protocol);
+		await this._performHandshake(protocol, initDataPromise);
 		clearTimeout(startupTimeoutHandle);
 		return protocol;
 	}
@@ -358,7 +359,7 @@ export class NativeLocalProcessExtensionHost implements IExtensionHost {
 		return port || 0;
 	}
 
-	private _performHandshake(protocol: IMessagePassingProtocol): Promise<void> {
+	private _performHandshake(protocol: IMessagePassingProtocol, initDataPromise: Promise<ILocalProcessExtensionHostInitData>): Promise<void> {
 		// 1) wait for the incoming `ready` event and send the initialization data.
 		// 2) wait for the incoming `initialized` event.
 		return new Promise<void>((resolve, reject) => {
@@ -383,7 +384,7 @@ export class NativeLocalProcessExtensionHost implements IExtensionHost {
 					// 1) Extension Host is ready to receive messages, initialize it
 					uninstallTimeoutCheck();
 
-					this._createExtHostInitData().then(data => {
+					this._createExtHostInitData(initDataPromise).then(data => {
 
 						// Wait 60s for the initialized message
 						installTimeoutCheck();
@@ -412,8 +413,8 @@ export class NativeLocalProcessExtensionHost implements IExtensionHost {
 		});
 	}
 
-	private async _createExtHostInitData(): Promise<IExtensionHostInitData> {
-		const initData = await this._initDataProvider.getInitData();
+	private async _createExtHostInitData(initDataPromise: Promise<ILocalProcessExtensionHostInitData>): Promise<IExtensionHostInitData> {
+		const initData = await initDataPromise;
 		const workspace = this._contextService.getWorkspace();
 		const deltaExtensions = this.extensions.set(initData.allExtensions, initData.myExtensions);
 		return {
diff --git a/src/vs/workbench/services/keybinding/browser/keybindingService.ts b/src/vs/workbench/services/keybinding/browser/keybindingService.ts
index e6112182d25..0bc70e55633 100644
--- a/src/vs/workbench/services/keybinding/browser/keybindingService.ts
+++ b/src/vs/workbench/services/keybinding/browser/keybindingService.ts
@@ -381,15 +381,19 @@ export class WorkbenchKeybindingService extends AbstractKeybindingService {
 		return this.userKeybindings.keybindings.length;
 	}
 
-	private updateResolver(): void {
+	protected updateResolver(): void {
 		this._cachedResolver = null;
 		this._onDidUpdateKeybindings.fire();
 	}
 
+	protected getUserKeybindingItems() {
+		return this._resolveUserKeybindingItems(this.userKeybindings.keybindings, false);
+	}
+
 	protected _getResolver(): KeybindingResolver {
 		if (!this._cachedResolver) {
 			const defaults = this._resolveKeybindingItems(KeybindingsRegistry.getDefaultKeybindings(), true);
-			const overrides = this._resolveUserKeybindingItems(this.userKeybindings.keybindings, false);
+			const overrides = this.getUserKeybindingItems();
 			this._cachedResolver = new KeybindingResolver(defaults, overrides, (str) => this._log(str));
 		}
 		return this._cachedResolver;
diff --git a/src/vs/workbench/services/languageDetection/browser/languageDetectionSimpleWorker.ts b/src/vs/workbench/services/languageDetection/browser/languageDetectionSimpleWorker.ts
index e8c8239b35f..9017a971ee5 100644
--- a/src/vs/workbench/services/languageDetection/browser/languageDetectionSimpleWorker.ts
+++ b/src/vs/workbench/services/languageDetection/browser/languageDetectionSimpleWorker.ts
@@ -3,14 +3,12 @@
  *  Licensed under the MIT License. See License.txt in the project root for license information.
  *--------------------------------------------------------------------------------------------*/
 
-import type { ModelOperations, ModelResult } from '@vscode/vscode-languagedetection';
+import { ModelOperations, ModelResult } from '@vscode/vscode-languagedetection';
 import { StopWatch } from 'vs/base/common/stopwatch';
 import { IRequestHandler } from 'vs/base/common/worker/simpleWorker';
 import { EditorSimpleWorker } from 'vs/editor/common/services/editorSimpleWorker';
 import { IEditorWorkerHost } from 'vs/editor/common/services/editorWorkerHost';
 
-type RegexpModel = { detect: (inp: string, langBiases: Record<string, number>, supportedLangs?: string[]) => string | undefined };
-
 /**
  * Called on the worker side
  * @internal
@@ -28,9 +26,6 @@ export class LanguageDetectionSimpleWorker extends EditorSimpleWorker {
 	private static readonly positiveConfidenceCorrectionBucket2 = 0.025;
 	private static readonly negativeConfidenceCorrection = 0.5;
 
-	private _regexpModel: RegexpModel | undefined;
-	private _regexpLoadFailed: boolean = false;
-
 	private _modelOperations: ModelOperations | undefined;
 	private _loadFailed: boolean = false;
 
@@ -63,19 +58,8 @@ export class LanguageDetectionSimpleWorker extends EditorSimpleWorker {
 			return undefined;
 		};
 
-		const historicalResolver = async () => this.runRegexpModel(documentTextSample, langBiases ?? {}, supportedLangs);
-
-		if (preferHistory) {
-			const history = await historicalResolver();
-			if (history) { return history; }
-			const neural = await neuralResolver();
-			if (neural) { return neural; }
-		} else {
-			const neural = await neuralResolver();
-			if (neural) { return neural; }
-			const history = await historicalResolver();
-			if (history) { return history; }
-		}
+		const neural = await neuralResolver();
+		if (neural) { return neural; }
 
 		return undefined;
 	}
@@ -94,50 +78,11 @@ export class LanguageDetectionSimpleWorker extends EditorSimpleWorker {
 		return content;
 	}
 
-	private async getRegexpModel(): Promise<RegexpModel | undefined> {
-		if (this._regexpLoadFailed) {
-			return;
-		}
-		if (this._regexpModel) {
-			return this._regexpModel;
-		}
-		const uri: string = await this._host.fhr('getRegexpModelUri', []);
-		try {
-			this._regexpModel = await import(uri) as RegexpModel;
-			return this._regexpModel;
-		} catch (e) {
-			this._regexpLoadFailed = true;
-			// console.warn('error loading language detection model', e);
-			return;
-		}
-	}
-
-	private async runRegexpModel(content: string, langBiases: Record<string, number>, supportedLangs?: string[]): Promise<string | undefined> {
-		const regexpModel = await this.getRegexpModel();
-		if (!regexpModel) { return; }
-
-		if (supportedLangs?.length) {
-			// When using supportedLangs, normally computed biases are too extreme. Just use a "bitmask" of sorts.
-			for (const lang of Object.keys(langBiases)) {
-				if (supportedLangs.includes(lang)) {
-					langBiases[lang] = 1;
-				} else {
-					langBiases[lang] = 0;
-				}
-			}
-		}
-
-		const detected = regexpModel.detect(content, langBiases, supportedLangs);
-		return detected;
-	}
-
 	private async getModelOperations(): Promise<ModelOperations> {
 		if (this._modelOperations) {
 			return this._modelOperations;
 		}
 
-		const uri: string = await this._host.fhr('getIndexJsUri', []);
-		const { ModelOperations } = await import(uri) as typeof import('@vscode/vscode-languagedetection');
 		this._modelOperations = new ModelOperations({
 			modelJsonLoaderFunc: async () => {
 				const response = await fetch(await this._host.fhr('getModelJsonUri', []));
diff --git a/src/vs/workbench/services/outline/browser/outlineService.ts b/src/vs/workbench/services/outline/browser/outlineService.ts
index f4707432371..7c5cdde39cc 100644
--- a/src/vs/workbench/services/outline/browser/outlineService.ts
+++ b/src/vs/workbench/services/outline/browser/outlineService.ts
@@ -11,7 +11,7 @@ import { IEditorPane } from 'vs/workbench/common/editor';
 import { IOutline, IOutlineCreator, IOutlineService, OutlineTarget } from 'vs/workbench/services/outline/browser/outline';
 import { Event, Emitter } from 'vs/base/common/event';
 
-class OutlineService implements IOutlineService {
+export class OutlineService implements IOutlineService {
 
 	declare _serviceBrand: undefined;
 
diff --git a/src/vs/workbench/services/textMate/browser/backgroundTokenization/textMateWorkerTokenizerController.ts b/src/vs/workbench/services/textMate/browser/backgroundTokenization/textMateWorkerTokenizerController.ts
index 8c0d074883b..e34e7048683 100644
--- a/src/vs/workbench/services/textMate/browser/backgroundTokenization/textMateWorkerTokenizerController.ts
+++ b/src/vs/workbench/services/textMate/browser/backgroundTokenization/textMateWorkerTokenizerController.ts
@@ -3,7 +3,6 @@
  *  Licensed under the MIT License. See License.txt in the project root for license information.
  *--------------------------------------------------------------------------------------------*/
 
-import { importAMDNodeModule } from 'vs/amdX';
 import { Disposable } from 'vs/base/common/lifecycle';
 import { IObservable, autorun, keepAlive, observableFromEvent } from 'vs/base/common/observable';
 import { countEOL } from 'vs/editor/common/core/eolCounter';
@@ -17,7 +16,7 @@ import { ContiguousMultilineTokensBuilder } from 'vs/editor/common/tokens/contig
 import { IConfigurationService } from 'vs/platform/configuration/common/configuration';
 import { ArrayEdit, MonotonousIndexTransformer, SingleArrayEdit } from 'vs/workbench/services/textMate/browser/arrayOperation';
 import type { StateDeltas, TextMateTokenizationWorker } from 'vs/workbench/services/textMate/browser/backgroundTokenization/worker/textMateTokenizationWorker.worker';
-import type { applyStateStackDiff, StateStack } from 'vscode-textmate';
+import { StateStack, applyStateStackDiff, INITIAL } from 'vscode-textmate';
 
 export class TextMateWorkerTokenizerController extends Disposable {
 	private static _id = 0;
@@ -177,7 +176,6 @@ export class TextMateWorkerTokenizerController extends Disposable {
 		);
 
 		if (!this._applyStateStackDiffFn || !this._initialState) {
-			const { applyStateStackDiff, INITIAL } = await importAMDNodeModule<typeof import('vscode-textmate')>('vscode-textmate', 'release/main.js');
 			this._applyStateStackDiffFn = applyStateStackDiff;
 			this._initialState = INITIAL;
 		}
diff --git a/src/vs/workbench/services/textMate/browser/backgroundTokenization/worker/textMateTokenizationWorker.worker.ts b/src/vs/workbench/services/textMate/browser/backgroundTokenization/worker/textMateTokenizationWorker.worker.ts
index 3974d642732..6e7de4d5d0d 100644
--- a/src/vs/workbench/services/textMate/browser/backgroundTokenization/worker/textMateTokenizationWorker.worker.ts
+++ b/src/vs/workbench/services/textMate/browser/backgroundTokenization/worker/textMateTokenizationWorker.worker.ts
@@ -11,6 +11,8 @@ import { ICreateGrammarResult, TMGrammarFactory } from 'vs/workbench/services/te
 import { IValidEmbeddedLanguagesMap, IValidGrammarDefinition, IValidTokenTypeMap } from 'vs/workbench/services/textMate/common/TMScopeRegistry';
 import type { IOnigLib, IRawTheme, StackDiff } from 'vscode-textmate';
 import { TextMateWorkerTokenizer } from './textMateWorkerTokenizer';
+import * as vscodeTextmate from 'vscode-textmate';
+import * as vscodeOniguruma from 'vscode-oniguruma';
 
 /**
  * Defines the worker entry point. Must be exported and named `create`.
@@ -78,9 +80,6 @@ export class TextMateTokenizationWorker {
 	}
 
 	private async _loadTMGrammarFactory(grammarDefinitions: IValidGrammarDefinition[]): Promise<TMGrammarFactory> {
-		const uri = this._createData.textmateMainUri;
-		const vscodeTextmate = await import(uri);
-		const vscodeOniguruma = await import(this._createData.onigurumaMainUri);
 		const response = await fetch(this._createData.onigurumaWASMUri);
 
 		// Using the response directly only works if the server sets the MIME type 'application/wasm'.
diff --git a/src/vs/workbench/services/textMate/browser/backgroundTokenization/worker/textMateWorkerTokenizer.ts b/src/vs/workbench/services/textMate/browser/backgroundTokenization/worker/textMateWorkerTokenizer.ts
index a7c586b2442..07fd6ca42de 100644
--- a/src/vs/workbench/services/textMate/browser/backgroundTokenization/worker/textMateWorkerTokenizer.ts
+++ b/src/vs/workbench/services/textMate/browser/backgroundTokenization/worker/textMateWorkerTokenizer.ts
@@ -3,7 +3,6 @@
  *  Licensed under the MIT License. See License.txt in the project root for license information.
  *--------------------------------------------------------------------------------------------*/
 
-import { importAMDNodeModule } from 'vs/amdX';
 import { RunOnceScheduler } from 'vs/base/common/async';
 import { observableValue } from 'vs/base/common/observable';
 import { setTimeout0 } from 'vs/base/common/platform';
@@ -16,7 +15,7 @@ import { ContiguousMultilineTokensBuilder } from 'vs/editor/common/tokens/contig
 import { LineTokens } from 'vs/editor/common/tokens/lineTokens';
 import { TextMateTokenizationSupport } from 'vs/workbench/services/textMate/browser/tokenizationSupport/textMateTokenizationSupport';
 import { TokenizationSupportWithLineLimit } from 'vs/workbench/services/textMate/browser/tokenizationSupport/tokenizationSupportWithLineLimit';
-import type { StackDiff, StateStack, diffStateStacksRefEq } from 'vscode-textmate';
+import { StackDiff, StateStack, diffStateStacksRefEq } from 'vscode-textmate';
 import { ICreateGrammarResult } from 'vs/workbench/services/textMate/common/TMGrammarFactory';
 import { StateDeltas } from 'vs/workbench/services/textMate/browser/backgroundTokenization/worker/textMateTokenizationWorker.worker';
 
@@ -113,7 +112,6 @@ export class TextMateWorkerTokenizer extends MirrorTextModel {
 		}
 
 		if (!this._diffStateStacksRefEqFn) {
-			const { diffStateStacksRefEq } = await importAMDNodeModule<typeof import('vscode-textmate')>('vscode-textmate', 'release/main.js');
 			this._diffStateStacksRefEqFn = diffStateStacksRefEq;
 		}
 
diff --git a/src/vs/workbench/services/textMate/browser/textMateTokenizationFeatureImpl.ts b/src/vs/workbench/services/textMate/browser/textMateTokenizationFeatureImpl.ts
index 1ba671448d2..bec87c04f1e 100644
--- a/src/vs/workbench/services/textMate/browser/textMateTokenizationFeatureImpl.ts
+++ b/src/vs/workbench/services/textMate/browser/textMateTokenizationFeatureImpl.ts
@@ -3,7 +3,6 @@
  *  Licensed under the MIT License. See License.txt in the project root for license information.
  *--------------------------------------------------------------------------------------------*/
 
-import { importAMDNodeModule } from 'vs/amdX';
 import * as dom from 'vs/base/browser/dom';
 import { equals as equalArray } from 'vs/base/common/arrays';
 import { Color } from 'vs/base/common/color';
@@ -38,6 +37,8 @@ import { ITMSyntaxExtensionPoint, grammarsExtPoint } from 'vs/workbench/services
 import { IValidEmbeddedLanguagesMap, IValidGrammarDefinition, IValidTokenTypeMap } from 'vs/workbench/services/textMate/common/TMScopeRegistry';
 import { ITextMateThemingRule, IWorkbenchColorTheme, IWorkbenchThemeService } from 'vs/workbench/services/themes/common/workbenchThemeService';
 import type { IGrammar, IOnigLib, IRawTheme } from 'vscode-textmate';
+import * as vscodeTextmate from 'vscode-textmate';
+import * as vscodeOniguruma from 'vscode-oniguruma';
 
 export class TextMateTokenizationFeature extends Disposable implements ITextMateTokenizationService {
 	private static reportTokenizationTimeCounter = { sync: 0, async: 0 };
@@ -245,7 +246,7 @@ export class TextMateTokenizationFeature extends Disposable implements ITextMate
 			return this._grammarFactory;
 		}
 
-		const [vscodeTextmate, vscodeOniguruma] = await Promise.all([importAMDNodeModule<typeof import('vscode-textmate')>('vscode-textmate', 'release/main.js'), this._getVSCodeOniguruma()]);
+		const vscodeOniguruma = await this._getVSCodeOniguruma();
 		const onigLib: Promise<IOnigLib> = Promise.resolve({
 			createOnigScanner: (sources: string[]) => vscodeOniguruma.createOnigScanner(sources),
 			createOnigString: (str: string) => vscodeOniguruma.createOnigString(str)
@@ -356,7 +357,7 @@ export class TextMateTokenizationFeature extends Disposable implements ITextMate
 	private _getVSCodeOniguruma(): Promise<typeof import('vscode-oniguruma')> {
 		if (!this._vscodeOniguruma) {
 			this._vscodeOniguruma = (async () => {
-				const [vscodeOniguruma, wasm] = await Promise.all([importAMDNodeModule<typeof import('vscode-oniguruma')>('vscode-oniguruma', 'release/main.js'), this._loadVSCodeOnigurumaWASM()]);
+				const wasm = await this._loadVSCodeOnigurumaWASM();
 				await vscodeOniguruma.loadWASM({
 					data: wasm,
 					print: (str: string) => {
diff --git a/src/vs/workbench/services/textfile/common/encoding.ts b/src/vs/workbench/services/textfile/common/encoding.ts
index 6675f732b0e..d46f0fd893d 100644
--- a/src/vs/workbench/services/textfile/common/encoding.ts
+++ b/src/vs/workbench/services/textfile/common/encoding.ts
@@ -5,7 +5,6 @@
 
 import { Readable, ReadableStream, newWriteableStream, listenStream } from 'vs/base/common/stream';
 import { VSBuffer, VSBufferReadable, VSBufferReadableStream } from 'vs/base/common/buffer';
-import { importAMDNodeModule } from 'vs/amdX';
 
 export const UTF8 = 'utf8';
 export const UTF8_with_bom = 'utf8bom';
@@ -79,7 +78,7 @@ class DecoderStream implements IDecoderStream {
 	static async create(encoding: string): Promise<DecoderStream> {
 		let decoder: IDecoderStream | undefined = undefined;
 		if (encoding !== UTF8) {
-			const iconv = await importAMDNodeModule<typeof import('@vscode/iconv-lite-umd')>('@vscode/iconv-lite-umd', 'lib/iconv-lite-umd.js');
+			const iconv = await import('@vscode/iconv-lite-umd');
 			decoder = iconv.getDecoder(toNodeEncoding(encoding));
 		} else {
 			const utf8TextDecoder = new TextDecoder();
@@ -210,7 +209,7 @@ export function toDecodeStream(source: VSBufferReadableStream, options: IDecodeS
 }
 
 export async function toEncodeReadable(readable: Readable<string>, encoding: string, options?: { addBOM?: boolean }): Promise<VSBufferReadable> {
-	const iconv = await importAMDNodeModule<typeof import('@vscode/iconv-lite-umd')>('@vscode/iconv-lite-umd', 'lib/iconv-lite-umd.js');
+	const iconv = await import('@vscode/iconv-lite-umd');
 	const encoder = iconv.getEncoder(toNodeEncoding(encoding), options);
 
 	let bytesWritten = false;
@@ -259,7 +258,7 @@ export async function toEncodeReadable(readable: Readable<string>, encoding: str
 }
 
 export async function encodingExists(encoding: string): Promise<boolean> {
-	const iconv = await importAMDNodeModule<typeof import('@vscode/iconv-lite-umd')>('@vscode/iconv-lite-umd', 'lib/iconv-lite-umd.js');
+	const iconv = await import('@vscode/iconv-lite-umd');
 
 	return iconv.encodingExists(toNodeEncoding(encoding));
 }
@@ -315,7 +314,7 @@ const IGNORE_ENCODINGS = ['ascii', 'utf-16', 'utf-32'];
  * Guesses the encoding from buffer.
  */
 async function guessEncodingByBuffer(buffer: VSBuffer): Promise<string | null> {
-	const jschardet = await importAMDNodeModule<typeof import('jschardet')>('jschardet', 'dist/jschardet.min.js');
+	const jschardet = await import('jschardet');
 
 	// ensure to limit buffer for guessing due to https://github.com/aadsm/jschardet/issues/53
 	const limitedBuffer = buffer.slice(0, AUTO_ENCODING_GUESS_MAX_BYTES);
diff --git a/src/vs/workbench/services/workspaces/browser/abstractWorkspaceEditingService.ts b/src/vs/workbench/services/workspaces/browser/abstractWorkspaceEditingService.ts
index 4653e395be9..1eccfce4bf4 100644
--- a/src/vs/workbench/services/workspaces/browser/abstractWorkspaceEditingService.ts
+++ b/src/vs/workbench/services/workspaces/browser/abstractWorkspaceEditingService.ts
@@ -14,7 +14,7 @@ import { ConfigurationScope, IConfigurationRegistry, Extensions as Configuration
 import { Registry } from 'vs/platform/registry/common/platform';
 import { ICommandService } from 'vs/platform/commands/common/commands';
 import { distinct, firstOrDefault } from 'vs/base/common/arrays';
-import { basename, isEqual, isEqualAuthority, joinPath, removeTrailingPathSeparator } from 'vs/base/common/resources';
+import { basename, isEqual, joinPath, removeTrailingPathSeparator } from 'vs/base/common/resources';
 import { INotificationService, Severity } from 'vs/platform/notification/common/notification';
 import { IFileService } from 'vs/platform/files/common/files';
 import { IWorkbenchEnvironmentService } from 'vs/workbench/services/environment/common/environmentService';
@@ -169,11 +169,6 @@ export abstract class AbstractWorkspaceEditingService implements IWorkspaceEditi
 
 	private async doAddFolders(foldersToAdd: IWorkspaceFolderCreationData[], index?: number, donotNotifyError: boolean = false): Promise<void> {
 		const state = this.contextService.getWorkbenchState();
-		const remoteAuthority = this.environmentService.remoteAuthority;
-		if (remoteAuthority) {
-			// https://github.com/microsoft/vscode/issues/94191
-			foldersToAdd = foldersToAdd.filter(folder => folder.uri.scheme !== Schemas.file && (folder.uri.scheme !== Schemas.vscodeRemote || isEqualAuthority(folder.uri.authority, remoteAuthority)));
-		}
 
 		// If we are in no-workspace or single-folder workspace, adding folders has to
 		// enter a workspace.
